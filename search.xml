<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Electron核心概念</title>
      <link href="/archives/3055911b.html"/>
      <url>/archives/3055911b.html</url>
      
        <content type="html"><![CDATA[<h1 id="Elctron核心概念"><a href="#Elctron核心概念" class="headerlink" title="Elctron核心概念"></a>Elctron核心概念</h1><h3 id="1-Electron主进程与渲染进程"><a href="#1-Electron主进程与渲染进程" class="headerlink" title="1.Electron主进程与渲染进程"></a>1.Electron主进程与渲染进程</h3><p>主进程:启动项目时运行的<code>main.js</code>脚本就是我们说的主进程。在主进程运行的脚本可以创建<code>Web</code>页面的形式展示<code>GUI</code>。<span class='p red'>主进程只有一个</span> <br/></p><p>渲染进程:每个<code>Electron</code>的页面都在运行着自己的进程。这样的进程称之为渲染进程(基于<code>Chromiun</code>的多进程结构)。<hr/><br><img src="https://i0.hdslb.com/bfs/album/7912ad36fcfb60abc908a987c26d46457bb4e401.png" alt="image-20230127140027676"></p><p>主进程使用<code>BrowserWindow</code>创建实例，主进程销毁后，对应的渲染进程会被终止。主进程与渲染进程通过<code>IPC</code>方式(事件驱动)进行。</p><h3 id="2-主进程时间生命周期"><a href="#2-主进程时间生命周期" class="headerlink" title="2.主进程时间生命周期"></a>2.主进程时间生命周期</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs JS">main.<span class="hljs-property">js</span><br><br><span class="hljs-comment">//关闭所有窗口时退出应用 (Windows &amp; Linux)</span><br><span class="hljs-comment">//在Windows和Linux上，关闭所有窗口通常会完全退出一个应用程序。</span><br><span class="hljs-comment">//为了实现这一点，你需要监听 app 模块的 &#x27;window-all-closed&#x27; 事件。如果用户不是在 macOS(darwin) 上运行程序，则调用 app.quit()。</span><br><br>app.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;window-all-closed&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-comment">//对于MacOs系统 =》关闭窗口时不会直接退出应用</span><br>  <span class="hljs-keyword">if</span> (process.<span class="hljs-property">platform</span> !== <span class="hljs-string">&#x27;darwin&#x27;</span>) app.<span class="hljs-title function_">quit</span>()<br>&#125;)<br><br><span class="hljs-comment">//如果没有窗口打开则打开一个窗口 (macOS)</span><br><span class="hljs-comment">//当 Linux 和 Windows 应用在没有窗口打开时退出了，macOS 应用通常即使在没有打开任何窗口的情况下也继续运行，并且在没有窗口可用的情况下激活应用时会打开新的窗口。</span><br><span class="hljs-comment">//为了实现这一特性，监听 app 模块的 activate 事件。如果没有任何浏览器窗口是打开的，则调用 createWindow() 方法。</span><br><span class="hljs-comment">//因为窗口无法在 ready 事件前创建，你应当在你的应用初始化后仅监听 activate 事件。 通过在您现有的 whenReady() 回调中附上您的事件监听器来完成这个操作。</span><br><br>app.<span class="hljs-title function_">whenReady</span>().<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-title function_">createWindow</span>()<br>  app.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;activate&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title class_">BrowserWindow</span>.<span class="hljs-title function_">getAllWindows</span>().<span class="hljs-property">length</span> === <span class="hljs-number">0</span>) <span class="hljs-title function_">createWindow</span>()<br>  &#125;)<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="2-1在渲染进程中使用Node模块"><a href="#2-1在渲染进程中使用Node模块" class="headerlink" title="2.1在渲染进程中使用Node模块"></a>2.1在渲染进程中使用Node模块</h4><p>第一种方式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">const</span> win = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BrowserWindow</span>(&#123;<br>  <span class="hljs-attr">width</span>: <span class="hljs-number">1000</span>,<br>  <span class="hljs-attr">height</span>: <span class="hljs-number">800</span>,<br>  <span class="hljs-attr">webPreferences</span>: &#123;<br>  <span class="hljs-comment">//node集成</span><br>    <span class="hljs-attr">nodeIntegration</span>:<span class="hljs-literal">true</span>,<br>    <span class="hljs-comment">//上下文隔离  上下文隔离功能将确保您的预加载脚本和Electron的内部逻辑运行在所加载的webcontent网页之外的另一个独立的上下文环境里。</span><br>    <span class="hljs-comment">//这对安全性很重要，因为它有助于阻止网站访问 Electron 的内部组件和您的预加载脚本可访问的高等级权限的API 。</span><br>    <span class="hljs-attr">contextIsolation</span>:<span class="hljs-literal">false</span>,<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>​        上述方法并不安全，加载远程内容时，不论使用的是哪一种渲染器（<a href="https://www.electronjs.org/zh/docs/latest/api/browser-window"><code>BrowserWindow</code></a>，<a href="https://www.electronjs.org/zh/docs/latest/api/browser-view"><code>BrowserView</code></a> 或者 <a href="https://www.electronjs.org/zh/docs/latest/api/webview-tag">``</a>），最重要的就是绝对不要启用 Node.js 集成。 其目的是限制您授予远程内容的权限, 从而使攻击者在您的网站上执行 JavaScript 时更难伤害您的用户。</p><h5 id="为什么？"><a href="#为什么？" class="headerlink" title="为什么？"></a>为什么？</h5><p>如果攻击者跳过渲染进程并在用户电脑上执行恶意代码，那么这种跨站脚本(XSS) 攻击的危害是非常大的。 跨站脚本攻击很常见，通常情况下，威力仅限于执行代码的网站。 禁用<code>Node.js</code>集成有助于防止XSS攻击升级为“远程代码执行” (RCE) 攻击。</p><p>第二种方式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">//新建一个preload.js将其加入到preload中<br>webPreferences: &#123;<br>preload: path.join(__dirname, &#x27;./renderer/preload.js&#x27;)<br>&#125;<br></code></pre></td></tr></table></figure><p>​        上下文隔离，这意味着，实际上，您的预加载脚本访问的 <code>window</code> 对象<strong>并不是</strong>网站所能访问的对象。 例如，如果您在预加载脚本中设置 <code>window.hello = &#39;wave&#39;</code> 并且启用了上下文隔离，当网站尝试访问<code>window.hello</code>对象时将返回 undefined。</p><h5 id="上下文隔离禁用"><a href="#上下文隔离禁用" class="headerlink" title="上下文隔离禁用"></a>上下文隔离禁用</h5><p>​        在渲染进程中，预加载脚本暴露给已加载的页面 API 是一个常见的使用方式。 当上下文隔离时，您的预加载脚本可能会暴露一个常见的全局<code>window</code>对象给渲染进程。 此后，您可以从中添加任意的属性到预加载在脚本。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JS">preload.<span class="hljs-property">js</span><br><br><span class="hljs-comment">// 上下文隔离禁用的情况下使用预加载</span><br><span class="hljs-variable language_">window</span>.<span class="hljs-property">myAPI</span> = &#123;<br>  <span class="hljs-attr">doAThing</span>: <span class="hljs-function">() =&gt;</span> &#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>doAThing()</code> 函数可以在渲染进程中直接使用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JS">renderer.<span class="hljs-property">js</span><br><br><span class="hljs-comment">// 在渲染器进程使用导出的 API</span><br><span class="hljs-variable language_">window</span>.<span class="hljs-property">myAPI</span>.<span class="hljs-title function_">doAThing</span>()<br></code></pre></td></tr></table></figure><h5 id="启用上下文隔离"><a href="#启用上下文隔离" class="headerlink" title="启用上下文隔离"></a>启用上下文隔离</h5><p>Electron 提供一种专门的模块来无阻地帮助您完成这项工作。 <a href="https://www.electronjs.org/zh/docs/latest/api/context-bridge"><code>contextBridge</code></a> 模块可以用来<strong>安全地</strong>从独立运行、上下文隔离的预加载脚本中暴露 API 给正在运行的渲染进程。 API 还可以像以前一样，从 <code>window.myAPI</code> 网站上访问。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JS">preload.<span class="hljs-property">js</span><br><br><span class="hljs-comment">// 在上下文隔离启用的情况下使用预加载</span><br><span class="hljs-keyword">const</span> &#123; contextBridge &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;electron&#x27;</span>)<br><br>contextBridge.<span class="hljs-title function_">exposeInMainWorld</span>(<span class="hljs-string">&#x27;myAPI&#x27;</span>, &#123;<br>  <span class="hljs-attr">doAThing</span>: <span class="hljs-function">() =&gt;</span> &#123;&#125;<br>&#125;)<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JS">renderer.<span class="hljs-property">js</span><br><br><span class="hljs-comment">// 在渲染器进程使用导出的 API</span><br><span class="hljs-variable language_">window</span>.<span class="hljs-property">myAPI</span>.<span class="hljs-title function_">doAThing</span>()<br></code></pre></td></tr></table></figure><p>如果开启了上下文隔离而没有使用contextBridge来暴露API，在renderer.js中获取的将会是undefined</p><p><strong>单单开启和使用 <code>contextIsolation</code> 并不直接意味着您所做的一切都是安全的。 例如，此代码是 </strong>不安全的<strong>。</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JS">preload.<span class="hljs-property">js</span><br><span class="hljs-comment">// ❌ 错误使用</span><br>contextBridge.<span class="hljs-title function_">exposeInMainWorld</span>(<span class="hljs-string">&#x27;myAPI&#x27;</span>, &#123;<br>  <span class="hljs-attr">send</span>: ipcRenderer.<span class="hljs-property">send</span><br>&#125;)<br></code></pre></td></tr></table></figure><p><strong>它直接暴露了一个没有任何参数过滤的高等级权限 API 。 这将允许任何网站发送任意的 IPC 消息，这不会是你希望发生的。 相反，暴露进程间通信相关 API 的正确方法是为每一种通信消息提供一种实现方法。</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JS">preload.<span class="hljs-property">js</span><br><span class="hljs-comment">// ✅ 正确使用</span><br>contextBridge.<span class="hljs-title function_">exposeInMainWorld</span>(<span class="hljs-string">&#x27;myAPI&#x27;</span>, &#123;<br>  <span class="hljs-attr">loadPreferences</span>: <span class="hljs-function">() =&gt;</span> ipcRenderer.<span class="hljs-title function_">invoke</span>(<span class="hljs-string">&#x27;load-prefs&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-comment">//配置CSP</span><br>  &lt;meta http-equiv=<span class="hljs-string">&quot;Content-Security-Policy&quot;</span><br>    content=<span class="hljs-string">&quot;default-src &#x27;self&#x27;; img-src &#x27;self&#x27; data:; style-src &#x27;self&#x27;; script-src https: &#x27;unsafe-inline&#x27;&quot;</span>&gt;<br>    <br><span class="hljs-comment">//暂时关闭安全警告</span><br>process.<span class="hljs-property">env</span>[<span class="hljs-string">&#x27;ELECTRON_DISABLE_SECURITY_WARNINGS&#x27;</span>] = <span class="hljs-string">&#x27;true&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="3-主进程与渲染进程的通信"><a href="#3-主进程与渲染进程的通信" class="headerlink" title="3.主进程与渲染进程的通信"></a>3.主进程与渲染进程的通信</h3><h4 id="3-1渲染进程到主进程（单向）"><a href="#3-1渲染进程到主进程（单向）" class="headerlink" title="3.1渲染进程到主进程（单向）"></a>3.1渲染进程到主进程（单向）</h4><p>渲染进程到主进程，在渲染进程中您可以使用ipcRenderer.send发送消息，然后在主进程中使用ipcMain.on接收，通常的使用场景是在web中向主进程发送消息</p><div class="tabs" id="进程通信1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#进程通信1-1">main.js</button></li><li class="tab"><button type="button" data-href="#进程通信1-2">preload.js</button></li><li class="tab"><button type="button" data-href="#进程通信1-3">index.html</button></li><li class="tab"><button type="button" data-href="#进程通信1-4">renderer.js</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="进程通信1-1"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">const</span> &#123; app, <span class="hljs-title class_">BrowserWindow</span>, ipcMain &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;electron&#x27;</span>)<br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>)<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">createWindow</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> win = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BrowserWindow</span>(&#123;<br>    <span class="hljs-attr">width</span>: <span class="hljs-number">1000</span>,<br>    <span class="hljs-attr">height</span>: <span class="hljs-number">800</span>,<br>    <span class="hljs-attr">webPreferences</span>: &#123;<br>      <span class="hljs-attr">preload</span>: path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&#x27;./renderer/preload.js&#x27;</span>)<br>    &#125;<br>  &#125;)<br>  win.<span class="hljs-title function_">loadFile</span>(<span class="hljs-string">&#x27;index.html&#x27;</span>)<br>  win.<span class="hljs-property">webContents</span>.<span class="hljs-title function_">openDevTools</span>()<br>  <span class="hljs-comment">// win.loadURL(&#x27;https://www.rhhz.top&#x27;)</span><br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">handleSetTitle</span> = (<span class="hljs-params">event, title</span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> webContents = event.<span class="hljs-property">sender</span><br>  <span class="hljs-keyword">const</span> win = <span class="hljs-title class_">BrowserWindow</span>.<span class="hljs-title function_">fromWebContents</span>(webContents)<br>  win.<span class="hljs-title function_">setTitle</span>(title)<br>&#125;<br><br><span class="hljs-comment">// ipcMain.handle 在 set-title 通道上设置一个 IPC 监听器</span><br>ipcMain.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;set-title&#x27;</span>, handleSetTitle)<br><br>app.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;window-all-closed&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (process.<span class="hljs-property">platform</span> !== <span class="hljs-string">&#x27;darwin&#x27;</span>) app.<span class="hljs-title function_">quit</span>()<br>&#125;)<br><br>app.<span class="hljs-title function_">whenReady</span>().<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-title function_">createWindow</span>()<br>  app.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;activate&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title class_">BrowserWindow</span>.<span class="hljs-title function_">getAllWindows</span>().<span class="hljs-property">length</span> === <span class="hljs-number">0</span>) <span class="hljs-title function_">createWindow</span>()<br>  &#125;)<br>&#125;)<br></code></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="进程通信1-2"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">const</span> &#123; contextBridge, ipcRenderer &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;electron&#x27;</span>)<br><br>contextBridge.<span class="hljs-title function_">exposeInMainWorld</span>(<span class="hljs-string">&#x27;electronAPI&#x27;</span>, &#123;<br>  <span class="hljs-attr">setTitle</span>: <span class="hljs-function">(<span class="hljs-params">title</span>) =&gt;</span> ipcRenderer.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;set-title&#x27;</span>, title),<br>  <span class="hljs-attr">data</span>: &#123;<br>    <span class="hljs-attr">myFlags</span>: [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>],<br>    <span class="hljs-attr">bootTime</span>: <span class="hljs-number">1234</span><br>  &#125;,<br>&#125;)<br><br></code></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="进程通信1-3"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Security-Policy&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;default-src &#x27;self&#x27;; img-src &#x27;self&#x27;; style-src &#x27;self&#x27;; script-src &#x27;self&#x27; https: &#x27;unsafe-inline&#x27;&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;module&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./renderer/index.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  Title: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;title&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span>&gt;</span>Set<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./renderer/renderer.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="进程通信1-4"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">const</span> setButton = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;btn&#x27;</span>)<br><span class="hljs-keyword">const</span> titleInput = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;title&#x27;</span>)<br>setButton.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> title = titleInput.<span class="hljs-property">value</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(event, title);<br>  <span class="hljs-variable language_">window</span>.<span class="hljs-property">electronAPI</span>.<span class="hljs-title function_">setTitle</span>(title)<br>&#125;);<br></code></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>通过预加载脚本暴露 <code>ipcRenderer.send</code></p><p>要将消息发送到上面创建的监听器，您可以使用 <code>ipcRenderer.send</code> API。 默认情况下，渲染器进程没有权限访问 Node.js 和 Electron 模块。 作为应用开发者，您需要使用 <code>contextBridge</code> API 来选择要从预加载脚本中暴露哪些 API。</p><p>在您的预加载脚本中添加以下代码，向渲染器进程暴露一个全局的 <code>window.electronAPI</code> 变量。此时，您将能够在渲染器进程中使用 <code>window.electronAPI.setTitle()</code> 函数。</p><div class="note warning flat"><p>出于安全原因，我们不会直接暴露整个<code>ipcRenderer.send</code> API。 确保尽可能限制渲染器对 <code>Electron API</code> 的访问。</p></div><h4 id="3-2渲染器进程到主进程-双向"><a href="#3-2渲染器进程到主进程-双向" class="headerlink" title="3.2渲染器进程到主进程(双向)"></a>3.2渲染器进程到主进程(双向)</h4><p>双向 IPC 的一个常见应用是从渲染器进程代码调用主进程模块并等待结果。 这可以通过将<code>ipcRenderer.invoke</code>与<code>ipcMain.handle</code>搭配使用来完成。<br>我们依然通过一个示例来了解这种通信方式：<br>使用 ipcMain.handle 监听事件</p><p>在主进程中，我们将创建一个 <code>handleFileOpen()</code> 函数，它调用 <code>dialog.showOpenDialog</code> 并返回用户选择的文件路径值。每当渲染器进程通过 <code>dialog:openFile</code> 通道发送 <code>ipcRender.invoke</code> 消息时，此函数被用作一个回调。然后，返回值将作为一个 Promise 返回到最初的 invoke 调用。</p><div class="tabs" id="进程通信2"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#进程通信2-1">main.js</button></li><li class="tab"><button type="button" data-href="#进程通信2-2">preload.js</button></li><li class="tab"><button type="button" data-href="#进程通信2-3">renderer.js</button></li><li class="tab"><button type="button" data-href="#进程通信2-4">index.html</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="进程通信2-1"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">const</span> &#123; app, <span class="hljs-title class_">BrowserWindow</span>, ipcMain, dialog &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;electron&#x27;</span>)<br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>)<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">createWindow</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> win = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BrowserWindow</span>(&#123;<br>    <span class="hljs-attr">width</span>: <span class="hljs-number">1000</span>,<br>    <span class="hljs-attr">height</span>: <span class="hljs-number">800</span>,<br>    <span class="hljs-attr">webPreferences</span>: &#123;<br>      <span class="hljs-attr">preload</span>: path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&#x27;./renderer/preload.js&#x27;</span>)<br>    &#125;<br>  &#125;)<br>  win.<span class="hljs-title function_">loadFile</span>(<span class="hljs-string">&#x27;index.html&#x27;</span>)<br>  win.<span class="hljs-property">webContents</span>.<span class="hljs-title function_">openDevTools</span>()<br>  <span class="hljs-comment">// win.loadURL(&#x27;https://www.rhhz.top&#x27;)</span><br>&#125;<br><br><br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleFileOpen</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> &#123; canceled, filePaths &#125; = <span class="hljs-keyword">await</span> dialog.<span class="hljs-title function_">showOpenDialog</span>()<br>  <span class="hljs-keyword">if</span> (canceled) &#123;<br>    <span class="hljs-keyword">return</span><br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">return</span> filePaths[<span class="hljs-number">0</span>]<br>  &#125;<br>&#125;<br><br><br>app.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;window-all-closed&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (process.<span class="hljs-property">platform</span> !== <span class="hljs-string">&#x27;darwin&#x27;</span>) app.<span class="hljs-title function_">quit</span>()<br>&#125;)<br><br>app.<span class="hljs-title function_">whenReady</span>().<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  ipcMain.<span class="hljs-title function_">handle</span>(<span class="hljs-string">&#x27;dialog:openFile&#x27;</span>, handleFileOpen)<br>  <span class="hljs-title function_">createWindow</span>()<br>  app.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;activate&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title class_">BrowserWindow</span>.<span class="hljs-title function_">getAllWindows</span>().<span class="hljs-property">length</span> === <span class="hljs-number">0</span>) <span class="hljs-title function_">createWindow</span>()<br>  &#125;)<br>&#125;)<br></code></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="进程通信2-2"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">const</span> &#123; contextBridge, ipcRenderer &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;electron&#x27;</span>)<br><br>contextBridge.<span class="hljs-title function_">exposeInMainWorld</span>(<span class="hljs-string">&#x27;electronAPI&#x27;</span>, &#123;<br>  <span class="hljs-attr">openFile</span>: <span class="hljs-function">() =&gt;</span> ipcRenderer.<span class="hljs-title function_">invoke</span>(<span class="hljs-string">&#x27;dialog:openFile&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="进程通信2-3"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">const</span> btn = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;btn&#x27;</span>)<br><span class="hljs-keyword">const</span> filePathElement = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;filePath&#x27;</span>)<br><br>btn.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">async</span> () =&gt; &#123;<br>  <span class="hljs-keyword">const</span> filePath = <span class="hljs-keyword">await</span> <span class="hljs-variable language_">window</span>.<span class="hljs-property">electronAPI</span>.<span class="hljs-title function_">openFile</span>()<br>  filePathElement.<span class="hljs-property">innerText</span> = filePath<br>&#125;)<br></code></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="进程通信2-4"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Security-Policy&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;default-src &#x27;self&#x27;; img-src &#x27;self&#x27;; style-src &#x27;self&#x27;; script-src &#x27;self&#x27; https: &#x27;unsafe-inline&#x27;&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;</span>Open a File<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  File path: <span class="hljs-tag">&lt;<span class="hljs-name">strong</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;filePath&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./renderer/renderer.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>在主进程中，我们将创建一个 <code>handleFileOpen()</code> 函数，它调用 <code>dialog.showOpenDialog</code> 并返回用户选择的文件路径值。 每当渲染器进程通过 <code>dialog:openFile</code> 通道发送 <code>ipcRender.invoke</code> 消息时，此函数被用作一个回调。 然后，返回值将作为一个 <code>Promise</code> 返回到最初的 <code>invoke</code> 调用。</p><div class="note warning flat"><p>在主进程中通过 <code>handle</code> 引发的错误是不透明的，因为它们被序列化了，并且只有原始错误的 <code>message</code> 属性会提供给渲染器进程。 详情请参阅<a href="https://github.com/electron/electron/issues/24427">#24427</a>。</p></div><div class="tip info"><p>IPC 通道名称上的 dialog: 前缀对代码没有影响。 它仅用作命名空间以帮助提高代码的可读性。</p></div><p>在预加载脚本中，我们暴露了一个单行的 openFile 函数，它调用并返回 ipcRenderer.invoke(‘dialog:openFile’) 的值。 我们将在下一步中使用此 API 从渲染器的用户界面调用原生对话框。 最后，让我们构建加载到 BrowserWindow 中的 HTML 文件。</p><p>在上面的代码片段中，我们监听 #btn 按钮的点击，并调用 window.electronAPI.openFile() API 来激活原生的打开文件对话框。 然后我们在 #filePath 元素中显示选中文件的路径</p><div class="tip key"><p>我们建议尽可能使用 ipcRenderer.invoke。出于保留历史的目地，记录了下面双向地渲染器到主进程模式。</p></div><h4 id="3-主进程到渲染器进程"><a href="#3-主进程到渲染器进程" class="headerlink" title="3.主进程到渲染器进程"></a>3.主进程到渲染器进程</h4><p>将消息从主进程发送到渲染器进程时，需要指定是哪一个渲染器接收消息。 消息需要通过其 <code>WebContents</code> 实例发送到渲染器进程。 此 <code>WebContents</code> 实例包含一个 <code>send</code> 方法，其使用方式与 <code>ipcRenderer.send</code>相同。</p><p>同样的我们使用原生操作菜单控制的数字计数器来演示此模式</p><div class="tabs" id="进程通信3"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#进程通信3-1">main.js</button></li><li class="tab"><button type="button" data-href="#进程通信3-2">preload.js</button></li><li class="tab"><button type="button" data-href="#进程通信3-3">index.html</button></li><li class="tab"><button type="button" data-href="#进程通信3-4">renderer.js</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="进程通信3-1"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">const</span> &#123;app, <span class="hljs-title class_">BrowserWindow</span>, <span class="hljs-title class_">Menu</span>, ipcMain&#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;electron&#x27;</span>)<br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>)<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">createWindow</span> () &#123;<br>  <span class="hljs-keyword">const</span> mainWindow = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BrowserWindow</span>(&#123;<br>    <span class="hljs-attr">webPreferences</span>: &#123;<br>      <span class="hljs-attr">preload</span>: path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&#x27;preload.js&#x27;</span>)<br>    &#125;<br>  &#125;)<br><br>  <span class="hljs-keyword">const</span> menu = <span class="hljs-title class_">Menu</span>.<span class="hljs-title function_">buildFromTemplate</span>([<br>    &#123;<br>      <span class="hljs-attr">label</span>: app.<span class="hljs-property">name</span>,<br>      <span class="hljs-attr">submenu</span>: [<br>      &#123;<br>        <span class="hljs-attr">click</span>: <span class="hljs-function">() =&gt;</span> mainWindow.<span class="hljs-property">webContents</span>.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;update-counter&#x27;</span>, <span class="hljs-number">1</span>),<br>        <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;Increment&#x27;</span>,<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">click</span>: <span class="hljs-function">() =&gt;</span> mainWindow.<span class="hljs-property">webContents</span>.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;update-counter&#x27;</span>, -<span class="hljs-number">1</span>),<br>        <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;Decrement&#x27;</span>,<br>      &#125;<br>      ]<br>    &#125;<br><br>  ])<br><br>  <span class="hljs-title class_">Menu</span>.<span class="hljs-title function_">setApplicationMenu</span>(menu)<br>  mainWindow.<span class="hljs-title function_">loadFile</span>(<span class="hljs-string">&#x27;index.html&#x27;</span>)<br><br>  <span class="hljs-comment">// Open the DevTools.</span><br>  mainWindow.<span class="hljs-property">webContents</span>.<span class="hljs-title function_">openDevTools</span>()<br>&#125;<br><br>app.<span class="hljs-title function_">whenReady</span>().<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  ipcMain.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;counter-value&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">_event, value</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(value) <span class="hljs-comment">// will print value to Node console</span><br>  &#125;)<br>  <span class="hljs-title function_">createWindow</span>()<br>  <br>  app.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;activate&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title class_">BrowserWindow</span>.<span class="hljs-title function_">getAllWindows</span>().<span class="hljs-property">length</span> === <span class="hljs-number">0</span>) <span class="hljs-title function_">createWindow</span>()<br>  &#125;)<br>&#125;)<br><br>app.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;window-all-closed&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">if</span> (process.<span class="hljs-property">platform</span> !== <span class="hljs-string">&#x27;darwin&#x27;</span>) app.<span class="hljs-title function_">quit</span>()<br>&#125;)<br></code></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="进程通信3-2"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">const</span> &#123; contextBridge, ipcRenderer &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;electron&#x27;</span>)<br><br>contextBridge.<span class="hljs-title function_">exposeInMainWorld</span>(<span class="hljs-string">&#x27;electronAPI&#x27;</span>, &#123;<br>  <span class="hljs-attr">handleCounter</span>: <span class="hljs-function">(<span class="hljs-params">callback</span>) =&gt;</span> ipcRenderer.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;update-counter&#x27;</span>, callback)<br>&#125;)<br></code></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="进程通信3-3"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Security-Policy&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;default-src &#x27;self&#x27;; script-src &#x27;self&#x27;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Menu Counter<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    Current value: <span class="hljs-tag">&lt;<span class="hljs-name">strong</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;counter&quot;</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./renderer.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="进程通信3-4"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">const</span> counter = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;counter&#x27;</span>)<br><br><span class="hljs-variable language_">window</span>.<span class="hljs-property">electronAPI</span>.<span class="hljs-title function_">handleCounter</span>(<span class="hljs-function">(<span class="hljs-params">event, value</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> oldValue = <span class="hljs-title class_">Number</span>(counter.<span class="hljs-property">innerText</span>)<br>    <span class="hljs-keyword">const</span> newValue = oldValue + value<br>    counter.<span class="hljs-property">innerText</span> = newValue<br>    event.<span class="hljs-property">sender</span>.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;counter-value&#x27;</span>, newValue)<br>&#125;)<br></code></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="4-APP"><a href="#4-APP" class="headerlink" title="4.APP"></a>4.APP</h3><h4 id="4-1事件"><a href="#4-1事件" class="headerlink" title="4.1事件"></a>4.1事件</h4><p><strong>4.1.1 before-quit</strong></p><p>在应用程序开始关闭窗口之前触发.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">app.on(&#x27;before-quit&#x27;, (e) =&gt; &#123;<br>  console.log(&#x27;App is quiting&#x27;);<br>&#125;)<br></code></pre></td></tr></table></figure><p><strong>4.1.2browser-window-blur</strong></p><p>在browserWindow获得失去时触发</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">app.on(&quot;browser-window-blur&quot;, (e) =&gt; &#123;<br>  console.log(&#x27;App is bluring&#x27;);<br>&#125;)<br></code></pre></td></tr></table></figure><p>失焦后三秒关闭窗口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">app.on(&quot;browser-window-blur&quot;, (e) =&gt; &#123;<br>  console.log(&#x27;App is bluring&#x27;);<br>  setTimeout(() =&gt; &#123;<br>    app.quit()<br>  &#125;, 3000)<br>&#125;)<br></code></pre></td></tr></table></figure><p><strong>4.1.3browser-window-foucs</strong></p><p>在browserWindow获得获取时触发</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">app.on(&quot;browser-window-focus&quot;, (e) =&gt; &#123;<br>  console.log(&#x27;App is focusing&#x27;);<br>&#125;)<br></code></pre></td></tr></table></figure><p>4.1.4 获取路径信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">app.whenReady().then(() =&gt; &#123;<br>  console.log(app.getPath(&#x27;desktop&#x27;));<br>  console.log(app.getPath(&#x27;home&#x27;));<br>  console.log(app.getPath(&#x27;appData&#x27;));<br>  <br>  createWindow()<br>  <br>  app.on(&#x27;activate&#x27;, () =&gt; &#123;<br>    if (BrowserWindow.getAllWindows().length === 0) createWindow()<br>  &#125;)<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="4-2-BrowserWindow"><a href="#4-2-BrowserWindow" class="headerlink" title="4.2 BrowserWindow"></a><strong>4.2 BrowserWindow</strong></h4><p>electron.BrowserWindow:创建和控制浏览器窗口</p><h5 id="4-2-1实例方法"><a href="#4-2-1实例方法" class="headerlink" title="4.2.1实例方法"></a><strong>4.2.1实例方法</strong></h5><p>win.loadRul(url,[options])  和loadFile互斥</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">mainWindow.loadURL(&#x27;https://www.rhhz.top&#x27;)<br></code></pre></td></tr></table></figure><h5 id="4-2-2-优雅的显示窗口"><a href="#4-2-2-优雅的显示窗口" class="headerlink" title="4.2.2 优雅的显示窗口"></a><strong>4.2.2 优雅的显示窗口</strong></h5><ul><li>使用ready-to-show事件</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">let mainWindow = new BroserWindow(&#123;show:false&#125;)<br>mainWindow.once(&#x27;ready-to-show&#x27;,()=&gt;&#123;<br>mainWindow.show()<br>&#125;)<br></code></pre></td></tr></table></figure><h5 id="4-2-3父子窗口"><a href="#4-2-3父子窗口" class="headerlink" title="4.2.3父子窗口"></a><strong>4.2.3父子窗口</strong></h5><ul><li>窗口定义</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">const &#123; app, BrowserWindow, ipcMain, dialog, Menu &#125; = require(&#x27;electron&#x27;)<br>const path = require(&#x27;path&#x27;)<br>const createWindow = () =&gt; &#123;<br>  const win = new BrowserWindow(&#123;<br>    width: 1000,<br>    height: 800,<br>    webPreferences: &#123;<br>      preload: path.join(__dirname, &#x27;./renderer/preload.js&#x27;)<br>    &#125;<br>  &#125;)<br><br>  win.loadFile(&#x27;index.html&#x27;)<br>  win.webContents.openDevTools()<br><br><br>  const win2 = new BrowserWindow(&#123;<br>    width: 600,<br>    height: 600,<br>    // 移动父窗口，子窗口也跟着移动(Mack)<br>    parent: win,<br>    modal: true<br>  &#125;)<br>  win2.loadURL(&#x27;https://www.rhhz.top&#x27;)<br>&#125;<br><br></code></pre></td></tr></table></figure><h5 id="4-2-4-无边框拖拽窗口"><a href="#4-2-4-无边框拖拽窗口" class="headerlink" title="4.2.4 无边框拖拽窗口"></a><strong>4.2.4 无边框拖拽窗口</strong></h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">mainWindow = new BroswerWindow(&#123;<br>frame:false<br>&#125;)<br></code></pre></td></tr></table></figure><p>添加css，让页面可拖拽</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">body &#123;<br>  user-select: none;<br>  height: 100%;<br>  -webkit-app-region: drag<br>&#125;<br><br>html &#123;<br>  height: 100%;<br>&#125;<br></code></pre></td></tr></table></figure><p>no-drag 修复下面控件的bug</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&lt;input style=&quot;-webit-app-region: no-drag&quot; type=&quot;range&quot; min=&quot;0&quot; max=&quot;10&quot; /&gt;<br></code></pre></td></tr></table></figure><p>显示红绿灯</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">mainWindow = new BroswerWIndow(&#123;<br>titleBarStyle: &#x27;hidden&#x27; //or hiddenInset 距离红绿灯更近(Mack)<br>&#125;)<br></code></pre></td></tr></table></figure><h5 id="4-2-5-属性和方法"><a href="#4-2-5-属性和方法" class="headerlink" title="4.2.5 属性和方法"></a><strong>4.2.5 属性和方法</strong></h5><p><strong>4.2.5.1 minWidth&amp;&amp;minHeigh</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">mainWindow = new BroswerWindow(&#123;<br>minHeight:300<br>minWidth:300<br>&#125;)<br></code></pre></td></tr></table></figure><p><strong>4.2.5.2 窗口焦点事件</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">secWindow = new BroswerWindow(&#123;<br>width:400,height:300,<br>webPreferences: &#123;nodeIntergation:true&#125;<br>&#125;)<br><br>mainWindow.on(&#x27;focus&#x27;,()=&gt;&#123;<br>console.log(&#x27;mainWindow focus&#x27;)<br>&#125;)<br><br>secWindow.on(&#x27;focus&#x27;,()=&gt;&#123;<br>console.log(&#x27;secWindow focus&#x27;)<br>&#125;)<br><br>app.on(&#x27;broswer-window-fcus&#x27;,()=&gt;&#123;<br>console.log(&#x27;App focus&#x27;)<br>&#125;)<br></code></pre></td></tr></table></figure><p><strong>4.2.5.3 静态方法</strong></p><h5 id="4-2-6-state"><a href="#4-2-6-state" class="headerlink" title="4.2.6 state"></a><strong>4.2.6</strong> state</h5><p>electron-win-state 保存窗口状态</p><p>​    npm install electron-win-state(根据文档使用)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">const &#123; app, BrowserWindow, ipcMain, dialog, Menu &#125; = require(&#x27;electron&#x27;)<br>const path = require(&#x27;path&#x27;)<br>const WinState = require(&#x27;electron-win-state&#x27;).default<br><br>const createWindow = () =&gt; &#123;<br><br>  const winState = new WinState(&#123;<br>    defaultWidth: 1000,<br>    defaultHeight: 800<br>  &#125;)<br><br>  const win = new BrowserWindow(&#123;<br>    ...winState.winOptions,<br>    // width: 1000,<br>    // height: 800,<br>    webPreferences: &#123;<br>      preload: path.join(__dirname, &#x27;./renderer/preload.js&#x27;)<br>    &#125;<br>  &#125;)<br>  winState.manage(win)<br><br>  win.loadFile(&#x27;index.html&#x27;)<br>  win.webContents.openDevTools()<br>&#125;<br><br></code></pre></td></tr></table></figure><h5 id="4-2-7-webContents"><a href="#4-2-7-webContents" class="headerlink" title="4.2.7 webContents"></a><strong>4.2.7 webContents</strong></h5><p>webContents是EventEmiiter的实例，负责渲染和控制网页，是BroswerWindow对象的一个属性</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">let webContents = mainWindow.webContents<br>console.log(webContents)<br></code></pre></td></tr></table></figure><p><strong>4.2.7.1 方法getAllWebContents()</strong></p><ul><li>返回WebContents[] —-所有WEbCOntents实例的数组。包含所有Windows,webViews,opened devtools和devtools拓展背景的web内容</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> &#123;app,<span class="hljs-title class_">BrowserWindow</span>,webContents&#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;electron&#x27;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(webContents.<span class="hljs-title function_">getAllWebContents</span>())<br></code></pre></td></tr></table></figure><p><strong>4.2.7.2 实例事件</strong></p><ul><li><p>did-finish-load:加载完毕(实例：图片加载)</p></li><li><p>dom-ready:dom加载完毕</p></li><li><p>new-window:打开新窗口</p></li><li>context-menu:右键上下文信息</li></ul><h5 id="4-2-7-2-实例方法"><a href="#4-2-7-2-实例方法" class="headerlink" title="4.2.7.2 实例方法"></a>4.2.7.2 实例方法</h5><ul><li>executeJavaScript()：注入javaScript脚本</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">webContents.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;context-menu&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">e,params</span>)=&gt;</span>&#123;<br>    <span class="hljs-comment">// 弹出选中文本</span><br>wc.<span class="hljs-title function_">executeJavaScript</span>(<span class="hljs-string">`alert(`</span>$&#123;params.<span class="hljs-property">select</span>&#125;<span class="hljs-string">`)`</span>)<br>&#125;)<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Electorn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Electron </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单例模式</title>
      <link href="/archives/f1601c3e.html"/>
      <url>/archives/f1601c3e.html</url>
      
        <content type="html"><![CDATA[<h1 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>单例模式确保某个类只有<wavy>一个实例</wavy>，而且自行实例化并向整个系统提供这个实例，也可以理解成全局共享的一个实例。</p><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ol><li>单例类只有一个实例对象；</li><li>该单例对象必须由单例类自行创建；</li><li>单例类对外提供一个访问该单例的全局访问点；</li></ol><p class='p red h4'>使用场景</p><p>&emsp;&emsp;当我们在点击某个按钮弹出模态框的时候，这个模态框实例是唯一的，无论我们点击了多少次按钮，模态框都只会被创建一次。<br>&emsp;&emsp;类似的，在window中，我们只能够打开一个任务管理器，这样可以避免打开多个任务管理器窗口造成内存资源的浪费和各窗口之间的进程等数据不一致的问题。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>魔改日记</title>
      <link href="/archives/8ed12188.html"/>
      <url>/archives/8ed12188.html</url>
      
        <content type="html"><![CDATA[<div class="tip warning"><p><span class='p blue h4'>魔改前注意一下几点:</span></p><ol><li>此篇仅作本人魔改记录</li><li>博客魔改有风险，如果博客魔改出问题了又没有备份，可通过此项目查看基础源码进行回滚：ccknbc-actions/blog-butterfly。</li><li>鉴于每个人的根目录名称都不一样，本帖博客根目录一律以<code>[BlogRoot]</code>指代。</li><li>本帖涉及魔改源码的内容，会使用diff代码块标识，复制时请不要忘记删除前面的+、-符号。</li><li>因为.pug和.styl以及.yml等对缩进要求较为严格，请尽量不要使用记事本等无法提供语法高亮的文本编辑器进行修改。</li><li>本帖基于Butterfly主题进行魔改方案编写，因此请读者优先掌握Butterfly主题官方文档的内容后再来进行魔改。</li><li>魔改会过程常常引入自定义的css与js文件，方法见Hexo博客添加自定义css和js文件(太懒了不想自己写)</li></ol></div><h1 id="1-violet留言板（店长）"><a href="#1-violet留言板（店长）" class="headerlink" title="1.violet留言板（店长）"></a>1.violet留言板（店长）</h1><details class="folding-tag" ><summary> 点击查看教程 </summary>              <div class='content'>              <div class="hide-block"><button type="button" class="hide-button" style="background-color: blue;">点我预览    </button><div class="hide-content"><p>详见:<img src="https://www.rhhz.top/comments/" alt="留言板"><br><img src="https://s1.vika.cn/space/2022/10/29/bf7ee8c0c9ec41cb9bb0ed3d297d87b0" alt="image(1)" style="zoom:67%;" /></p></div></div><ol><li><p>在<code>[BlogRoot]</code>运行指令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs BASH">npm install hexo-butterfly-envelope --save<br></code></pre></td></tr></table></figure></li><li><p>在站点配置文件_config.yml或主题配置文件_config.butterfly.yml添加以下配置项</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs YML"><span class="hljs-comment"># envelope_comment</span><br><span class="hljs-comment"># see https://akilar.top/posts/e2d3c450/</span><br><span class="hljs-attr">envelope_comment:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span> <span class="hljs-comment">#控制开关</span><br>  <span class="hljs-attr">custom_pic:</span>      <br>    <span class="hljs-attr">cover:</span> <span class="hljs-string">https://npm.elemecdn.com/hexo-butterfly-envelope/lib/violet.jpg</span> <span class="hljs-comment">#信笺头部图片</span><br>    <span class="hljs-attr">line:</span> <span class="hljs-string">https://npm.elemecdn.com/hexo-butterfly-envelope/lib/line.png</span> <span class="hljs-comment">#信笺底部图片</span><br>    <span class="hljs-attr">beforeimg:</span> <span class="hljs-string">https://npm.elemecdn.com/hexo-butterfly-envelope/lib/before.png</span> <span class="hljs-comment"># 信封前半部分</span><br>    <span class="hljs-attr">afterimg:</span> <span class="hljs-string">https://npm.elemecdn.com/hexo-butterfly-envelope/lib/after.png</span> <span class="hljs-comment"># 信封后半部分</span><br>  <span class="hljs-attr">message:</span> <span class="hljs-comment">#信笺正文，多行文本，写法如下</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">有什么想问的？</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">有什么想说的？</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">有什么想吐槽的？</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">哪怕是有什么想吃的，都可以告诉我哦~</span><br>  <span class="hljs-attr">bottom:</span> <span class="hljs-string">自动书记人偶竭诚为您服务！</span> <span class="hljs-comment">#仅支持单行文本</span><br>  <span class="hljs-attr">height:</span> <span class="hljs-comment">#1050px，信封划出的高度</span><br>  <span class="hljs-attr">path:</span> <span class="hljs-comment">#【可选】comments 的路径名称。默认为 comments，生成的页面为 comments/index.html</span><br>  <span class="hljs-attr">front_matter:</span> <span class="hljs-comment">#【可选】comments页面的 front_matter 配置</span><br>    <span class="hljs-attr">title:</span> <span class="hljs-string">留言板</span><br>    <span class="hljs-attr">comments:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure></li></ol>              </div>            </details><h1 id="2-一图流教程"><a href="#2-一图流教程" class="headerlink" title="2.一图流教程"></a>2.一图流教程</h1><details class="folding-tag" ><summary> 点击查看教程 </summary>              <div class='content'>              <ol><li><p>在<code>[BlogRoot]\source</code>文件夹下新建一个文件夹css，该文件夹用于存放自定义的css样式，再新建一个名为<code>custom.css</code>，在里面写入以下代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-comment">/* 页脚与头图透明 */</span><br><span class="hljs-selector-id">#footer</span> &#123;<br>  <span class="hljs-attribute">background</span>: transparent <span class="hljs-meta">!important</span>;<br>&#125;<br><span class="hljs-selector-id">#page-header</span> &#123;<br>  <span class="hljs-attribute">background</span>: transparent <span class="hljs-meta">!important</span>;<br>&#125;<br><br><span class="hljs-comment">/* 白天模式遮罩透明 */</span><br><span class="hljs-selector-id">#footer</span><span class="hljs-selector-pseudo">::before</span> &#123;<br>  <span class="hljs-attribute">background</span>: transparent <span class="hljs-meta">!important</span>;<br>&#125;<br><span class="hljs-selector-id">#page-header</span><span class="hljs-selector-pseudo">::before</span> &#123;<br>  <span class="hljs-attribute">background</span>: transparent <span class="hljs-meta">!important</span>;<br>&#125;<br><br><span class="hljs-comment">/* 夜间模式遮罩透明 */</span><br><span class="hljs-selector-attr">[data-theme=<span class="hljs-string">&quot;dark&quot;</span>]</span> <span class="hljs-selector-id">#footer</span><span class="hljs-selector-pseudo">::before</span> &#123;<br>  <span class="hljs-attribute">background</span>: transparent <span class="hljs-meta">!important</span>;<br>&#125;<br><span class="hljs-selector-attr">[data-theme=<span class="hljs-string">&quot;dark&quot;</span>]</span> <span class="hljs-selector-id">#page-header</span><span class="hljs-selector-pseudo">::before</span> &#123;<br>  <span class="hljs-attribute">background</span>: transparent <span class="hljs-meta">!important</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>在主题配置文件<code>[BlogRoot]\_config.butterfly.yml</code>文件中的<code>inject</code>配置项的<code>head</code>子项加入以下代码，代表引入刚刚创建的<code>custom.css</code>文件（这是相对路径的写法）</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs YML"><span class="hljs-attr">inject:</span><br>  <span class="hljs-attr">head:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&lt;link</span> <span class="hljs-string">rel=&quot;stylesheet&quot;</span> <span class="hljs-string">href=&quot;/css/custom.css&quot;</span> <span class="hljs-string">media=&quot;defer&quot;</span> <span class="hljs-string">onload=&quot;this.media=&#x27;all&#x27;&quot;&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>在主题配置文件<code>[BlogRoot]\_config.butterfly.yml</code>文件中的<code>index_img</code>和<code>footer_bg</code>配置项取消头图与页脚图的加载项避免冗余加载</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs YML"><span class="hljs-comment"># The banner image of home page</span><br><span class="hljs-attr">index_img:</span> <br><br><span class="hljs-comment"># Footer Background</span><br><span class="hljs-attr">footer_bg:</span> <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure></li></ol>              </div>            </details><h1 id="3-页脚Github徽标（店长）"><a href="#3-页脚Github徽标（店长）" class="headerlink" title="3.页脚Github徽标（店长）"></a>3.页脚Github徽标（店长）</h1><details class="folding-tag" ><summary> 点击查看教程 </summary>              <div class='content'>              <p>详见:<a href="https://akilar.top/posts/e87ad7f8/">Add Github Badge</a></p><ol><li><p>安装插件,在博客根目录[Blogroot]下打开终端，运行以下指令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs BASH">npm install hexo-butterfly-footer-beautify --save<br></code></pre></td></tr></table></figure></li><li><p>添加配置信息，以下为写法示例<br>在站点配置文件<code>_config.yml</code>或者主题配置文件<code>_config.butterfly.yml</code>中添加（这是我的配置）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs JS"># 页脚计时器：[<span class="hljs-title class_">Native</span> <span class="hljs-variable constant_">JS</span> <span class="hljs-title class_">Timer</span>](<span class="hljs-attr">https</span>:<span class="hljs-comment">//akilar.top/posts/b941af/)</span><br># 页脚徽标：[<span class="hljs-title class_">Add</span> <span class="hljs-title class_">Github</span> <span class="hljs-title class_">Badge</span>](<span class="hljs-attr">https</span>:<span class="hljs-comment">//akilar.top/posts/e87ad7f8/)</span><br><span class="hljs-attr">footer_beautify</span>:<br>  <span class="hljs-attr">enable</span>:<br>    <span class="hljs-attr">timer</span>: <span class="hljs-literal">true</span> # 计时器开关<br>    <span class="hljs-attr">bdage</span>: <span class="hljs-literal">true</span> # 徽标开关<br>  <span class="hljs-attr">priority</span>: <span class="hljs-number">3</span> #过滤器优先权<br>  <span class="hljs-attr">enable_page</span>: all # 应用页面<br>  <span class="hljs-attr">exclude</span>: #屏蔽页面<br>    # - <span class="hljs-regexp">/posts/</span><br>    # - <span class="hljs-regexp">/about/</span><br>  <span class="hljs-attr">layout</span>: # 挂载容器类型<br>    <span class="hljs-attr">type</span>: id<br>    <span class="hljs-attr">name</span>: footer-wrap<br>    <span class="hljs-attr">index</span>: <span class="hljs-number">0</span><br>  # 计时器部分配置项（看你喜欢哪个，最好下载下来放到自己的项目中不然会增加我网站的负载）<br>  # 这是我的  <br>  <span class="hljs-attr">runtime_js</span>: <span class="hljs-attr">https</span>:<span class="hljs-comment">//cdn.jsdelivr.net/gh/Rhh-Z/Rhh-Z.github.io/js/runtime.js</span><br>  <span class="hljs-attr">runtime_css</span>: <span class="hljs-attr">https</span>:<span class="hljs-comment">//cdn.jsdelivr.net/gh/Rhh-Z/Rhh-Z.github.io/css/runtime.min.css </span><br>  # 这是店长的 <br>  # <span class="hljs-attr">runtime_js</span>: <span class="hljs-attr">https</span>:<span class="hljs-comment">//npm.elemecdn.com/hexo-butterfly-footer-beautify@1.0.0/lib/runtime.js</span><br>  # <span class="hljs-attr">runtime_css</span>: <span class="hljs-attr">https</span>:<span class="hljs-comment">//npm.elemecdn.com/hexo-butterfly-footer-beautify@1.0.0/lib/runtime.css</span><br>  # 徽标部分配置项<br>  <span class="hljs-attr">swiperpara</span>: <span class="hljs-number">3</span> #若非<span class="hljs-number">0</span>，则开启轮播功能，每行徽标个数<br>  <span class="hljs-attr">bdageitem</span>:<br>    - <span class="hljs-attr">link</span>: <span class="hljs-attr">https</span>:<span class="hljs-comment">//hexo.io/ #徽标指向网站链接</span><br>      <span class="hljs-attr">shields</span>: <span class="hljs-attr">https</span>:<span class="hljs-comment">//img.shields.io/badge/Frame-Hexo-blue?style=flat&amp;logo=hexo #徽标API</span><br>      <span class="hljs-attr">message</span>: 博客框架为<span class="hljs-title class_">Hexo</span>_v6<span class="hljs-number">.3</span><span class="hljs-number">.0</span> #徽标提示语<br>    - <span class="hljs-attr">link</span>: <span class="hljs-attr">https</span>:<span class="hljs-comment">//butterfly.js.org/</span><br>      <span class="hljs-attr">shields</span>: <span class="hljs-attr">https</span>:<span class="hljs-comment">//img.shields.io/badge/Theme-Butterfly-6513df?style=flat&amp;logo=bitdefender</span><br>      <span class="hljs-attr">message</span>: 主题版本<span class="hljs-title class_">Butterfly</span>_v4<span class="hljs-number">.5</span><span class="hljs-number">.1</span><br>    - <span class="hljs-attr">link</span>: <span class="hljs-attr">https</span>:<span class="hljs-comment">//vercel.com/</span><br>      <span class="hljs-attr">shields</span>: <span class="hljs-attr">https</span>:<span class="hljs-comment">//img.shields.io/badge/Hosted-Vercel-brightgreen?style=flat&amp;logo=Vercel</span><br>      <span class="hljs-attr">message</span>: 本站采用多线部署，主线路托管于<span class="hljs-title class_">Vercel</span><br>    - <span class="hljs-attr">link</span>: <span class="hljs-attr">https</span>:<span class="hljs-comment">//dashboard.4everland.org/</span><br>    # <span class="hljs-attr">https</span>:<span class="hljs-comment">//img.shields.io/badge/Hosted-4EVERLAND-3FE2C1?style=flat&amp;logo=IPFS</span><br>      <span class="hljs-attr">shields</span>: <span class="hljs-attr">https</span>:<span class="hljs-comment">//img.shields.io/badge/Rhh-TimeHome-blue</span><br>      <span class="hljs-attr">message</span>: <span class="hljs-title class_">Rhh</span>的时间小屋<br>    - <span class="hljs-attr">link</span>: <span class="hljs-attr">https</span>:<span class="hljs-comment">//github.com/</span><br>      <span class="hljs-attr">shields</span>: <span class="hljs-attr">https</span>:<span class="hljs-comment">//img.shields.io/badge/Source-Github-d021d6?style=flat&amp;logo=GitHub</span><br>      <span class="hljs-attr">message</span>: 本站项目由<span class="hljs-title class_">Github</span>托管<br>    - <span class="hljs-attr">link</span>: <span class="hljs-attr">http</span>:<span class="hljs-comment">//creativecommons.org/licenses/by-nc-sa/4.0/</span><br>      <span class="hljs-attr">shields</span>: <span class="hljs-attr">https</span>:<span class="hljs-comment">//img.shields.io/badge/Copyright-BY--NC--SA%204.0-d42328?style=flat&amp;logo=Claris</span><br>      <span class="hljs-attr">message</span>: 本站采用知识共享署名-非商业性使用-相同方式共享<span class="hljs-number">4.0</span>国际许可协议进行许可<br>  <span class="hljs-attr">swiper_css</span>: <span class="hljs-attr">https</span>:<span class="hljs-comment">//npm.elemecdn.com/hexo-butterfly-swiper/lib/swiper.min.css</span><br>  <span class="hljs-attr">swiper_js</span>: <span class="hljs-attr">https</span>:<span class="hljs-comment">//npm.elemecdn.com/hexo-butterfly-swiper/lib/swiper.min.js</span><br>  <span class="hljs-attr">swiperbdage_init_js</span>: <span class="hljs-attr">https</span>:<span class="hljs-comment">//npm.elemecdn.com/hexo-butterfly-footer-beautify/lib/swiperbdage_init.min.js</span><br></code></pre></td></tr></table></figure></li><li><p>参数释义</p></li></ol><div class="table-container"><table><thead><tr><th>参数</th><th>备选值/类型</th><th>释义</th></tr></thead><tbody><tr><td>priority</td><td>number</td><td>【可选】过滤器优先级，数值越小，执行越早，默认为10，选填</td></tr><tr><td>enable.timer</td><td>true/false</td><td>【必选】计时器控制开关</td></tr><tr><td>enable.bdage</td><td>true/false</td><td>【必选】徽标控制开关</td></tr><tr><td>enable_page</td><td>path</td><td>【可选】填写想要应用的页面,如根目录就填’/‘,分类页面就填’/categories/‘。若要应用于所有页面，就填all，默认为all</td></tr><tr><td>exclude</td><td>path</td><td>【可选】填写想要屏蔽的页面，可以多个。仅当enable_page为’all’时生效。写法见示例。原理是将屏蔽项的内容逐个放到当前路径去匹配，若当前路径包含任一屏蔽项，则不会挂载。</td></tr><tr><td>layout.type</td><td>id/class</td><td>【可选】挂载容器类型，填写id或class，不填则默认为id</td></tr><tr><td>layout.name</td><td>text</td><td>【必选】挂载容器名称</td></tr><tr><td>layout.index</td><td>0和正整数</td><td>【可选】前提是layout.type为class，因为同一页面可能有多个class，此项用来确认究竟排在第几个顺位</td></tr><tr><td>runtime_js</td><td>url</td><td>【必选】页脚计时器脚本，可以下载上文填写示例的链接，参照注释和教程：<a href="https://akilar.top/posts/b941af/">Native JS Timer</a>自行修改。</td></tr><tr><td>runtime_css</td><td>url</td><td>【可选】自定义样式，预留开发者接口，可自行下载</td></tr><tr><td>swiperpara</td><td>number</td><td>【可选】若非零，则开启轮播功能，此项表示每行最多容纳徽标个数，用来应对徽标过多显得页脚拥挤的问题</td></tr><tr><td>bdageitem.link</td><td>url</td><td>【可选】页脚徽标指向的网站链接</td></tr><tr><td>bdageitem.shields</td><td>url</td><td>【必选】页脚徽标对应的API，API具体写法示例参照教程<a href="https://akilar.top/posts/e87ad7f8/">Add Github Badge</a></td></tr><tr><td>bdageitem.message</td><td>text</td><td>【可选】页脚徽标悬停时显示的信息</td></tr><tr><td>swiper_css</td><td>url</td><td>【可选】swiper的依赖</td></tr><tr><td>swiper_js</td><td>url</td><td>【可选】swiper的依赖</td></tr><tr><td>swiperbdage_init_js</td><td>url</td><td>【可选】swiper初始化方法</td></tr></tbody></table></div>              </div>            </details><h1 id="4-首页分类磁贴新版-店长"><a href="#4-首页分类磁贴新版-店长" class="headerlink" title="4.首页分类磁贴新版(店长)"></a>4.首页分类磁贴新版(店长)</h1><details class="folding-tag" ><summary> 点击查看教程 </summary>              <div class='content'>              <p>详见：<a href="https://akilar.top/posts/a9131002/">Categories Magnet</a></p><ol><li><p>安装插件,在博客根目录<code>[Blogroot]</code>下打开终端，运行以下指令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs BASH">npm install hexo-butterfly-categories-card --save<br></code></pre></td></tr></table></figure></li><li><p>添加配置信息，以下为写法示例<br>在站点配置文件<code>_config.yml</code>或者主题配置文件<code>_config.butterfly.yml</code>中添加以下代码，注意要根据他的默认描述排序改为你自己对应的分类名字：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs YML"><span class="hljs-comment"># hexo-butterfly-categories-card</span><br><span class="hljs-comment"># see https://akilar.top/posts/a9131002/</span><br><span class="hljs-attr">categoryBar:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 开关</span><br>  <span class="hljs-attr">priority:</span> <span class="hljs-number">5</span> <span class="hljs-comment">#过滤器优先权</span><br>  <span class="hljs-attr">enable_page:</span> <span class="hljs-string">/</span> <span class="hljs-comment"># 应用页面</span><br>  <span class="hljs-attr">layout:</span> <span class="hljs-comment"># 挂载容器类型</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">id</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">recent-posts</span><br>    <span class="hljs-attr">index:</span> <span class="hljs-number">0</span><br>  <span class="hljs-attr">column:</span> <span class="hljs-string">odd</span> <span class="hljs-comment"># odd：3列 | even：4列</span><br>  <span class="hljs-attr">row:</span> <span class="hljs-number">1</span> <span class="hljs-comment">#显示行数，默认两行，超过行数切换为滚动显示</span><br>  <span class="hljs-attr">message:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">descr:</span> <span class="hljs-string">Ubuntu指南</span><br>      <span class="hljs-attr">cover:</span> <span class="hljs-string">https://assets.akilar.top/image/cover1.webp</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">descr:</span> <span class="hljs-string">玩转Win10</span><br>      <span class="hljs-attr">cover:</span> <span class="hljs-string">https://assets.akilar.top/image/cover2.webp</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">descr:</span> <span class="hljs-string">长篇小说连载</span><br>      <span class="hljs-attr">cover:</span> <span class="hljs-string">https://assets.akilar.top/image/cover3.webp</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">descr:</span> <span class="hljs-string">个人日记</span><br>      <span class="hljs-attr">cover:</span> <span class="hljs-string">https://assets.akilar.top/image/cover4.webp</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">descr:</span> <span class="hljs-string">诗词歌赋</span><br>      <span class="hljs-attr">cover:</span> <span class="hljs-string">https://assets.akilar.top/image/cover5.webp</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">descr:</span> <span class="hljs-string">杂谈教程</span><br>      <span class="hljs-attr">cover:</span> <span class="hljs-string">https://assets.akilar.top/image/cover6.webp</span><br>  <span class="hljs-attr">custom_css:</span> <span class="hljs-string">https://npm.elemecdn.com/hexo-butterfly-categories-card@1.0.0/lib/categorybar.css</span><br></code></pre></td></tr></table></figure></li><li><p>参数释义</p></li></ol><div class="table-container"><table><thead><tr><th>参数</th><th>备选值/类型</th><th>释义</th></tr></thead><tbody><tr><td>priority</td><td>number</td><td>【可选】过滤器优先级，数值越小，执行越早，默认为10，选填</td></tr><tr><td>enable</td><td>true/false</td><td>【必选】控制开关</td></tr><tr><td>enable_page</td><td>path/all</td><td>【可选】填写想要应用的页面的相对路径（即路由地址）,如根目录就填’/‘,分类页面就填’/categories/‘。若要应用于所有页面，就填’all’，默认为’/‘</td></tr><tr><td>layout.type</td><td>id/class</td><td>【可选】挂载容器类型，填写id或class，不填则默认为id</td></tr><tr><td>layout.name</td><td>text</td><td>【必选】挂载容器名称</td></tr><tr><td>layout.index</td><td>0和正整数</td><td>【可选】前提是layout.type为class，因为同一页面可能有多个class，此项用来确认究竟排在第几个顺位</td></tr><tr><td>column</td><td>odd/even</td><td>【可选】显示列数，考虑到比例问题，只提供3列和4列，odd为3列， even为4列</td></tr><tr><td>row</td><td>number</td><td>【可选】显示行数，默认两行，超过行数切换为滚动显示</td></tr><tr><td>message.descr</td><td>text</td><td>分类描述,需要和你自己的文章分类一一对应。</td></tr><tr><td>message.cover</td><td>url</td><td>分类背景,需要和你自己的文章分类一一对应</td></tr><tr><td>custom_css</td><td>url</td><td>【可选】自定义样式，会替换默认的css链接，可以下载文档给出的cdn链接后自主修改</td></tr></tbody></table></div>              </div>            </details><h1 id="5-文章置顶滚动栏-店长"><a href="#5-文章置顶滚动栏-店长" class="headerlink" title="5.文章置顶滚动栏(店长)"></a>5.文章置顶滚动栏(店长)</h1><details class="folding-tag" ><summary> 点击查看教程 </summary>              <div class='content'>              <p>详见：<a href="https://akilar.top/posts/8e1264d1/">Swiper Bar</a></p><ol><li>安装插件,在博客根目录<code>[Blogroot]</code>下打开终端，运行以下指令：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs BASH">npm install hexo-butterfly-swiper --save<br></code></pre></td></tr></table></figure></li><li>添加配置信息，以下为写法示例<br>在站点配置文件<code>_config.yml</code>或者主题配置文件<code>_config.butterfly.yml</code>中添加</li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs YML"><span class="hljs-comment"># hexo-butterfly-swiper</span><br><span class="hljs-comment"># see https://akilar.top/posts/8e1264d1/</span><br><span class="hljs-attr">swiper:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 开关</span><br>  <span class="hljs-attr">priority:</span> <span class="hljs-number">5</span> <span class="hljs-comment">#过滤器优先权</span><br>  <span class="hljs-attr">enable_page:</span> <span class="hljs-string">all</span> <span class="hljs-comment"># 应用页面</span><br>  <span class="hljs-attr">timemode:</span> <span class="hljs-string">date</span> <span class="hljs-comment">#date/updated</span><br>  <span class="hljs-attr">layout:</span> <span class="hljs-comment"># 挂载容器类型</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">id</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">recent-posts</span><br>    <span class="hljs-attr">index:</span> <span class="hljs-number">0</span><br>  <span class="hljs-attr">default_descr:</span> <span class="hljs-string">再怎么看我也不知道怎么描述它的啦！</span><br>  <span class="hljs-attr">swiper_css:</span> <span class="hljs-string">https://npm.elemecdn.com/hexo-butterfly-swiper/lib/swiper.min.css</span> <span class="hljs-comment">#swiper css依赖</span><br>  <span class="hljs-attr">swiper_js:</span> <span class="hljs-string">https://npm.elemecdn.com/hexo-butterfly-swiper/lib/swiper.min.js</span> <span class="hljs-comment">#swiper js依赖</span><br>  <span class="hljs-attr">custom_css:</span> <span class="hljs-string">https://npm.elemecdn.com/hexo-butterfly-swiper/lib/swiperstyle.css</span> <span class="hljs-comment"># 适配主题样式补丁</span><br>  <span class="hljs-attr">custom_js:</span> <span class="hljs-string">https://npm.elemecdn.com/hexo-butterfly-swiper/lib/swiper_init.js</span> <span class="hljs-comment"># swiper初始化方法</span><br></code></pre></td></tr></table></figure><ol><li>参数释义</li></ol><div class="table-container"><table><thead><tr><th>参数</th><th>备选值/类型</th><th>释义</th></tr></thead><tbody><tr><td>priority</td><td>number</td><td>【可选】过滤器优先级，数值越小，执行越早，默认为10，选填</td></tr><tr><td>enable</td><td>true/false</td><td>【必选】控制开关</td></tr><tr><td>enable_page</td><td>path/all</td><td>【可选】填写想要应用的页面的相对路径（即路由地址）,如根目录就填’/‘,分类页面就填’/categories/‘。若要应用于所有页面，就填’all’，默认为all</td></tr><tr><td>timemode</td><td>date/updated</td><td>【可选】时间显示，date为显示创建日期，updated为显示更新日期,默认为date</td></tr><tr><td>layout.type</td><td>id/class</td><td>【可选】挂载容器类型，填写id或class，不填则默认为id</td></tr><tr><td>layout.name</td><td>text</td><td>【必选】挂载容器名称</td></tr><tr><td>layout.index</td><td>0和正整数</td><td>【可选】前提是layout.type为class，因为同一页面可能有多个class，此项用来确认究竟排在第几个顺位</td></tr><tr><td>default_descr</td><td>text</td><td>默认文章描述</td></tr><tr><td>swiper_css</td><td>url</td><td>【可选】自定义的swiper依赖项css链接</td></tr><tr><td>swiper_js</td><td>url</td><td>【可选】自定义的swiper依赖项加js链接</td></tr><tr><td>custom_css</td><td>url</td><td>【可选】适配主题样式补丁</td></tr><tr><td>custom_js</td><td>url</td><td>【可选】swiper初始化方法</td></tr></tbody></table></div><div class="note info simple"><p>使用方法:在文章的front_matter中添加swiper_index配置项即可。</p></div>              </div>            </details><h1 id="6-自定义字体"><a href="#6-自定义字体" class="headerlink" title="6. 自定义字体"></a>6. 自定义字体</h1><details class="folding-tag" ><summary> 点击查看教程 </summary>              <div class='content'>              <div class="note warning flat"><p>声明：非商免字体未经授权仅限个人使用，不得用于商业用途！</p></div><ol><li><p>准备好字体文件后，在<code>[BlogRoot]\source\css\custom.css</code>（没有就自己创建）中添加以下代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-keyword">@font-face</span> &#123;<br>  <span class="hljs-comment">/* 为载入的字体取名字(随意) */</span><br>  <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&#x27;YSHST&#x27;</span>;<br>  <span class="hljs-comment">/* 字体文件地址(相对或者绝对路径都可以) */</span><br>  <span class="hljs-attribute">src</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">/font/优设好身体.woff2</span>);<br>  <span class="hljs-comment">/* 定义加粗样式(加粗多少) */</span><br>  <span class="hljs-attribute">font-weight</span>: normal;<br>  <span class="hljs-comment">/* 定义字体样式(斜体/非斜体) */</span><br>  <span class="hljs-attribute">font-style</span>: normal;<br>  <span class="hljs-comment">/* 定义显示样式 */</span><br>  <span class="hljs-attribute">font-display</span>: block;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>各个属性的定义：</p><ul><li><code>font-family</code>属性值中使用<code>webfont</code>来声明使用的是服务器端字体，即设置文本的字体名称。</li><li><code>src</code>属性值中首先指定了字体文件所在的路径。</li><li><code>format</code>声明字体文件的格式，可以省略文件格式的声明，单独使用src属性值。</li><li><code>font-style：</code>设置文本样式。取值：<code>normal:</code>不使用斜体；<code>italic:</code>使用斜体；<code>oblique:</code>使用倾斜体；<code>inherit:</code>从父元素继承。</li><li>支持格式：<code>*.eot(老版本IE)</code>，<code>*.otf</code>，<code>*.ttf</code>，<code>*.woff</code>，<code>*.woff2</code>(推荐)</li></ul></li><li><p>在主题配置文件<code>_config.butterfly.yml</code>中的font配置项以及<code>blog_title_font</code>配置项写上你刚刚引入的字体名称，系统会根据先后次序从前到后依次加载这些字体：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs YML"><span class="hljs-comment"># Global font settings</span><br><span class="hljs-comment"># Don&#x27;t modify the following settings unless you know how they work (非必要不要修改)</span><br><span class="hljs-attr">font:</span><br>  <span class="hljs-attr">global-font-size:</span> <span class="hljs-string">&#x27;15px&#x27;</span><br>  <span class="hljs-attr">code-font-size:</span> <span class="hljs-string">&#x27;14px&#x27;</span><br>  <span class="hljs-attr">font-family:</span> <span class="hljs-string">YSHST,</span> <span class="hljs-string">-apple-system,</span> <span class="hljs-string">&#x27;Quicksand&#x27;</span><span class="hljs-string">,</span> <span class="hljs-string">&#x27;Nimbus Roman No9 L&#x27;</span><span class="hljs-string">,</span> <span class="hljs-string">&#x27;PingFang SC&#x27;</span><span class="hljs-string">,</span> <span class="hljs-string">&#x27;Hiragino Sans GB&#x27;</span><span class="hljs-string">,</span> <span class="hljs-string">&#x27;Noto Serif SC&#x27;</span><span class="hljs-string">,</span> <span class="hljs-string">&#x27;Microsoft Yahei&#x27;</span><span class="hljs-string">,</span> <span class="hljs-string">&#x27;WenQuanYi Micro Hei&#x27;</span><span class="hljs-string">,</span> <span class="hljs-string">&#x27;ST Heiti&#x27;</span><span class="hljs-string">,</span> <span class="hljs-string">sans-serif;</span><br>  <span class="hljs-attr">code-font-family:</span> <span class="hljs-string">Consolas,</span> <span class="hljs-string">YSHST,</span> <span class="hljs-string">&quot;Microsoft YaHei&quot;</span><span class="hljs-string">,</span> <span class="hljs-string">Menlo,</span> <span class="hljs-string">&quot;PingFang SC&quot;</span><span class="hljs-string">,</span> <span class="hljs-string">&quot;Microsoft JhengHei&quot;</span><span class="hljs-string">,</span> <span class="hljs-string">sans-serif</span><br><br><span class="hljs-comment"># 左上角網站名字 主頁居中網站名字</span><br><span class="hljs-attr">blog_title_font:</span><br>  <span class="hljs-attr">font_link:</span> <br>  <span class="hljs-attr">font-family:</span> <span class="hljs-string">YSHST,</span> <span class="hljs-string">-apple-system,</span> <span class="hljs-string">BlinkMacSystemFont,</span> <span class="hljs-string">&quot;Segoe UI&quot;</span> <span class="hljs-string">,</span> <span class="hljs-string">&quot;Helvetica Neue&quot;</span> <span class="hljs-string">,</span> <span class="hljs-string">Lato,</span> <span class="hljs-string">Roboto,</span> <span class="hljs-string">&quot;PingFang SC&quot;</span> <span class="hljs-string">,</span> <span class="hljs-string">&quot;Microsoft JhengHei&quot;</span> <span class="hljs-string">,</span> <span class="hljs-string">&quot;Microsoft YaHei&quot;</span> <span class="hljs-string">,</span> <span class="hljs-string">sans-serif</span><br></code></pre></td></tr></table></figure></li><li><p>重启项目即可看到</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs BASH">hexo cl; hexo s<br></code></pre></td></tr></table></figure></li></ol>              </div>            </details><h1 id="7-文章双侧栏显示-小冰"><a href="#7-文章双侧栏显示-小冰" class="headerlink" title="7.文章双侧栏显示(小冰)"></a>7.文章双侧栏显示(小冰)</h1><details class="folding-tag" ><summary> 点击查看教程 </summary>              <div class='content'>              <p>详见： <a href="https://zfe.space/post/hexo-butterfly-article-double-row.html">教程：butterfly 主题文章双栏布局插件</a></p><ol><li><p>在博客根目录<code>[Blogroot]</code>下打开终端，运行以下指令：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JS">npm i hexo-butterfly-article-double-row --save<br></code></pre></td></tr></table></figure></li><li><p>在网站配置文件<code>_config.yml</code>新增以下项 (注意不是主题配置文件)：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-attr">butterfly_article_double_row</span>:<br>  <span class="hljs-attr">enable</span>: <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure></li><li><p>这时候插件有个<code>bug</code>，就是最后一页文章数目为奇数的时候，会出现这种情况<br>会显得很不舒服，感谢唐志远大佬修复了这个bug，只需要在<code>custom.css</code>文件添加以下代码即可：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-comment">/* 翻页按钮居中 */</span><br><span class="hljs-selector-id">#pagination</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">margin</span>: auto;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>执行 hexo 三连：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs BASH">hexo clean<br>hexo g<br>hexo s<br></code></pre></td></tr></table></figure></li></ol>              </div>            </details><h1 id="8-wowjs动画"><a href="#8-wowjs动画" class="headerlink" title="8.wowjs动画"></a>8.wowjs动画</h1><details class="folding-tag" ><summary> 点击查看教程 </summary>              <div class='content'>              <p>详见：<a href="https://akilar.top/posts/abab51cf/">Add Blog Animation – Wowjs</a></p><ol><li><p>安装插件,在博客根目录[Blogroot]下打开终端，运行以下指令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs BASH">npm install hexo-butterfly-wowjs --save<br></code></pre></td></tr></table></figure></li><li><p>添加配置信息，以下为写法示例<br>在站点配置文件_config.yml或者主题配置文件_config.butterfly.yml中添加</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs YML"><span class="hljs-attr">wowjs:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span> <span class="hljs-comment">#控制动画开关。true是打开，false是关闭</span><br>  <span class="hljs-attr">priority:</span> <span class="hljs-number">10</span> <span class="hljs-comment">#过滤器优先级</span><br>  <span class="hljs-attr">mobile:</span> <span class="hljs-literal">false</span> <span class="hljs-comment">#移动端是否启用，默认移动端禁用</span><br>  <span class="hljs-attr">animateitem:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">class:</span> <span class="hljs-string">recent-post-item</span> <span class="hljs-comment">#必填项，需要添加动画的元素的class</span><br>      <span class="hljs-attr">style:</span> <span class="hljs-string">animate__zoomIn</span> <span class="hljs-comment">#必填项，需要添加的动画</span><br>      <span class="hljs-attr">duration:</span> <span class="hljs-string">2s</span> <span class="hljs-comment">#选填项，动画持续时间，单位可以是ms也可以是s。例如3s，700ms。</span><br>      <span class="hljs-attr">delay:</span> <span class="hljs-string">1s</span> <span class="hljs-comment">#选填项，动画开始的延迟时间，单位可以是ms也可以是s。例如3s，700ms。</span><br>      <span class="hljs-attr">offset:</span> <span class="hljs-number">100</span> <span class="hljs-comment">#选填项，开始动画的距离（相对浏览器底部）</span><br>      <span class="hljs-attr">iteration:</span> <span class="hljs-number">2</span> <span class="hljs-comment">#选填项，动画重复的次数</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">class:</span> <span class="hljs-string">card-widget</span><br>      <span class="hljs-attr">style:</span> <span class="hljs-string">animate__zoomIn</span><br>  <span class="hljs-attr">animate_css:</span> <span class="hljs-string">https://npm.elemecdn.com/hexo-butterfly-wowjs/lib/animate.min.css</span><br>  <span class="hljs-attr">wow_js:</span> <span class="hljs-string">https://npm.elemecdn.com/hexo-butterfly-wowjs/lib/wow.min.js</span><br>  <span class="hljs-attr">wow_init_js:</span> <span class="hljs-string">https://npm.elemecdn.com/hexo-butterfly-wowjs/lib/wow_init.js</span><br></code></pre></td></tr></table></figure></li><li><p>参数释义</p></li></ol><div class="table-container"><table><thead><tr><th>参数</th><th>备选值/类型</th><th>释义</th></tr></thead><tbody><tr><td>enable</td><td>true/false</td><td>【必选】控制开关</td></tr><tr><td>priority</td><td>number</td><td>【可选】过滤器优先级，数值越小，执行越早，默认为10，选填</td></tr><tr><td>mobile</td><td>true/false</td><td>控制移动端是否启用，默认移动端禁用</td></tr><tr><td>animateitem.class</td><td>class</td><td>【可选】添加动画类名，只支持给class添加</td></tr><tr><td>animateitem.style</td><td>text</td><td>【可选】动画样式，具体类型参考<a href="https://animate.style/">animate.css</a></td></tr><tr><td>animateitem.duration</td><td>time,单位为s或ms</td><td>【可选】动画持续时间，单位可以是ms也可以是s。例如3s，700ms。</td></tr><tr><td>animateitem.delay</td><td>time,单位为s或ms</td><td>【可选】动画开始的延迟时间，单位可以是ms也可以是s。例如3s，700ms。</td></tr><tr><td>animateitem.offset</td><td>number,单位为px</td><td>【可选】开始动画的距离（相对浏览器底部）</td></tr><tr><td>animateitem.iteration</td><td>number,单位为s或ms</td><td>【可选】动画重复的次数</td></tr><tr><td>animate_css</td><td>URL</td><td>【可选】animate.css的CDN链接,默认为<code>https://npm.elemecdn.com/hexo-butterfly-wowjs/lib/animate.min.css</code></td></tr><tr><td>wow_js</td><td>URL</td><td>【可选】wow.min.js的CDN链接,默认为<code>https://npm.elemecdn.com/hexo-butterfly-wowjs/lib/wow.min.js</code></td></tr><tr><td>wow_init_js</td><td>URL</td><td>【可选】wow_init.js的CDN链接,默认为<code>https://npm.elemecdn.com/hexo-butterfly-wowjs/lib/wow_init.js</code></td></tr></tbody></table></div>              </div>            </details><h1 id="9-导航栏魔改"><a href="#9-导航栏魔改" class="headerlink" title="9.导航栏魔改"></a>9.导航栏魔改</h1><details class="folding-tag" ><summary> 点击查看教程 </summary>              <div class='content'>              <ol><li>在<code>[BlogRoot]\source\css\custom.css</code>中引入如下<code>css</code>代码，然后在主题配置文件<code>_config.butterfly.yml</code>中引入该文件：<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-comment">/* 一级菜单居中 */</span><br><span class="hljs-selector-id">#nav</span> <span class="hljs-selector-class">.menus_items</span> &#123;<br>  <span class="hljs-attribute">position</span>: absolute <span class="hljs-meta">!important</span>;<br>  <span class="hljs-attribute">width</span>: fit-content <span class="hljs-meta">!important</span>;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-number">50%</span> <span class="hljs-meta">!important</span>;<br>  <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateX</span>(-<span class="hljs-number">50%</span>) <span class="hljs-meta">!important</span>;<br>&#125;<br><span class="hljs-comment">/* 子菜单横向展示 */</span><br><span class="hljs-selector-id">#nav</span> <span class="hljs-selector-class">.menus_items</span> <span class="hljs-selector-class">.menus_item</span><span class="hljs-selector-pseudo">:hover</span> <span class="hljs-selector-class">.menus_item_child</span> &#123;<br>  <span class="hljs-attribute">display</span>: flex <span class="hljs-meta">!important</span>;<br>&#125;<br><span class="hljs-comment">/* 这里的2是代表导航栏的第2个元素，即有子菜单的元素，可以按自己需求修改 */</span><br><span class="hljs-selector-class">.menus_items</span> <span class="hljs-selector-class">.menus_item</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">2</span>) <span class="hljs-selector-class">.menus_item_child</span> &#123;<br>  <span class="hljs-attribute">left</span>: -<span class="hljs-number">125px</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><div class="note info simple"><p>此处的css实现了两个作用：菜单栏居中、子菜单横向显示。其中子菜单横向显示要根据自己的实际情况来改，例如你的以及菜单的第2个选项中有子菜单，那就要加一项调节第2个选项中的子菜单，这个具体调节多少要根据你的具体情况为准，可以自己慢慢调到中间。</p></div><ol><li>此时我们只需要在主题配置文件<code>_config.butterfly.yml</code>中列表对应的地方加一个<code>hide</code>即可，如下图的列表选项：<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs YML"><span class="hljs-attr">menu:</span><br>  <span class="hljs-string">首页:</span> <span class="hljs-string">/</span> <span class="hljs-string">||</span> <span class="hljs-string">fas</span> <span class="hljs-string">fa-home</span><br>  <span class="hljs-string">归档:</span> <span class="hljs-string">/archives/</span> <span class="hljs-string">||</span> <span class="hljs-string">fas</span> <span class="hljs-string">fa-archive</span><br>  <span class="hljs-string">标签:</span> <span class="hljs-string">/tags/</span> <span class="hljs-string">||</span> <span class="hljs-string">fas</span> <span class="hljs-string">fa-tags</span><br>  <span class="hljs-string">分类:</span> <span class="hljs-string">/categories/</span> <span class="hljs-string">||</span> <span class="hljs-string">fas</span> <span class="hljs-string">fa-folder-open</span><br>  <span class="hljs-string">列表||fas</span> <span class="hljs-string">fa-list</span> <span class="hljs-string">||</span> <span class="hljs-attr">hide:</span><br>    <span class="hljs-string">音乐:</span> <span class="hljs-string">/music/</span> <span class="hljs-string">||</span> <span class="hljs-string">fas</span> <span class="hljs-string">fa-music</span><br>    <span class="hljs-string">电影:</span> <span class="hljs-string">/movies/</span> <span class="hljs-string">||</span> <span class="hljs-string">fas</span> <span class="hljs-string">fa-video</span><br>  <span class="hljs-string">留言板:</span> <span class="hljs-string">/comments/</span> <span class="hljs-string">||</span> <span class="hljs-string">fas</span> <span class="hljs-string">fa-envelope-open</span><br>  <span class="hljs-string">友链:</span> <span class="hljs-string">/link/</span> <span class="hljs-string">||</span> <span class="hljs-string">fas</span> <span class="hljs-string">fa-link</span><br>  <span class="hljs-string">关于:</span> <span class="hljs-string">/about/</span> <span class="hljs-string">||</span> <span class="hljs-string">fas</span> <span class="hljs-string">fa-heart</span><br></code></pre></td></tr></table></figure></li></ol><p>此时有人觉得右边搜索按钮露出搜索两个字很丑，我们也可以把它隐藏了，在<code>[BlogRoot]\themes\Butterfly\layout\includes\header\nav.pug</code>（npm安装的在<code>[BlogRoot]\node_moudules\hexo-theme-butterfly\layout\includes\header\nav.pug</code>）中把以下语句删除或注释掉即可，搜索两个字就不会显示出来(这种语句统一写法是直接删除+就可以，不用补空格)<br><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs DIFF">nav#nav<br>  span#blog_name<br>    a#site-name(href=url_for(&#x27;/&#x27;)) #[=config.title]<br>    <br>  #menus<br>    if (theme.algolia_search.enable || theme.local_search.enable)<br>      #search-button<br>        a.site-page.social-icon.search<br>          i.fas.fa-search.fa-fw<br><span class="hljs-deletion">-          span=&#x27; &#x27;+_p(&#x27;search.title&#x27;)</span><br>    !=partial(&#x27;includes/header/menu_item&#x27;, &#123;&#125;, &#123;cache: true&#125;)<br><br>    #toggle-menu<br>      a.site-page<br>        i.fas.fa-bars.fa-fw<br></code></pre></td></tr></table></figure></p>              </div>            </details><h1 id="10-心空背景和流星特效"><a href="#10-心空背景和流星特效" class="headerlink" title="10.心空背景和流星特效"></a>10.心空背景和流星特效</h1><details class="folding-tag" ><summary> 点击查看教程 </summary>              <div class='content'>              <ol><li><p>在<code>[BlogRoot]/source/js</code>目录下新建<code>universe.js</code>，输入以下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">function</span> <span class="hljs-title function_">dark</span>(<span class="hljs-params"></span>) &#123;<span class="hljs-variable language_">window</span>.<span class="hljs-property">requestAnimationFrame</span>=<span class="hljs-variable language_">window</span>.<span class="hljs-property">requestAnimationFrame</span>||<span class="hljs-variable language_">window</span>.<span class="hljs-property">mozRequestAnimationFrame</span>||<span class="hljs-variable language_">window</span>.<span class="hljs-property">webkitRequestAnimationFrame</span>||<span class="hljs-variable language_">window</span>.<span class="hljs-property">msRequestAnimationFrame</span>;<span class="hljs-keyword">var</span> n,e,i,h,t=<span class="hljs-number">.05</span>,s=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;universe&quot;</span>),o=!<span class="hljs-number">0</span>,a=<span class="hljs-string">&quot;180,184,240&quot;</span>,r=<span class="hljs-string">&quot;226,225,142&quot;</span>,d=<span class="hljs-string">&quot;226,225,224&quot;</span>,c=[];<span class="hljs-keyword">function</span> <span class="hljs-title function_">f</span>(<span class="hljs-params"></span>)&#123;n=<span class="hljs-variable language_">window</span>.<span class="hljs-property">innerWidth</span>,e=<span class="hljs-variable language_">window</span>.<span class="hljs-property">innerHeight</span>,i=<span class="hljs-number">.216</span>*n,s.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&quot;width&quot;</span>,n),s.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&quot;height&quot;</span>,e)&#125;<span class="hljs-keyword">function</span> <span class="hljs-title function_">u</span>(<span class="hljs-params"></span>)&#123;h.<span class="hljs-title function_">clearRect</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,n,e);<span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> t=c.<span class="hljs-property">length</span>,i=<span class="hljs-number">0</span>;i&lt;t;i++)&#123;<span class="hljs-keyword">var</span> s=c[i];s.<span class="hljs-title function_">move</span>(),s.<span class="hljs-title function_">fadeIn</span>(),s.<span class="hljs-title function_">fadeOut</span>(),s.<span class="hljs-title function_">draw</span>()&#125;&#125;<span class="hljs-keyword">function</span> <span class="hljs-title function_">y</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-variable language_">this</span>.<span class="hljs-property">reset</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-variable language_">this</span>.<span class="hljs-property">giant</span>=<span class="hljs-title function_">m</span>(<span class="hljs-number">3</span>),<span class="hljs-variable language_">this</span>.<span class="hljs-property">comet</span>=!<span class="hljs-variable language_">this</span>.<span class="hljs-property">giant</span>&amp;&amp;!o&amp;&amp;<span class="hljs-title function_">m</span>(<span class="hljs-number">10</span>),<span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span>=<span class="hljs-title function_">l</span>(<span class="hljs-number">0</span>,n-<span class="hljs-number">10</span>),<span class="hljs-variable language_">this</span>.<span class="hljs-property">y</span>=<span class="hljs-title function_">l</span>(<span class="hljs-number">0</span>,e),<span class="hljs-variable language_">this</span>.<span class="hljs-property">r</span>=<span class="hljs-title function_">l</span>(<span class="hljs-number">1.1</span>,<span class="hljs-number">2.6</span>),<span class="hljs-variable language_">this</span>.<span class="hljs-property">dx</span>=<span class="hljs-title function_">l</span>(t,<span class="hljs-number">6</span>*t)+(<span class="hljs-variable language_">this</span>.<span class="hljs-property">comet</span>+<span class="hljs-number">1</span>-<span class="hljs-number">1</span>)*t*<span class="hljs-title function_">l</span>(<span class="hljs-number">50</span>,<span class="hljs-number">120</span>)+<span class="hljs-number">2</span>*t,<span class="hljs-variable language_">this</span>.<span class="hljs-property">dy</span>=-<span class="hljs-title function_">l</span>(t,<span class="hljs-number">6</span>*t)-(<span class="hljs-variable language_">this</span>.<span class="hljs-property">comet</span>+<span class="hljs-number">1</span>-<span class="hljs-number">1</span>)*t*<span class="hljs-title function_">l</span>(<span class="hljs-number">50</span>,<span class="hljs-number">120</span>),<span class="hljs-variable language_">this</span>.<span class="hljs-property">fadingOut</span>=<span class="hljs-literal">null</span>,<span class="hljs-variable language_">this</span>.<span class="hljs-property">fadingIn</span>=!<span class="hljs-number">0</span>,<span class="hljs-variable language_">this</span>.<span class="hljs-property">opacity</span>=<span class="hljs-number">0</span>,<span class="hljs-variable language_">this</span>.<span class="hljs-property">opacityTresh</span>=<span class="hljs-title function_">l</span>(<span class="hljs-number">.2</span>,<span class="hljs-number">1</span>-<span class="hljs-number">.4</span>*(<span class="hljs-variable language_">this</span>.<span class="hljs-property">comet</span>+<span class="hljs-number">1</span>-<span class="hljs-number">1</span>)),<span class="hljs-variable language_">this</span>.<span class="hljs-property">do</span>=<span class="hljs-title function_">l</span>(<span class="hljs-number">5e-4</span>,<span class="hljs-number">.002</span>)+<span class="hljs-number">.001</span>*(<span class="hljs-variable language_">this</span>.<span class="hljs-property">comet</span>+<span class="hljs-number">1</span>-<span class="hljs-number">1</span>)&#125;,<span class="hljs-variable language_">this</span>.<span class="hljs-property">fadeIn</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-variable language_">this</span>.<span class="hljs-property">fadingIn</span>&amp;&amp;(<span class="hljs-variable language_">this</span>.<span class="hljs-property">fadingIn</span>=!(<span class="hljs-variable language_">this</span>.<span class="hljs-property">opacity</span>&gt;<span class="hljs-variable language_">this</span>.<span class="hljs-property">opacityTresh</span>),<span class="hljs-variable language_">this</span>.<span class="hljs-property">opacity</span>+=<span class="hljs-variable language_">this</span>.<span class="hljs-property">do</span>)&#125;,<span class="hljs-variable language_">this</span>.<span class="hljs-property">fadeOut</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-variable language_">this</span>.<span class="hljs-property">fadingOut</span>&amp;&amp;(<span class="hljs-variable language_">this</span>.<span class="hljs-property">fadingOut</span>=!(<span class="hljs-variable language_">this</span>.<span class="hljs-property">opacity</span>&lt;<span class="hljs-number">0</span>),<span class="hljs-variable language_">this</span>.<span class="hljs-property">opacity</span>-=<span class="hljs-variable language_">this</span>.<span class="hljs-property">do</span>/<span class="hljs-number">2</span>,(<span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span>&gt;n||<span class="hljs-variable language_">this</span>.<span class="hljs-property">y</span>&lt;<span class="hljs-number">0</span>)&amp;&amp;(<span class="hljs-variable language_">this</span>.<span class="hljs-property">fadingOut</span>=!<span class="hljs-number">1</span>,<span class="hljs-variable language_">this</span>.<span class="hljs-title function_">reset</span>()))&#125;,<span class="hljs-variable language_">this</span>.<span class="hljs-property">draw</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-keyword">if</span>(h.<span class="hljs-title function_">beginPath</span>(),<span class="hljs-variable language_">this</span>.<span class="hljs-property">giant</span>)h.<span class="hljs-property">fillStyle</span>=<span class="hljs-string">&quot;rgba(&quot;</span>+a+<span class="hljs-string">&quot;,&quot;</span>+<span class="hljs-variable language_">this</span>.<span class="hljs-property">opacity</span>+<span class="hljs-string">&quot;)&quot;</span>,h.<span class="hljs-title function_">arc</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span>,<span class="hljs-variable language_">this</span>.<span class="hljs-property">y</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>*<span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span>,!<span class="hljs-number">1</span>);<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">comet</span>)&#123;h.<span class="hljs-property">fillStyle</span>=<span class="hljs-string">&quot;rgba(&quot;</span>+d+<span class="hljs-string">&quot;,&quot;</span>+<span class="hljs-variable language_">this</span>.<span class="hljs-property">opacity</span>+<span class="hljs-string">&quot;)&quot;</span>,h.<span class="hljs-title function_">arc</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span>,<span class="hljs-variable language_">this</span>.<span class="hljs-property">y</span>,<span class="hljs-number">1.5</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>*<span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span>,!<span class="hljs-number">1</span>);<span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> t=<span class="hljs-number">0</span>;t&lt;<span class="hljs-number">30</span>;t++)h.<span class="hljs-property">fillStyle</span>=<span class="hljs-string">&quot;rgba(&quot;</span>+d+<span class="hljs-string">&quot;,&quot;</span>+(<span class="hljs-variable language_">this</span>.<span class="hljs-property">opacity</span>-<span class="hljs-variable language_">this</span>.<span class="hljs-property">opacity</span>/<span class="hljs-number">20</span>*t)+<span class="hljs-string">&quot;)&quot;</span>,h.<span class="hljs-title function_">rect</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span>-<span class="hljs-variable language_">this</span>.<span class="hljs-property">dx</span>/<span class="hljs-number">4</span>*t,<span class="hljs-variable language_">this</span>.<span class="hljs-property">y</span>-<span class="hljs-variable language_">this</span>.<span class="hljs-property">dy</span>/<span class="hljs-number">4</span>*t-<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>),h.<span class="hljs-title function_">fill</span>()&#125;<span class="hljs-keyword">else</span> h.<span class="hljs-property">fillStyle</span>=<span class="hljs-string">&quot;rgba(&quot;</span>+r+<span class="hljs-string">&quot;,&quot;</span>+<span class="hljs-variable language_">this</span>.<span class="hljs-property">opacity</span>+<span class="hljs-string">&quot;)&quot;</span>,h.<span class="hljs-title function_">rect</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span>,<span class="hljs-variable language_">this</span>.<span class="hljs-property">y</span>,<span class="hljs-variable language_">this</span>.<span class="hljs-property">r</span>,<span class="hljs-variable language_">this</span>.<span class="hljs-property">r</span>);h.<span class="hljs-title function_">closePath</span>(),h.<span class="hljs-title function_">fill</span>()&#125;,<span class="hljs-variable language_">this</span>.<span class="hljs-property">move</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span>+=<span class="hljs-variable language_">this</span>.<span class="hljs-property">dx</span>,<span class="hljs-variable language_">this</span>.<span class="hljs-property">y</span>+=<span class="hljs-variable language_">this</span>.<span class="hljs-property">dy</span>,!<span class="hljs-number">1</span>===<span class="hljs-variable language_">this</span>.<span class="hljs-property">fadingOut</span>&amp;&amp;<span class="hljs-variable language_">this</span>.<span class="hljs-title function_">reset</span>(),(<span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span>&gt;n-n/<span class="hljs-number">4</span>||<span class="hljs-variable language_">this</span>.<span class="hljs-property">y</span>&lt;<span class="hljs-number">0</span>)&amp;&amp;(<span class="hljs-variable language_">this</span>.<span class="hljs-property">fadingOut</span>=!<span class="hljs-number">0</span>)&#125;,<span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;o=!<span class="hljs-number">1</span>&#125;,<span class="hljs-number">50</span>)&#125;<span class="hljs-keyword">function</span> <span class="hljs-title function_">m</span>(<span class="hljs-params">t</span>)&#123;<span class="hljs-keyword">return</span> <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-number">1e3</span>*<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>())+<span class="hljs-number">1</span>&lt;<span class="hljs-number">10</span>*t&#125;<span class="hljs-keyword">function</span> <span class="hljs-title function_">l</span>(<span class="hljs-params">t,i</span>)&#123;<span class="hljs-keyword">return</span> <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>()*(i-t)+t&#125;<span class="hljs-title function_">f</span>(),<span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;resize&quot;</span>,f,!<span class="hljs-number">1</span>),<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;h=s.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">&quot;2d&quot;</span>);<span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> t=<span class="hljs-number">0</span>;t&lt;i;t++)c[t]=<span class="hljs-keyword">new</span> y,c[t].<span class="hljs-title function_">reset</span>();<span class="hljs-title function_">u</span>()&#125;(),<span class="hljs-keyword">function</span> <span class="hljs-title function_">t</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&#x27;html&#x27;</span>)[<span class="hljs-number">0</span>].<span class="hljs-title function_">getAttribute</span>(<span class="hljs-string">&#x27;data-theme&#x27;</span>)==<span class="hljs-string">&#x27;dark&#x27;</span>&amp;&amp;<span class="hljs-title function_">u</span>(),<span class="hljs-variable language_">window</span>.<span class="hljs-title function_">requestAnimationFrame</span>(t)&#125;()&#125;;<br><span class="hljs-title function_">dark</span>()<br></code></pre></td></tr></table></figure></li><li><p>在<code>[BlogRoot]/source/css</code>目录下新建<code>universe.css</code>，输入以下代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-comment">/* 背景宇宙星光  */</span><br><span class="hljs-selector-id">#universe</span>&#123;<br>  <span class="hljs-attribute">display</span>: block;<br>  <span class="hljs-attribute">position</span>: fixed;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">outline</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">pointer-events</span>: none;<br>  <span class="hljs-comment">/* 这个是调置顶的优先级的，-1在文章页下面，背景上面，个人推荐这种 */</span><br>  <span class="hljs-attribute">z-index</span>: -<span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>在主题配置文件<code>_config.butterfly.yml</code>的<code>inject</code>配置项中<code>bottom</code>下填入：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs YML"><span class="hljs-attr">inject:</span><br>  <span class="hljs-attr">bottom:</span><br>   <span class="hljs-bullet">-</span> <span class="hljs-string">&lt;canvas</span> <span class="hljs-string">id=&quot;universe&quot;&gt;&lt;/canvas&gt;</span><br>   <span class="hljs-bullet">-</span> <span class="hljs-string">&lt;script</span> <span class="hljs-string">defer</span> <span class="hljs-string">src=&quot;/js/universe.js&quot;&gt;&lt;/script&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>在主题配置文件<code>_config.butterfly.yml</code>的<code>inject</code>配置项中<code>head</code>下填入：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs YML"><span class="hljs-attr">inject:</span><br>  <span class="hljs-attr">head:</span><br>   <span class="hljs-bullet">-</span> <span class="hljs-string">&lt;link</span> <span class="hljs-string">rel=&quot;stylesheet&quot;</span> <span class="hljs-string">href=&quot;/css/universe.css&quot;&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>重新编译即可看到效果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs BASH">hexo cl;hexo g;hexo s<br></code></pre></td></tr></table></figure><p>详见：<a href="https://anzhiy.cn/posts/fc18.html">给butterfly添加侧边栏电子钟</a></p></li><li><p>如果有安装店长的插件版侧边栏电子钟（与店长的电子钟冲突），在博客根目录<code>[Blogroot]</code>下打开终端，运行以下指令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs BASH"><span class="hljs-comment"># 卸载原版电子钟</span><br>npm uninstall hexo-butterfly-clock<br></code></pre></td></tr></table></figure></li><li><p>安装插件,在博客根目录<code>[Blogroot]</code>下打开终端，运行以下指令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs BASH">npm install hexo-butterfly-clock-anzhiyu --save<br></code></pre></td></tr></table></figure></li><li><p>添加配置信息，以下为写法示例在主题配置文件<code>_config.butterfly.yml</code>（注意一定要主题配置文件）中添加：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs YML"><span class="hljs-comment"># electric_clock (安知鱼电子钟)</span><br><span class="hljs-comment"># see https://anzhiy.cn/posts/fc18.html</span><br><span class="hljs-attr">electric_clock:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 开关</span><br>  <span class="hljs-attr">priority:</span> <span class="hljs-number">5</span> <span class="hljs-comment">#过滤器优先权</span><br>  <span class="hljs-attr">enable_page:</span> <span class="hljs-string">/</span> <span class="hljs-comment"># 应用页面</span><br>  <span class="hljs-attr">exclude:</span><br>    <span class="hljs-comment"># - /posts/</span><br>    <span class="hljs-comment"># - /about/</span><br>  <span class="hljs-attr">layout:</span> <span class="hljs-comment"># 挂载容器类型</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">class</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">sticky_layout</span><br>    <span class="hljs-attr">index:</span> <span class="hljs-number">0</span><br>  <span class="hljs-attr">loading:</span> <span class="hljs-string">https://cdn.cbd.int/hexo-butterfly-clock-anzhiyu/lib/loading.gif</span> <span class="hljs-comment">#加载动画自定义</span><br>  <span class="hljs-attr">clock_css:</span> <span class="hljs-string">https://cdn.cbd.int/hexo-butterfly-clock-anzhiyu/lib/clock.min.css</span><br>  <span class="hljs-attr">clock_js:</span> <span class="hljs-string">https://cdn.cbd.int/hexo-butterfly-clock-anzhiyu/lib/clock.min.js</span><br>  <span class="hljs-attr">ip_api:</span> <span class="hljs-string">https://widget.qweather.net/simple/static/js/he-simple-common.js?v=2.0</span><br>  <span class="hljs-attr">qweather_key:</span>  <span class="hljs-comment"># 和风天气key</span><br>  <span class="hljs-attr">gaud_map_key:</span>  <span class="hljs-comment"># 高得地图web服务key</span><br>  <span class="hljs-attr">default_rectangle:</span> <span class="hljs-literal">false</span> <span class="hljs-comment"># 开启后将一直显示rectangle位置的天气，否则将获取访问者的地理位置与天气</span><br>  <span class="hljs-attr">rectangle:</span> <span class="hljs-number">113.34532</span><span class="hljs-string">,23.15624</span> <span class="hljs-comment"># 获取访问者位置失败时会显示该位置的天气，同时该位置为开启default_rectangle后的位置</span><br></code></pre></td></tr></table></figure></li></ol><p>其中<code>qweather_key</code>和<code>gaud_map_key</code>最好自己去申请对应的<code>api key</code>，默认使用鱼的，可能会被限制，不保证可靠性。</p><ol><li>参数释义</li></ol><div class="table-container"><table><thead><tr><th>参数</th><th>备选值/类型</th><th>释义</th></tr></thead><tbody><tr><td>priority</td><td>number</td><td>【可选】过滤器优先级，数值越小，执行越早，默认为 10，选填</td></tr><tr><td>enable</td><td>true/false</td><td>【必选】控制开关</td></tr><tr><td>enable_page</td><td>path/all</td><td>【可选】填写想要应用的页面的相对路径（即路由地址）,如根目录就填’/‘,分类页面就填’/categories/‘。若要应用于所有页面，就填’all’，默认为 all</td></tr><tr><td>exclude</td><td>path</td><td>【可选】填写想要屏蔽的页面，可以多个。写法见示例。原理是将屏蔽项的内容逐个放到当前路径去匹配，若当前路径包含任一屏蔽项，则不会挂载</td></tr><tr><td>layout.type</td><td>id/class</td><td>【可选】挂载容器类型，填写 id 或 class，不填则默认为 id</td></tr><tr><td>layout.name</td><td>text</td><td>【必选】挂载容器名称</td></tr><tr><td>layout.index</td><td>0和正整数</td><td>【可选】前提是 layout.type 为 class，因为同一页面可能有多个 class，此项用来确认究竟排在第几个顺位</td></tr><tr><td>loading</td><td>URL</td><td>【可选】电子钟加载动画的图片</td></tr><tr><td>clock_css</td><td>URL</td><td>【可选】电子钟样式 CDN 资源</td></tr><tr><td>clock_js</td><td>URL</td><td>【可选】电子钟执行脚本 CDN 资源</td></tr><tr><td>ip_api</td><td>URL</td><td>【可选】获取时钟 IP 的 API</td></tr><tr><td>qweather_key</td><td>text</td><td>【可选】和风天气 key</td></tr><tr><td>gaud_map_key</td><td>text</td><td>【可选】高得地图 web 服务 key</td></tr><tr><td>default_rectangle</td><td>text</td><td>【可选】开启后将一直显示 rectangle 位置的天气，否则将获取访问者的地理位置与天气</td></tr><tr><td>rectangle</td><td>text</td><td>【可选】获取访问者位置失败时会显示该位置的天气，同时该位置为开启 default_rectangle 后的位置</td></tr></tbody></table></div>              </div>            </details><h1 id="11-个人卡片渐变色"><a href="#11-个人卡片渐变色" class="headerlink" title="11.个人卡片渐变色"></a>11.个人卡片渐变色</h1><details class="folding-tag" ><summary> 点击查看教程 </summary>              <div class='content'>              <p>在<code>[BlogRoot]\source\css\custom.css</code>自定义样式的文件中引入如下代码（最后记得在inject配置项引入!!!）：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-comment">/* 侧边栏个人信息卡片动态渐变色 */</span><br><span class="hljs-selector-id">#aside-content</span> &gt; <span class="hljs-selector-class">.card-widget</span><span class="hljs-selector-class">.card-info</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(<br>    -<span class="hljs-number">45deg</span>,<br>    <span class="hljs-number">#e8d8b9</span>,<br>    <span class="hljs-number">#eccec5</span>,<br>    <span class="hljs-number">#a3e9eb</span>,<br>    <span class="hljs-number">#bdbdf0</span>,<br>    <span class="hljs-number">#eec1ea</span><br>  );<br>  <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">5px</span> <span class="hljs-built_in">rgb</span>(<span class="hljs-number">66</span>, <span class="hljs-number">68</span>, <span class="hljs-number">68</span>);<br>  <span class="hljs-attribute">position</span>: relative;<br>  <span class="hljs-attribute">background-size</span>: <span class="hljs-number">400%</span> <span class="hljs-number">400%</span>;<br>  -webkit-<span class="hljs-attribute">animation</span>: Gradient <span class="hljs-number">10s</span> ease infinite;<br>  -moz-<span class="hljs-attribute">animation</span>: Gradient <span class="hljs-number">10s</span> ease infinite;<br>  <span class="hljs-attribute">animation</span>: Gradient <span class="hljs-number">10s</span> ease infinite <span class="hljs-meta">!important</span>;<br>&#125;<br><span class="hljs-keyword">@-webkit-keyframes</span> Gradient &#123;<br>  <span class="hljs-number">0%</span> &#123;<br>    <span class="hljs-attribute">background-position</span>: <span class="hljs-number">0%</span> <span class="hljs-number">50%</span>;<br>  &#125;<br>  <span class="hljs-number">50%</span> &#123;<br>    <span class="hljs-attribute">background-position</span>: <span class="hljs-number">100%</span> <span class="hljs-number">50%</span>;<br>  &#125;<br>  <span class="hljs-number">100%</span> &#123;<br>    <span class="hljs-attribute">background-position</span>: <span class="hljs-number">0%</span> <span class="hljs-number">50%</span>;<br>  &#125;<br>&#125;<br><span class="hljs-keyword">@-moz-keyframes</span> Gradient &#123;<br>  <span class="hljs-number">0%</span> &#123;<br>    <span class="hljs-attribute">background-position</span>: <span class="hljs-number">0%</span> <span class="hljs-number">50%</span>;<br>  &#125;<br>  <span class="hljs-number">50%</span> &#123;<br>    <span class="hljs-attribute">background-position</span>: <span class="hljs-number">100%</span> <span class="hljs-number">50%</span>;<br>  &#125;<br>  <span class="hljs-number">100%</span> &#123;<br>    <span class="hljs-attribute">background-position</span>: <span class="hljs-number">0%</span> <span class="hljs-number">50%</span>;<br>  &#125;<br>&#125;<br><span class="hljs-keyword">@keyframes</span> Gradient &#123;<br>  <span class="hljs-number">0%</span> &#123;<br>    <span class="hljs-attribute">background-position</span>: <span class="hljs-number">0%</span> <span class="hljs-number">50%</span>;<br>  &#125;<br>  <span class="hljs-number">50%</span> &#123;<br>    <span class="hljs-attribute">background-position</span>: <span class="hljs-number">100%</span> <span class="hljs-number">50%</span>;<br>  &#125;<br>  <span class="hljs-number">100%</span> &#123;<br>    <span class="hljs-attribute">background-position</span>: <span class="hljs-number">0%</span> <span class="hljs-number">50%</span>;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">/* 黑夜模式适配 */</span><br><span class="hljs-selector-attr">[data-theme=<span class="hljs-string">&quot;dark&quot;</span>]</span> <span class="hljs-selector-id">#aside-content</span> &gt; <span class="hljs-selector-class">.card-widget</span><span class="hljs-selector-class">.card-info</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-number">#191919ee</span>;<br>&#125;<br><br><span class="hljs-comment">/* 个人信息Follow me按钮 */</span><br><span class="hljs-selector-id">#aside-content</span> &gt; <span class="hljs-selector-class">.card-widget</span><span class="hljs-selector-class">.card-info</span> &gt; <span class="hljs-selector-id">#card-info-btn</span> &#123;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#3eb8be</span>;<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">8px</span>;<br>&#125;<br></code></pre></td></tr></table></figure></p>              </div>            </details><h1 id="12-外挂标签的引入（店长）"><a href="#12-外挂标签的引入（店长）" class="headerlink" title="12.外挂标签的引入（店长）"></a>12.外挂标签的引入（店长）</h1><details class="folding-tag" ><summary> 点击查看教程 </summary>              <div class='content'>              <p>详见：<a href="https://akilar.top/posts/615e2dec/">Tag Plugins Plus</a></p><ol><li>安装插件,在博客根目录<code>[Blogroot]</code>下打开终端，运行以下指令：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs BASH">npm install hexo-butterfly-tag-plugins-plus --save<br></code></pre></td></tr></table></figure></li></ol><p>考虑到<code>hexo</code>自带的<code>markdown</code>渲染插件<code>hexo-renderer-marked</code>与外挂标签语法的兼容性较差，建议您将其替换成<a href="https://www.npmjs.com/package/hexo-renderer-kramed">hexo-renderer-kramed</a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs BASH">npm uninstall hexo-renderer-marked --save<br>npm install hexo-renderer-kramed --save<br></code></pre></td></tr></table></figure></p><ol><li><p>添加配置信息，以下为写法示例在站点配置文件<code>_config.yml</code>或者主题配置文件<code>_config.butterfly.yml</code>中添加</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs YML"><span class="hljs-comment"># tag-plugins-plus</span><br><span class="hljs-comment"># see https://akilar.top/posts/615e2dec/</span><br><span class="hljs-attr">tag_plugins:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 开关</span><br>  <span class="hljs-attr">priority:</span> <span class="hljs-number">5</span> <span class="hljs-comment">#过滤器优先权</span><br>  <span class="hljs-attr">issues:</span> <span class="hljs-literal">false</span> <span class="hljs-comment">#issues标签依赖注入开关</span><br>  <span class="hljs-attr">link:</span><br>    <span class="hljs-attr">placeholder:</span> <span class="hljs-string">/img/link.png</span> <span class="hljs-comment">#link_card标签默认的图标图片</span><br>  <span class="hljs-attr">CDN:</span><br>    <span class="hljs-attr">anima:</span> <span class="hljs-string">https://npm.elemecdn.com/hexo-butterfly-tag-plugins-plus@latest/lib/assets/font-awesome-animation.min.css</span> <span class="hljs-comment">#动画标签anima的依赖</span><br>    <span class="hljs-attr">jquery:</span> <span class="hljs-string">https://npm.elemecdn.com/jquery@latest/dist/jquery.min.js</span> <span class="hljs-comment">#issues标签依赖</span><br>    <span class="hljs-attr">issues:</span> <span class="hljs-string">https://npm.elemecdn.com/hexo-butterfly-tag-plugins-plus@latest/lib/assets/issues.js</span> <span class="hljs-comment">#issues标签依赖</span><br>    <span class="hljs-attr">iconfont:</span> <span class="hljs-string">//at.alicdn.com/t/font_2032782_8d5kxvn09md.js</span> <span class="hljs-comment">#参看https://akilar.top/posts/d2ebecef/</span><br>    <span class="hljs-attr">carousel:</span> <span class="hljs-string">https://npm.elemecdn.com/hexo-butterfly-tag-plugins-plus@latest/lib/assets/carousel-touch.js</span><br>    <span class="hljs-attr">tag_plugins_css:</span> <span class="hljs-string">https://npm.elemecdn.com/hexo-butterfly-tag-plugins-plus@latest/lib/tag_plugins.css</span><br></code></pre></td></tr></table></figure></li><li><p>参数释义</p></li></ol><div class="table-container"><table><thead><tr><th>参数</th><th>备选值/类型</th><th>释义</th></tr></thead><tbody><tr><td>enable</td><td>true/false</td><td>【必选】控制开关</td></tr><tr><td>priority</td><td>number</td><td>【可选】过滤器优先级，数值越小，执行越早，默认为10，选填</td></tr><tr><td>issues</td><td>true/false</td><td>【可选】issues标签控制开关，默认为false</td></tr><tr><td>link.placeholder</td><td>【必选】link卡片外挂标签的默认图标</td><td></td></tr><tr><td>CDN.anima</td><td>URL</td><td>【可选】anima标签依赖</td></tr><tr><td>CDN.jquery</td><td>URL</td><td>【可选】jquery标签的依赖</td></tr><tr><td>CDN.issues</td><td>URL</td><td>【可选】issues标签依赖</td></tr><tr><td>CDN.iconfont</td><td>URL</td><td>【可选】iconfont标签symbol样式引入，如果不想引入，则设为false</td></tr><tr><td>CDN.carousel</td><td>URL</td><td>【可选】carousel旋转相册标签鼠标拖动依赖，如果不想引入则设为false</td></tr><tr><td>CDN.tag_plugins_css</td><td>URL</td><td>【可选】外挂标签样式的CSS依赖，为避免CDN缓存延迟，建议将@latest改为具体版本号</td></tr></tbody></table></div>              </div>            </details><h1 id="13-版权美化（店长）"><a href="#13-版权美化（店长）" class="headerlink" title="13.版权美化（店长）"></a>13.版权美化（店长）</h1><details class="folding-tag" ><summary> 点击查看教程 </summary>              <div class='content'>              <p>详见：（二创）Copyright-beautify</p><ol><li><p>修改<code>[Blogroot]\themes\butterfly\layout\includes\post\post-copyright.pug</code>,直接复制以下内容替换原文件内容。此处多次用到了三元运算符作为默认项设置，在确保有主题配置文件的默认项的情况下，也可以在相应文章的<code>front-matter</code>中重新定义作者，原文链接，开源许可协议等内容。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs PUG">if theme.post_copyright.enable &amp;&amp; page.copyright !== false<br>  - let author = page.copyright_author ? page.copyright_author : config.author<br>  - let url = page.copyright_url ? page.copyright_url : page.permalink<br>  - let license = page.license ? page.license : theme.post_copyright.license<br>  - let license_url = page.license_url ? page.license_url : theme.post_copyright.license_url<br>  .post-copyright<br>    .post-copyright__title<br>      span.post-copyright-info<br>        h #[=page.title]<br>    .post-copyright__type<br>      span.post-copyright-info<br>        a(href=url_for(url))= theme.post_copyright.decode ? decodeURI(url) : url<br>    .post-copyright-m<br>      .post-copyright-m-info<br>        .post-copyright-a<br>            h 作者<br>            .post-copyright-cc-info<br>                h=author<br>        .post-copyright-c<br>            h 发布于<br>            .post-copyright-cc-info<br>                h=date(page.date, config.date_format)<br>        .post-copyright-u<br>            h 更新于<br>            .post-copyright-cc-info<br>                h=date(page.updated, config.date_format)<br>        .post-copyright-c<br>            h 许可协议<br>            .post-copyright-cc-info<br>                a.icon(rel=&#x27;noopener&#x27; target=&#x27;_blank&#x27; title=&#x27;Creative Commons&#x27; href=&#x27;https://creativecommons.org/&#x27;)<br>                  i.fab.fa-creative-commons<br>                a(rel=&#x27;noopener&#x27; target=&#x27;_blank&#x27; title=license href=url_for(license_url))=license<br></code></pre></td></tr></table></figure></li><li><p>修改<code>[Blogroot]\themes\butterfly\source\css\_layout\post.styl</code>,直接复制以下内容，替换原文件</p><div class="tabs" id="buti"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#buti-1">Butterfly v3.x</button></li><li class="tab"><button type="button" data-href="#buti-2">Butterfly v4.x</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="buti-1"><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br></pre></td><td class="code"><pre><code class="hljs CSS">beautify()<br>  headStyle(fontsize)<br>    <span class="hljs-attribute">padding-left</span>: <span class="hljs-built_in">unit</span>(fontsize + .<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;rem&#x27;</span>)<br><br>    code<br>      font-size: <span class="hljs-built_in">unit</span>(fontsize, <span class="hljs-string">&#x27;rem&#x27;</span>)<br><br>    &amp;:before<br>      margin-left: <span class="hljs-built_in">unit</span>((<span class="hljs-built_in">-</span>(fontsize + .<span class="hljs-number">2</span>)), <span class="hljs-string">&#x27;rem&#x27;</span>)<br>      font-size: <span class="hljs-built_in">unit</span>(fontsize, <span class="hljs-string">&#x27;rem&#x27;</span>)<br><br>    &amp;:hover<br>      padding-left: <span class="hljs-built_in">unit</span>(fontsize + .<span class="hljs-number">6</span>, <span class="hljs-string">&#x27;rem&#x27;</span>)<br><br>  h1,<br>  h2,<br>  h3,<br>  h4,<br>  h5,<br>  h6<br>    transition: all .<span class="hljs-number">2s</span> ease-out<br><br>    &amp;:before<br>      position: absolute<br>      top: <span class="hljs-built_in">calc</span>(<span class="hljs-number">50%</span> - .<span class="hljs-number">35rem</span>)<br>      color: $title-prefix-icon-color<br>      content: $title-prefix-icon<br>      line-height: <span class="hljs-number">1</span><br>      transition: all .<span class="hljs-number">2s</span> ease-out<br>      @extend .fontawesomeIcon<br><br>    &amp;:hover<br>      &amp;:before<br>        color: $light-blue<br><br>  h1<br>    <span class="hljs-built_in">headStyle</span>(<span class="hljs-number">1</span>)<br><br>  h2<br>    <span class="hljs-built_in">headStyle</span>(.<span class="hljs-number">9</span>)<br><br>  h3<br>    <span class="hljs-built_in">headStyle</span>(.<span class="hljs-number">8</span>)<br><br>  h4<br>    <span class="hljs-built_in">headStyle</span>(.<span class="hljs-number">7</span>)<br><br>  h5<br>    <span class="hljs-built_in">headStyle</span>(.<span class="hljs-number">6</span>)<br><br>  h6<br>    <span class="hljs-built_in">headStyle</span>(.<span class="hljs-number">6</span>)<br><br>  ol,<br>  ul<br>    margin-top: .<span class="hljs-number">4rem</span><br>    padding: <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> .<span class="hljs-number">8rem</span><br>    list-style: none<br>    counter-reset: li<br><br>    +<span class="hljs-built_in">maxWidth768</span>()<br>      padding: <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> .<span class="hljs-number">4rem</span><br><br>    p<br>      margin: <span class="hljs-number">0</span> <span class="hljs-number">0</span> .<span class="hljs-number">5rem</span><br><br>    ol,<br>    ul<br>      padding-left: .<span class="hljs-number">6rem</span><br><br>      +<span class="hljs-built_in">maxWidth768</span>()<br>        padding-left: .<span class="hljs-number">2rem</span><br><br>    li<br>      &amp;:<span class="hljs-built_in">not</span>(.tab)<br>        position: relative<br>        margin: .<span class="hljs-number">2rem</span> <span class="hljs-number">0</span><br><br>      &amp;:hover<br>        &amp;:before<br>          transform: <span class="hljs-built_in">rotate</span>(<span class="hljs-number">360deg</span>)<br><br>      &amp;:before<br>        position: absolute<br>        top: <span class="hljs-number">0</span><br>        left: <span class="hljs-number">0</span><br>        background: $light-blue<br>        color: $white<br>        cursor: pointer<br>        transition: all .<span class="hljs-number">3s</span> ease-out<br><br>  ol<br>    &gt; li<br>      &amp;:<span class="hljs-built_in">not</span>(.tab)<br>        padding: .<span class="hljs-number">2em</span> .<span class="hljs-number">2em</span> .<span class="hljs-number">2em</span> <span class="hljs-number">1.8em</span><br><br>      &amp;:before<br>        margin-top: .<span class="hljs-number">65em</span><br>        width: w = <span class="hljs-number">1.45em</span><br>        height: h = w<br>        border-radius: .<span class="hljs-number">5</span> * w<br>        content: <span class="hljs-built_in">counter</span>(li)<br>        counter-increment: li<br>        text-align: center<br>        font-size: .<span class="hljs-number">85em</span><br>        line-height: h<br><br>  ul<br>    &gt; li:<span class="hljs-built_in">not</span>(.tab)<br>      padding: .<span class="hljs-number">2em</span> .<span class="hljs-number">2em</span> .<span class="hljs-number">2em</span> <span class="hljs-number">1.4em</span><br><br>      &amp;:hover<br>        &amp;:before<br>          border-color: $pseudo-hover<br><br>      &amp;:before<br>        $w = .<span class="hljs-number">42em</span><br>        top: .<span class="hljs-number">78em</span><br>        width: w = $w<br>        height: h = w<br>        border: .<span class="hljs-number">5</span> * w solid $light-blue<br>        border-radius: w<br>        background: transparent<br>        content: <span class="hljs-string">&#x27;&#x27;</span><br>        line-height: h<br><br><span class="hljs-built_in">no-beautify</span>()<br>  ol,<br>  ul<br>    margin-top: .<span class="hljs-number">4rem</span><br><br>    p<br>      margin: <span class="hljs-number">0</span> <span class="hljs-number">0</span> .<span class="hljs-number">5rem</span><br><br>    ol,<br>    ul<br>      padding-left: .<span class="hljs-number">5rem</span><br><br>    li<br>      position: relative<br>      margin: .<span class="hljs-number">3rem</span> <span class="hljs-number">0</span><br>      padding-left: .<span class="hljs-number">3rem</span><br><br>#article-container<br>  word-wrap: break-word<br>  overflow-wrap: break-word<br><br>  a<br>    color: $theme-link-color<br><br>    &amp;:hover<br>      text-decoration: underline<br><br>  img<br>    display: block<br>    margin: <span class="hljs-number">0</span> auto .<span class="hljs-number">8rem</span><br><br>  p<br>    margin: <span class="hljs-number">0</span> <span class="hljs-number">0</span> .<span class="hljs-number">8rem</span><br><br>  iframe<br>    margin: <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1rem</span><br><br>  if <span class="hljs-built_in">hexo-config</span>(<span class="hljs-string">&#x27;beautify.enable&#x27;</span>) &amp;&amp; <span class="hljs-built_in">hexo-config</span>(<span class="hljs-string">&#x27;beautify.field&#x27;</span>) == <span class="hljs-string">&#x27;site&#x27;</span><br>    <span class="hljs-built_in">beautify</span>()<br>  else if <span class="hljs-built_in">hexo-config</span>(<span class="hljs-string">&#x27;beautify.enable&#x27;</span>) &amp;&amp; <span class="hljs-built_in">hexo-config</span>(<span class="hljs-string">&#x27;beautify.field&#x27;</span>) == <span class="hljs-string">&#x27;post&#x27;</span><br>    <span class="hljs-built_in">no-beautify</span>()<br><br>    &amp;.post-content<br>      <span class="hljs-built_in">beautify</span>()<br>  else<br>    <span class="hljs-built_in">no-beautify</span>()<br><br>#post<br>  .tag_share<br>    .post-meta<br>      &amp;__tag-list<br>        display: inline-block<br><br>      &amp;__tags<br>        display: inline-block<br>        margin: .<span class="hljs-number">4rem</span> .<span class="hljs-number">4rem</span> .<span class="hljs-number">4rem</span> <span class="hljs-number">0</span><br>        padding: <span class="hljs-number">0</span> .<span class="hljs-number">6rem</span><br>        width: fit-content<br>        border: <span class="hljs-number">1px</span> solid $light-blue<br>        border-radius: .<span class="hljs-number">6rem</span><br>        color: $light-blue<br>        font-size: .<span class="hljs-number">85em</span><br>        transition: all .<span class="hljs-number">2s</span> ease-in-out<br><br>        &amp;:hover<br>          background: $light-blue<br>          color: <span class="hljs-built_in">var</span>(--white)<br><br>    .post_share<br>      display: inline-block<br>      float: right<br>      margin: .<span class="hljs-number">4rem</span> <span class="hljs-number">0</span><br>      width: fit-content<br><br>      .social-share<br>        font-size: .<span class="hljs-number">85em</span><br><br>        .social-share-icon<br>          margin: <span class="hljs-number">0</span> <span class="hljs-number">4px</span><br>          width: w = <span class="hljs-number">1.85em</span><br>          height: w<br>          font-size: <span class="hljs-number">1.2em</span><br>          line-height: w<br><br>  .post-copyright<br>    position: relative<br>    margin: <span class="hljs-number">2rem</span> <span class="hljs-number">0</span> .<span class="hljs-number">5rem</span><br>    padding: .<span class="hljs-number">5rem</span> .<span class="hljs-number">8rem</span><br>    border: <span class="hljs-number">1px</span> solid <span class="hljs-built_in">var</span>(--light-grey)<br>    transition: box-shadow .<span class="hljs-number">3s</span> ease-in-out<br>    overflow: hidden<br>    border-radius: <span class="hljs-number">12px</span><span class="hljs-meta">!important</span><br>    background-color: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">239</span> <span class="hljs-number">241</span> <span class="hljs-number">243</span>)<br><br>    &amp;:before<br>      background <span class="hljs-built_in">var</span>(--heo-post-blockquote-bg)<br>      position absolute<br>      right -<span class="hljs-number">26px</span><br>      top -<span class="hljs-number">120px</span><br>      content <span class="hljs-string">&#x27;\f25e&#x27;</span><br>      font-size <span class="hljs-number">200px</span><br>      font-family <span class="hljs-string">&#x27;Font Awesome 5 Brands&#x27;</span><br>      opacity .<span class="hljs-number">2</span><br><br>    &amp;:hover<br>      box-shadow: <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">8px</span> <span class="hljs-number">0</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">232</span>, <span class="hljs-number">237</span>, <span class="hljs-number">250</span>, .<span class="hljs-number">6</span>), <span class="hljs-number">0</span> <span class="hljs-number">2px</span> <span class="hljs-number">4px</span> <span class="hljs-number">0</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">232</span>, <span class="hljs-number">237</span>, <span class="hljs-number">250</span>, .<span class="hljs-number">5</span>)<br><br>    .post-copyright<br>      &amp;-meta<br>        color: $light-blue<br>        font-weight: bold<br><br>      &amp;-info<br>        padding-left: .<span class="hljs-number">3rem</span><br><br>        a<br>          text-decoration: none<br>          word-break: break-word<br><br>          &amp;:hover<br>            text-decoration: none<br><br>  .post-copyright-cc-info<br>    color: $theme-color;<br><br>  <span class="hljs-selector-class">.post-outdate-notice</span><br>    <span class="hljs-attribute">position</span>: relative<br>    margin: <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1rem</span><br>    padding: .<span class="hljs-number">5em</span> <span class="hljs-number">1.2em</span><br>    border-radius: <span class="hljs-number">15px</span><br>    background-color: $noticeOutdate-bg<br>    color: $noticeOutdate-color<br><br>    if <span class="hljs-built_in">hexo-config</span>(<span class="hljs-string">&#x27;noticeOutdate.style&#x27;</span>) == <span class="hljs-string">&#x27;flat&#x27;</span><br>      padding: .<span class="hljs-number">5em</span> <span class="hljs-number">1em</span> .<span class="hljs-number">5em</span> <span class="hljs-number">2.6em</span><br>      border-left: <span class="hljs-number">5px</span> solid $noticeOutdate-border<br><br>      &amp;:before<br>        @extend .fontawesomeIcon<br>        position: absolute<br>        top: <span class="hljs-number">50%</span><br>        left: .<span class="hljs-number">9em</span><br>        color: $noticeOutdate-border<br>        content: <span class="hljs-string">&#x27;\f071&#x27;</span><br>        transform: <span class="hljs-built_in">translateY</span>(-<span class="hljs-number">50%</span>)<br><br>  .ads-wrap<br>    margin: <span class="hljs-number">2rem</span> <span class="hljs-number">0</span><br>.post-copyright-m-info<br>  .post-copyright-a,<br>  .post-copyright-c,<br>  .post-copyright-u<br>    display inline-block<br>    width fit-content<br>    padding <span class="hljs-number">2px</span> <span class="hljs-number">5px</span><br>[data-theme=<span class="hljs-string">&quot;dark&quot;</span>]<br>  #post<br>    .post-copyright<br>      background-color <span class="hljs-number">#07080a</span><br>      text-shadow <span class="hljs-number">#bfbeb8</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">2px</span><br>      border <span class="hljs-number">1px</span> solid <span class="hljs-built_in">rgb</span>(<span class="hljs-number">19</span> <span class="hljs-number">18</span> <span class="hljs-number">18</span> / <span class="hljs-number">35%</span>)<br>      box-shadow <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">5px</span> <span class="hljs-built_in">rgb</span>(<span class="hljs-number">20</span>, <span class="hljs-number">120</span>, <span class="hljs-number">210</span>)<br>      animation flashlight <span class="hljs-number">1s</span> linear infinite alternate<br>  .post-copyright-info<br>    color <span class="hljs-number">#e0e0e4</span><br><br>#post<br>  .post-copyright__title<br>    font-size <span class="hljs-number">22px</span><br>  .post-copyright__notice<br>    font-size <span class="hljs-number">15px</span><br>  .post-copyright<br>    box-shadow <span class="hljs-number">2px</span> <span class="hljs-number">2px</span> <span class="hljs-number">5px</span><br><br>@keyframes flashlight<br>  from<br>    box-shadow <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">5px</span> <span class="hljs-built_in">rgb</span>(<span class="hljs-number">20</span>, <span class="hljs-number">120</span>, <span class="hljs-number">210</span>)<br>  to<br>    box-shadow <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">2px</span> <span class="hljs-built_in">rgb</span>(<span class="hljs-number">20</span>, <span class="hljs-number">120</span>, <span class="hljs-number">210</span>)<br></code></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="buti-2"><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br></pre></td><td class="code"><pre><code class="hljs CSS">beautify()<br>  headStyle(fontsize)<br>    <span class="hljs-attribute">padding-left</span>: <span class="hljs-built_in">unit</span>(fontsize + <span class="hljs-number">12</span>, <span class="hljs-string">&#x27;px&#x27;</span>)<br><br>    &amp;:before<br>      margin-left: <span class="hljs-built_in">unit</span>((<span class="hljs-built_in">-</span>(fontsize + <span class="hljs-number">6</span>)), <span class="hljs-string">&#x27;px&#x27;</span>)<br>      font-size: <span class="hljs-built_in">unit</span>(fontsize, <span class="hljs-string">&#x27;px&#x27;</span>)<br><br>    &amp;:hover<br>      padding-left: <span class="hljs-built_in">unit</span>(fontsize + <span class="hljs-number">18</span>, <span class="hljs-string">&#x27;px&#x27;</span>)<br><br>  h1,<br>  h2,<br>  h3,<br>  h4,<br>  h5,<br>  h6<br>    transition: all .<span class="hljs-number">2s</span> ease-out<br><br>    &amp;:before<br>      position: absolute<br>      top: <span class="hljs-built_in">calc</span>(<span class="hljs-number">50%</span> - <span class="hljs-number">7px</span>)<br>      color: $title-prefix-icon-color<br>      content: $title-prefix-icon<br>      line-height: <span class="hljs-number">1</span><br>      transition: all .<span class="hljs-number">2s</span> ease-out<br>      @extend .fontawesomeIcon<br><br>    &amp;:hover<br>      &amp;:before<br>        color: $light-blue<br><br>  h1<br>    <span class="hljs-built_in">headStyle</span>(<span class="hljs-number">20</span>)<br><br>  h2<br>    <span class="hljs-built_in">headStyle</span>(<span class="hljs-number">18</span>)<br><br>  h3<br>    <span class="hljs-built_in">headStyle</span>(<span class="hljs-number">16</span>)<br><br>  h4<br>    <span class="hljs-built_in">headStyle</span>(<span class="hljs-number">14</span>)<br><br>  h5<br>    <span class="hljs-built_in">headStyle</span>(<span class="hljs-number">12</span>)<br><br>  h6<br>    <span class="hljs-built_in">headStyle</span>(<span class="hljs-number">12</span>)<br><br>  ol,<br>  ul<br>    p<br>      margin: <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">8px</span><br><br>  li<br>    &amp;::marker<br>      color: $light-blue<br>      font-weight: <span class="hljs-number">600</span><br>      font-size: <span class="hljs-number">1.05em</span><br><br>    &amp;:hover<br>      &amp;::marker<br>        color: <span class="hljs-built_in">var</span>(--pseudo-hover)<br><br>  ul &gt; li<br>    list-style-type: circle<br><br>#article-container<br>  word-wrap: break-word<br>  overflow-wrap: break-word<br><br>  a<br>    color: $theme-link-color<br><br>    &amp;:hover<br>      text-decoration: underline<br><br>  img<br>    display: block<br>    margin: <span class="hljs-number">0</span> auto <span class="hljs-number">20px</span><br>    max-width: <span class="hljs-number">100%</span><br>    transition: filter <span class="hljs-number">375ms</span> ease-in .<span class="hljs-number">2s</span><br><br>  p<br>    margin: <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">16px</span><br><br>  iframe<br>    margin: <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">20px</span><br><br>  if <span class="hljs-built_in">hexo-config</span>(<span class="hljs-string">&#x27;anchor&#x27;</span>)<br>    a.headerlink<br>      &amp;:after<br>        @extend .fontawesomeIcon<br>        float: right<br>        color: <span class="hljs-built_in">var</span>(--headline-presudo)<br>        content: <span class="hljs-string">&#x27;\f0c1&#x27;</span><br>        font-size: .<span class="hljs-number">95em</span><br>        opacity: <span class="hljs-number">0</span><br>        transition: all .<span class="hljs-number">3s</span><br><br>      &amp;:hover<br>        &amp;:after<br>          color: <span class="hljs-built_in">var</span>(--pseudo-hover)<br><br>    h1,<br>    h2,<br>    h3,<br>    h4,<br>    h5,<br>    h6<br>      &amp;:hover<br>        a.headerlink<br>          &amp;:after<br>            opacity: <span class="hljs-number">1</span><br><br>  ol,<br>  ul<br>    ol,<br>    ul<br>      padding-left: <span class="hljs-number">20px</span><br><br>    li<br>      margin: <span class="hljs-number">4px</span> <span class="hljs-number">0</span><br><br>    p<br>      margin: <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">8px</span><br><br>  if <span class="hljs-built_in">hexo-config</span>(<span class="hljs-string">&#x27;beautify.enable&#x27;</span>)<br>    if <span class="hljs-built_in">hexo-config</span>(<span class="hljs-string">&#x27;beautify.field&#x27;</span>) == <span class="hljs-string">&#x27;site&#x27;</span><br>      <span class="hljs-built_in">beautify</span>()<br>    else if <span class="hljs-built_in">hexo-config</span>(<span class="hljs-string">&#x27;beautify.field&#x27;</span>) == <span class="hljs-string">&#x27;post&#x27;</span><br>      &amp;.post-content<br>        <span class="hljs-built_in">beautify</span>()<br><br>  &gt; :last-child<br>    margin-bottom: <span class="hljs-number">0</span> <span class="hljs-meta">!important</span><br><br>#post<br>  .tag_share<br>    .post-meta<br>      &amp;__tag-list<br>        display: inline-block<br><br>      &amp;__tags<br>        display: inline-block<br>        margin: <span class="hljs-number">8px</span> <span class="hljs-number">8px</span> <span class="hljs-number">8px</span> <span class="hljs-number">0</span><br>        padding: <span class="hljs-number">0</span> <span class="hljs-number">12px</span><br>        width: fit-content<br>        border: <span class="hljs-number">1px</span> solid $light-blue<br>        border-radius: <span class="hljs-number">12px</span><br>        color: $light-blue<br>        font-size: .<span class="hljs-number">85em</span><br>        transition: all .<span class="hljs-number">2s</span> ease-in-out<br><br>        &amp;:hover<br>          background: $light-blue<br>          color: <span class="hljs-built_in">var</span>(--white)<br><br>    .post_share<br>      display: inline-block<br>      float: right<br>      margin: <span class="hljs-number">8px</span> <span class="hljs-number">0</span><br>      width: fit-content<br><br>      .social-share<br>        font-size: .<span class="hljs-number">85em</span><br><br>        .social-share-icon<br>          margin: <span class="hljs-number">0</span> <span class="hljs-number">4px</span><br>          width: w = <span class="hljs-number">1.85em</span><br>          height: w<br>          font-size: <span class="hljs-number">1.2em</span><br>          line-height: w<br><br>  .post-copyright<br>    position: relative<br>    margin: <span class="hljs-number">40px</span> <span class="hljs-number">0</span> <span class="hljs-number">10px</span><br>    padding: <span class="hljs-number">10px</span> <span class="hljs-number">16px</span><br>    border: <span class="hljs-number">1px</span> solid <span class="hljs-built_in">var</span>(--light-grey)<br>    transition: box-shadow .<span class="hljs-number">3s</span> ease-in-out<br>    overflow: hidden<br>    border-radius: <span class="hljs-number">12px</span><span class="hljs-meta">!important</span><br>    background-color: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">239</span> <span class="hljs-number">241</span> <span class="hljs-number">243</span>)<br><br>    &amp;:before<br>      background <span class="hljs-built_in">var</span>(--heo-post-blockquote-bg)<br>      position absolute<br>      right -<span class="hljs-number">26px</span><br>      top -<span class="hljs-number">120px</span><br>      content <span class="hljs-string">&#x27;\f25e&#x27;</span><br>      font-size <span class="hljs-number">200px</span><br>      font-family <span class="hljs-string">&#x27;Font Awesome 5 Brands&#x27;</span><br>      opacity .<span class="hljs-number">2</span><br><br>    &amp;:hover<br>      box-shadow: <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">8px</span> <span class="hljs-number">0</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">232</span>, <span class="hljs-number">237</span>, <span class="hljs-number">250</span>, .<span class="hljs-number">6</span>), <span class="hljs-number">0</span> <span class="hljs-number">2px</span> <span class="hljs-number">4px</span> <span class="hljs-number">0</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">232</span>, <span class="hljs-number">237</span>, <span class="hljs-number">250</span>, .<span class="hljs-number">5</span>)<br><br>    .post-copyright<br>      &amp;-meta<br>        color: $light-blue<br>        font-weight: bold<br><br>      &amp;-info<br>        padding-left: <span class="hljs-number">6px</span><br><br>        a<br>          text-decoration: none<br>          word-break: break-word<br><br>          &amp;:hover<br>            text-decoration: none<br><br>  .post-copyright-cc-info<br>    color: $theme-color;<br><br>  <span class="hljs-selector-class">.post-outdate-notice</span><br>    <span class="hljs-attribute">position</span>: relative<br>    margin: <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">20px</span><br>    padding: .<span class="hljs-number">5em</span> <span class="hljs-number">1.2em</span><br>    border-radius: <span class="hljs-number">3px</span><br>    background-color: $noticeOutdate-bg<br>    color: $noticeOutdate-color<br><br>    if <span class="hljs-built_in">hexo-config</span>(<span class="hljs-string">&#x27;noticeOutdate.style&#x27;</span>) == <span class="hljs-string">&#x27;flat&#x27;</span><br>      padding: .<span class="hljs-number">5em</span> <span class="hljs-number">1em</span> .<span class="hljs-number">5em</span> <span class="hljs-number">2.6em</span><br>      border-left: <span class="hljs-number">5px</span> solid $noticeOutdate-border<br><br>      &amp;:before<br>        @extend .fontawesomeIcon<br>        position: absolute<br>        top: <span class="hljs-number">50%</span><br>        left: .<span class="hljs-number">9em</span><br>        color: $noticeOutdate-border<br>        content: <span class="hljs-string">&#x27;\f071&#x27;</span><br>        transform: <span class="hljs-built_in">translateY</span>(-<span class="hljs-number">50%</span>)<br><br>  .ads-wrap<br>    margin: <span class="hljs-number">40px</span> <span class="hljs-number">0</span><br>.post-copyright-m-info<br>  .post-copyright-a,<br>  .post-copyright-c,<br>  .post-copyright-u<br>    display inline-block<br>    width fit-content<br>    padding <span class="hljs-number">2px</span> <span class="hljs-number">5px</span><br>[data-theme=<span class="hljs-string">&quot;dark&quot;</span>]<br>  #post<br>    .post-copyright<br>      background-color <span class="hljs-number">#07080a</span><br>      text-shadow <span class="hljs-number">#bfbeb8</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">2px</span><br>      border <span class="hljs-number">1px</span> solid <span class="hljs-built_in">rgb</span>(<span class="hljs-number">19</span> <span class="hljs-number">18</span> <span class="hljs-number">18</span> / <span class="hljs-number">35%</span>)<br>      box-shadow <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">5px</span> <span class="hljs-built_in">rgb</span>(<span class="hljs-number">20</span>, <span class="hljs-number">120</span>, <span class="hljs-number">210</span>)<br>      animation flashlight <span class="hljs-number">1s</span> linear infinite alternate<br>  .post-copyright-info<br>    color <span class="hljs-number">#e0e0e4</span><br><br>#post<br>  .post-copyright__title<br>    font-size <span class="hljs-number">22px</span><br>  .post-copyright__notice<br>    font-size <span class="hljs-number">15px</span><br>  .post-copyright<br>    box-shadow <span class="hljs-number">2px</span> <span class="hljs-number">2px</span> <span class="hljs-number">5px</span><br></code></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div></li><li><p>默认项的配置</p></li></ol><ul><li><p>作者：<code>[Blogroot]\_config.yml</code>中的<code>author</code>配置项</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs YML"><span class="hljs-comment"># Site</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">Akilarの糖果屋</span><br><span class="hljs-attr">subtitle:</span> <span class="hljs-string">Akilar.top</span><br><span class="hljs-attr">description:</span><br><span class="hljs-attr">keywords:</span><br><span class="hljs-attr">author:</span> <span class="hljs-string">Akilar</span> <span class="hljs-comment">#默认作者</span><br><span class="hljs-attr">language:</span> <span class="hljs-string">zh-CN</span><br><span class="hljs-attr">timezone:</span> <span class="hljs-string">&#x27;&#x27;</span><br></code></pre></td></tr></table></figure></li><li><p>许可协议：<code>[Blogroot]\_config.butterfly.yml中的license和license_url</code>配置项</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs YML"><span class="hljs-attr">post_copyright:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">decode:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">license:</span> <span class="hljs-string">CC</span> <span class="hljs-string">BY-NC-SA</span> <span class="hljs-number">4.0</span><br>  <span class="hljs-attr">license_url:</span> <span class="hljs-string">https://creativecommons.org/licenses/by-nc-sa/4.0/</span><br></code></pre></td></tr></table></figure></li></ul><ol><li>页面覆写配置项，修改对应文章的<code>front-matter</code><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs MARKDOWN">---<br>title: Copyright-beautify # 文章名称<br>date: 2021-03-02 13:52:46 # 文章发布日期<br>updated: 2021-03-02 13:52:46 # 文章更新日期<br>copyright<span class="hljs-emphasis">_author: Nesxc # 作者覆写</span><br><span class="hljs-emphasis">copyright_</span>url: https://www.nesxc.com/post/hexocc.html # 原文链接覆写<br>license: # 许可协议名称覆写<br><span class="hljs-section">license<span class="hljs-emphasis">_url: # 许可协议链接覆写</span></span><br><span class="hljs-emphasis"><span class="hljs-section">---</span></span><br></code></pre></td></tr></table></figure></li></ol>              </div>            </details><h1 id="14-aplayer音乐播放器"><a href="#14-aplayer音乐播放器" class="headerlink" title="14.aplayer音乐播放器"></a>14.aplayer音乐播放器</h1><details class="folding-tag" ><summary> 点击查看教程 </summary>              <div class='content'>              <p>详见：<a href="https://butterfly.js.org/posts/507c070f/">Butterfly添加全局吸底Aplayer教程</a></p><ol><li><p>在博客根目录<code>[Blogroot]</code>下打开终端，运行以下指令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs BASH">npm install hexo-tag-aplayer --save<br></code></pre></td></tr></table></figure></li><li><p>在网站配置文件<code>_config.yml</code>中修改<code>aplayer</code> 配置项为：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs YML"><span class="hljs-comment"># 音乐插件</span><br><span class="hljs-attr">aplayer:</span> <br>  <span class="hljs-attr">meting:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">asset_inject:</span> <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure></li><li><p>在主题配置文件<code>_config.butterfly.yml</code>中修改<code>aplayerInject</code>配置项为：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs YML"><span class="hljs-comment"># Inject the css and script (aplayer/meting)</span><br><span class="hljs-attr">aplayerInject:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">per_page:</span> <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure></li><li><p>在你想要加入音乐播放器的页面加入以下语句：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;aplayer-oSEOhviA&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;aplayer aplayer-tag-marker meting-tag-marker&quot;</span> <span class="hljs-attr">data-id</span>=<span class="hljs-string">&quot;4895239160&quot;</span> <span class="hljs-attr">data-server</span>=<span class="hljs-string">&quot;netease&quot;</span> <span class="hljs-attr">data-type</span>=<span class="hljs-string">&quot;playlist&quot;</span> <span class="hljs-attr">data-mode</span>=<span class="hljs-string">&quot;random&quot;</span> <span class="hljs-attr">data-autoplay</span>=<span class="hljs-string">&quot;false&quot;</span> <span class="hljs-attr">data-listmaxheight</span>=<span class="hljs-string">&quot;340px&quot;</span> <span class="hljs-attr">data-preload</span>=<span class="hljs-string">&quot;auto&quot;</span> <span class="hljs-attr">data-theme</span>=<span class="hljs-string">&quot;#e3f2f5&quot;</span> <span class="hljs-attr">data-volume</span>=<span class="hljs-string">&quot;0.4&quot;</span> <span class="hljs-attr">mutex</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><div class="tip info simple"><p>其中data-id为歌单ID可以换为你喜欢的歌曲，其他参数见详情页这里不再赘述！</p></div></li></ol>              </div>            </details><h1 id="15-文章页局部-html-代码不渲染"><a href="#15-文章页局部-html-代码不渲染" class="headerlink" title="15.文章页局部 html 代码不渲染"></a>15.文章页局部 html 代码不渲染</h1><details class="folding-tag" ><summary> 点击查看教程 </summary>              <div class='content'>              <p>在你的<code>md</code>文章页中，部分内容不想经过<code>Hexo</code>渲染，则包一层<code>raw</code>标签：<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs MARKDOWN">&#123;% raw %&#125;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span></span>你的一些代码...<span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span>你的一些代码...<span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>&#123;% endraw %&#125;<br></code></pre></td></tr></table></figure><br>那么标签内的代码就不会被框架渲染了~</p>              </div>            </details><h1 id="16-文章H1-H6标题小风车转动效果"><a href="#16-文章H1-H6标题小风车转动效果" class="headerlink" title="16.文章H1~H6标题小风车转动效果"></a>16.文章H1~H6标题小风车转动效果</h1><details class="folding-tag" ><summary> 点击查看教程 </summary>              <div class='content'>              <ol><li><p>修改主题配置文件<code>_config.butterfly.yml</code>文件的<code>beautify</code>配置项：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs YML"><span class="hljs-attr">beautify:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">field:</span> <span class="hljs-string">post</span> <span class="hljs-comment"># site/post</span><br>  <span class="hljs-comment"># title-prefix-icon: &#x27;\f0c1&#x27; 原内容</span><br>  <span class="hljs-attr">title-prefix-icon:</span> <span class="hljs-string">&#x27;\f863&#x27;</span><br>  <span class="hljs-attr">title-prefix-icon-color:</span> <span class="hljs-string">&quot;#F47466&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>在<code>[BlogRoot]\source\css\custom.css</code>中加入以下代码，可以自己调节一下转速:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-comment">/* 文章页H1-H6图标样式效果 */</span><br><span class="hljs-comment">/* 控制风车转动速度 4s那里可以自己调节快慢 */</span><br><span class="hljs-selector-tag">h1</span><span class="hljs-selector-pseudo">::before</span>,<br><span class="hljs-selector-tag">h2</span><span class="hljs-selector-pseudo">::before</span>,<br><span class="hljs-selector-tag">h3</span><span class="hljs-selector-pseudo">::before</span>,<br><span class="hljs-selector-tag">h4</span><span class="hljs-selector-pseudo">::before</span>,<br><span class="hljs-selector-tag">h5</span><span class="hljs-selector-pseudo">::before</span>,<br><span class="hljs-selector-tag">h6</span><span class="hljs-selector-pseudo">::before</span> &#123;<br>  -webkit-<span class="hljs-attribute">animation</span>: ccc <span class="hljs-number">4s</span> linear infinite;<br>  <span class="hljs-attribute">animation</span>: ccc <span class="hljs-number">4s</span> linear infinite;<br>&#125;<br><span class="hljs-comment">/* 控制风车转动方向 -1turn 为逆时针转动，1turn 为顺时针转动，相同数字部分记得统一修改 */</span><br><span class="hljs-keyword">@-webkit-keyframes</span> ccc &#123;<br>  <span class="hljs-number">0%</span> &#123;<br>    -webkit-<span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(<span class="hljs-number">0deg</span>);<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(<span class="hljs-number">0deg</span>);<br>  &#125;<br>  <span class="hljs-selector-tag">to</span> &#123;<br>    -webkit-<span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(-<span class="hljs-number">1turn</span>);<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(-<span class="hljs-number">1turn</span>);<br>  &#125;<br>&#125;<br><span class="hljs-keyword">@keyframes</span> ccc &#123;<br>  <span class="hljs-number">0%</span> &#123;<br>    -webkit-<span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(<span class="hljs-number">0deg</span>);<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(<span class="hljs-number">0deg</span>);<br>  &#125;<br>  <span class="hljs-selector-tag">to</span> &#123;<br>    -webkit-<span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(-<span class="hljs-number">1turn</span>);<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(-<span class="hljs-number">1turn</span>);<br>  &#125;<br>&#125;<br><span class="hljs-comment">/* 设置风车颜色 */</span><br><span class="hljs-selector-id">#content-inner</span><span class="hljs-selector-class">.layout</span> <span class="hljs-selector-tag">h1</span><span class="hljs-selector-pseudo">::before</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#ef50a8</span>;<br>  <span class="hljs-attribute">margin-left</span>: -<span class="hljs-number">1.55rem</span>;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">1.3rem</span>;<br>  <span class="hljs-attribute">margin-top</span>: -<span class="hljs-number">0.23rem</span>;<br>&#125;<br><span class="hljs-selector-id">#content-inner</span><span class="hljs-selector-class">.layout</span> <span class="hljs-selector-tag">h2</span><span class="hljs-selector-pseudo">::before</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#fb7061</span>;<br>  <span class="hljs-attribute">margin-left</span>: -<span class="hljs-number">1.35rem</span>;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">1.1rem</span>;<br>  <span class="hljs-attribute">margin-top</span>: -<span class="hljs-number">0.12rem</span>;<br>&#125;<br><span class="hljs-selector-id">#content-inner</span><span class="hljs-selector-class">.layout</span> <span class="hljs-selector-tag">h3</span><span class="hljs-selector-pseudo">::before</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#ffbf00</span>;<br>  <span class="hljs-attribute">margin-left</span>: -<span class="hljs-number">1.22rem</span>;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">0.95rem</span>;<br>  <span class="hljs-attribute">margin-top</span>: -<span class="hljs-number">0.09rem</span>;<br>&#125;<br><span class="hljs-selector-id">#content-inner</span><span class="hljs-selector-class">.layout</span> <span class="hljs-selector-tag">h4</span><span class="hljs-selector-pseudo">::before</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#a9e000</span>;<br>  <span class="hljs-attribute">margin-left</span>: -<span class="hljs-number">1.05rem</span>;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">0.8rem</span>;<br>  <span class="hljs-attribute">margin-top</span>: -<span class="hljs-number">0.09rem</span>;<br>&#125;<br><span class="hljs-selector-id">#content-inner</span><span class="hljs-selector-class">.layout</span> <span class="hljs-selector-tag">h5</span><span class="hljs-selector-pseudo">::before</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#57c850</span>;<br>  <span class="hljs-attribute">margin-left</span>: -<span class="hljs-number">0.9rem</span>;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">0.7rem</span>;<br>  <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">0rem</span>;<br>&#125;<br><span class="hljs-selector-id">#content-inner</span><span class="hljs-selector-class">.layout</span> <span class="hljs-selector-tag">h6</span><span class="hljs-selector-pseudo">::before</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#5ec1e0</span>;<br>  <span class="hljs-attribute">margin-left</span>: -<span class="hljs-number">0.9rem</span>;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">0.66rem</span>;<br>  <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">0rem</span>;<br>&#125;<br><span class="hljs-comment">/* s设置风车hover动效 6s那里可以自己调节快慢*/</span><br><span class="hljs-selector-id">#content-inner</span><span class="hljs-selector-class">.layout</span> <span class="hljs-selector-tag">h1</span><span class="hljs-selector-pseudo">:hover</span>,<br><span class="hljs-selector-id">#content-inner</span><span class="hljs-selector-class">.layout</span> <span class="hljs-selector-tag">h2</span><span class="hljs-selector-pseudo">:hover</span>,<br><span class="hljs-selector-id">#content-inner</span><span class="hljs-selector-class">.layout</span> <span class="hljs-selector-tag">h3</span><span class="hljs-selector-pseudo">:hover</span>,<br><span class="hljs-selector-id">#content-inner</span><span class="hljs-selector-class">.layout</span> <span class="hljs-selector-tag">h4</span><span class="hljs-selector-pseudo">:hover</span>,<br><span class="hljs-selector-id">#content-inner</span><span class="hljs-selector-class">.layout</span> <span class="hljs-selector-tag">h5</span><span class="hljs-selector-pseudo">:hover</span>,<br><span class="hljs-selector-id">#content-inner</span><span class="hljs-selector-class">.layout</span> <span class="hljs-selector-tag">h6</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-built_in">var</span>(--theme-color);<br>&#125;<br><span class="hljs-selector-id">#content-inner</span><span class="hljs-selector-class">.layout</span> <span class="hljs-selector-tag">h1</span><span class="hljs-selector-pseudo">:hover</span><span class="hljs-selector-pseudo">::before</span>,<br><span class="hljs-selector-id">#content-inner</span><span class="hljs-selector-class">.layout</span> <span class="hljs-selector-tag">h2</span><span class="hljs-selector-pseudo">:hover</span><span class="hljs-selector-pseudo">::before</span>,<br><span class="hljs-selector-id">#content-inner</span><span class="hljs-selector-class">.layout</span> <span class="hljs-selector-tag">h3</span><span class="hljs-selector-pseudo">:hover</span><span class="hljs-selector-pseudo">::before</span>,<br><span class="hljs-selector-id">#content-inner</span><span class="hljs-selector-class">.layout</span> <span class="hljs-selector-tag">h4</span><span class="hljs-selector-pseudo">:hover</span><span class="hljs-selector-pseudo">::before</span>,<br><span class="hljs-selector-id">#content-inner</span><span class="hljs-selector-class">.layout</span> <span class="hljs-selector-tag">h5</span><span class="hljs-selector-pseudo">:hover</span><span class="hljs-selector-pseudo">::before</span>,<br><span class="hljs-selector-id">#content-inner</span><span class="hljs-selector-class">.layout</span> <span class="hljs-selector-tag">h6</span><span class="hljs-selector-pseudo">:hover</span><span class="hljs-selector-pseudo">::before</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-built_in">var</span>(--theme-color);<br>  -webkit-<span class="hljs-attribute">animation</span>: ccc <span class="hljs-number">6s</span> linear infinite;<br>  <span class="hljs-attribute">animation</span>: ccc <span class="hljs-number">6s</span> linear infinite;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>在主题配置文件<code>_config.butterfly.yml</code>的<code>inject</code>配置项进行引入（不再赘述）。</p></li></ol>              </div>            </details><h1 id="17-霓虹灯光效"><a href="#17-霓虹灯光效" class="headerlink" title="17.霓虹灯光效"></a>17.霓虹灯光效</h1><details class="folding-tag" ><summary> 点击查看教程 </summary>              <div class='content'>              <p>此教程会有两处地方有霓虹灯效果：一个是大标题和个人信息的动态霓虹灯，默认周期为1200ms；另外的是菜单栏的小字有夜光效果，为你的博客增添几分赛博朋克风~</p><ol><li>首先在自定义的样式文件<code>[BlogRoot]\source\css\custom.css</code>中引入以下代码，这部分代码是菜单栏文字有夜光效果的，变量部分<code>var(--theme-color)</code>可以换为自己喜欢的颜色，例如紫色<code>rgb(179, 71, 241)</code>：</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-comment">/* 夜间模式菜单栏发光字 */</span><br><span class="hljs-selector-attr">[data-theme=<span class="hljs-string">&quot;dark&quot;</span>]</span> <span class="hljs-selector-id">#nav</span> <span class="hljs-selector-class">.site-page</span>,<br><span class="hljs-selector-attr">[data-theme=<span class="hljs-string">&quot;dark&quot;</span>]</span> <span class="hljs-selector-id">#nav</span> <span class="hljs-selector-class">.menus_items</span> <span class="hljs-selector-class">.menus_item</span> <span class="hljs-selector-class">.menus_item_child</span> <span class="hljs-selector-tag">li</span> <span class="hljs-selector-tag">a</span> &#123;<br>  <span class="hljs-attribute">text-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">2px</span> <span class="hljs-built_in">var</span>(--theme-color) <span class="hljs-meta">!important</span>;<br>&#125;<br><br><span class="hljs-comment">/* 手机端适配 */</span><br><span class="hljs-selector-attr">[data-theme=<span class="hljs-string">&quot;dark&quot;</span>]</span> <span class="hljs-selector-id">#sidebar</span> <span class="hljs-selector-id">#sidebar-menus</span> <span class="hljs-selector-class">.menus_items</span> <span class="hljs-selector-class">.site-page</span> &#123;<br>  <span class="hljs-attribute">text-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">2px</span> <span class="hljs-built_in">var</span>(--theme-color) <span class="hljs-meta">!important</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li><p>新建文件<code>[BlogRoot]\source\js\light.js</code>并写入以下代码，本质就是计时器，大家可以根据自己的喜好调节闪烁周期，默认为<code>1200ms</code>：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs YML"><span class="hljs-attr">inject:</span><br>  <span class="hljs-attr">head:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&lt;link</span> <span class="hljs-string">rel=&quot;stylesheet&quot;</span> <span class="hljs-string">href=&quot;/css/custom.css&quot;</span> <span class="hljs-string">media=&quot;defer&quot;</span> <span class="hljs-string">onload=&quot;this.media=&#x27;all&#x27;&quot;&gt;</span><br>  <span class="hljs-attr">bottom:</span> <br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&lt;script</span> <span class="hljs-string">defer</span> <span class="hljs-string">src=&quot;/js/light.js&quot;&gt;&lt;/script&gt;</span> <span class="hljs-comment"># 霓虹灯(必须defer否则有时候会不生效)</span><br></code></pre></td></tr></table></figure></li><li><p>在主题配置文件<code>_config.butterfly.yml</code>引入以上两个文件，要注意的是，js文件这里必须为<code>defer</code>，不能为<code>ansyc</code>，保证脚本会延迟到整个页面都解析完后再执行，此时才有对应的元素进行操作：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs YML"><span class="hljs-attr">inject:</span><br>  <span class="hljs-attr">head:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&lt;link</span> <span class="hljs-string">rel=&quot;stylesheet&quot;</span> <span class="hljs-string">href=&quot;/css/custom.css&quot;</span> <span class="hljs-string">media=&quot;defer&quot;</span> <span class="hljs-string">onload=&quot;this.media=&#x27;all&#x27;&quot;&gt;</span><br>  <span class="hljs-attr">bottom:</span> <br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&lt;script</span> <span class="hljs-string">defer</span> <span class="hljs-string">src=&quot;/js/light.js&quot;&gt;&lt;/script&gt;</span> <span class="hljs-comment"># 霓虹灯(必须defer否则有时候会不生效)</span><br></code></pre></td></tr></table></figure></li><li><p>重启项目即可看到效果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs BASH">hexo cl; hexo s<br></code></pre></td></tr></table></figure></li></ol>              </div>            </details>]]></content>
      
      
      <categories>
          
          <category> 魔改 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 魔改 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>原生javascript实现call、apply、bind</title>
      <link href="/archives/cdbf72d3.html"/>
      <url>/archives/cdbf72d3.html</url>
      
        <content type="html"><![CDATA[<h1 id="一-前言"><a href="#一-前言" class="headerlink" title="一.前言"></a>一.前言</h1><p><code>call()</code>、<code>apply()</code>、<code>bind()</code>三个方法都可以用来改变this的指向（也可以理解未方法中注入所需对象的属性和方法）想要更深入地了解<code>call()</code>、<code>apply()</code>、<code>bind()</code>方法三者的区别，使用javascript手写这三个方法是最有效也是最便捷的。</p><p>但是想要手写这三个方法就必须要了解他们是如何使用的</p><h1 id="二-call-、apply-、bind-的使用方法"><a href="#二-call-、apply-、bind-的使用方法" class="headerlink" title="二.call()、apply()、bind()的使用方法"></a>二.call()、apply()、bind()的使用方法</h1><h2 id="1-call-方法"><a href="#1-call-方法" class="headerlink" title="1.call()方法"></a>1.call()方法</h2><p>先来看一下<code>call</code>方法的基本使用</p><ul><li><p>改变this指向并添加参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">function</span> <span class="hljs-title function_">person</span>(<span class="hljs-params">age, gender</span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">gender</span> = gender<br>  <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span><br>&#125;<br><br><span class="hljs-keyword">let</span> zhangsan = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;张三&#x27;</span>,<br>&#125;<br><br><span class="hljs-keyword">let</span> newPerson = person.<span class="hljs-title function_">call</span>(zhangsan, <span class="hljs-number">20</span>, <span class="hljs-string">&#x27;男&#x27;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(newPerson); <span class="hljs-comment">//&#123;name: &#x27;张三&#x27;, age: 20, gender: &#x27;男&#x27;&#125;</span><br></code></pre></td></tr></table></figure></li></ul><div class="note warning simple"><p><span class='p red h4'>注意：</span>1.上述代码中如果直接调用<code>person()</code>，此时因为<code>person()</code>方法是在全局作用域下执行的，传入的参数<code>age</code>和<code>gender</code>会添加到全局对象window。如果在<span class='p red'>严格模式</span>下,<code>this</code>的值将会是<code>undefined</code></p></div><ul><li><p><code>call</code>方法调用父构造函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Product</span>(<span class="hljs-params">name, price</span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">price</span> = price<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>);<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">price</span>);<br>&#125;<br>  <br><span class="hljs-comment">// 调用父构造函数的call方法来实现继承</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Food</span>(<span class="hljs-params">name, price</span>) &#123;<br>  <span class="hljs-title class_">Product</span>.<span class="hljs-title function_">call</span>(<span class="hljs-literal">null</span>, name, price);<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">category</span> = <span class="hljs-string">&#x27;food&#x27;</span>;<br>&#125;<br>  <br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Toy</span>(<span class="hljs-params">name, price</span>) &#123;<br>  <span class="hljs-title class_">Product</span>.<span class="hljs-title function_">call</span>(<span class="hljs-literal">null</span>, name, price);<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">category</span> = <span class="hljs-string">&#x27;toy&#x27;</span>;<br>&#125;<br>  <br><span class="hljs-keyword">var</span> cheese = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Food</span>(<span class="hljs-string">&#x27;feta&#x27;</span>, <span class="hljs-number">5</span>);<br><span class="hljs-keyword">var</span> fun = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Toy</span>(<span class="hljs-string">&#x27;robot&#x27;</span>, <span class="hljs-number">40</span>);<br></code></pre></td></tr></table></figure></li><li><p><code>call</code>方法调用匿名函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> animals = [<br>  &#123; <span class="hljs-attr">species</span>: <span class="hljs-string">&#x27;Lion&#x27;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;King&#x27;</span> &#125;,<br>  &#123; <span class="hljs-attr">species</span>: <span class="hljs-string">&#x27;Whale&#x27;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Fail&#x27;</span> &#125;<br>];<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; animals.<span class="hljs-property">length</span>; i++) &#123;<br>  (<span class="hljs-keyword">function</span> (<span class="hljs-params">i</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">print</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;#&#x27;</span> + i + <span class="hljs-string">&#x27; &#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">species</span> + <span class="hljs-string">&#x27;: &#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>);<br>    &#125;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">print</span>();<br>  &#125;).<span class="hljs-title function_">call</span>(animals[i], i); <span class="hljs-comment">//call调用匿名函数</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><code>call</code>方法调用函数并且指定上下文的<code>this</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> obj = &#123;<br>  <span class="hljs-attr">animal</span>: <span class="hljs-string">&#x27;cats&#x27;</span>, <span class="hljs-attr">sleepDuration</span>: <span class="hljs-string">&#x27;12 and 16 hours&#x27;</span><br>&#125;;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">greet</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">var</span> reply = [<span class="hljs-variable language_">this</span>.<span class="hljs-property">animal</span>, <span class="hljs-string">&#x27;typically sleep between&#x27;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">sleepDuration</span>].<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27; &#x27;</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reply);<br>&#125;<br><br>greet.<span class="hljs-title function_">call</span>(obj);  <span class="hljs-comment">//&quot;cats typically sleep between 12 and 16 hours&quot;</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="2-applay-方法"><a href="#2-applay-方法" class="headerlink" title="2.applay()方法"></a>2.applay()方法</h2><p><code>apply()</code>与 <code>call()</code>非常相似，不同之处在于提供参数的方式。<code>apply</code> 使用参数数组而不是一组参数列表。<code>apply</code>可以使用数组字面量<code>（array literal）</code>，如 <code>fun.apply(this, [&#39;eat&#39;, &#39;bananas&#39;])</code>，或数组对象， 如 <code>fun.apply(this, new Array(&#39;eat&#39;, &#39;bananas&#39;))</code>。</p><ul><li><p>apply方法调用一个具有给定this值的函数，以及以一个数组的形式提供参数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> array = [<span class="hljs-string">&#x27;张三&#x27;</span>, <span class="hljs-string">&#x27;李四&#x27;</span>, <span class="hljs-string">&#x27;王五&#x27;</span>];<br><span class="hljs-keyword">var</span> elements = [<span class="hljs-string">&#x27;老六&#x27;</span>, <span class="hljs-string">&#x27;老七&#x27;</span>, <span class="hljs-string">&#x27;老八&#x27;</span>];<br>array.<span class="hljs-property">push</span>.<span class="hljs-title function_">apply</span>(array, elements);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(array);  <span class="hljs-comment">//[&#x27;张三&#x27;,&#x27;李四&#x27;,&#x27;王五&#x27;,&#x27;老六&#x27;,&#x27;老七&#x27;,&#x27;老八&#x27;]</span><br></code></pre></td></tr></table></figure></li><li><p>对于一些需要写循环以遍历数组各项的需求，我们可以用apply完成以避免循环。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-comment">//找出数组中最大值和最小值</span><br><span class="hljs-keyword">var</span> numbers = [<span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">21</span>, <span class="hljs-number">3</span>, <span class="hljs-number">7</span>];<br><span class="hljs-comment">//使用Math.min和Math.max以及apply函数时的代码</span><br><span class="hljs-keyword">var</span> max = <span class="hljs-title class_">Math</span>.<span class="hljs-property">max</span>.<span class="hljs-title function_">apply</span>(<span class="hljs-literal">null</span>, numbers);<br><span class="hljs-keyword">var</span> min = <span class="hljs-title class_">Math</span>.<span class="hljs-property">min</span>.<span class="hljs-title function_">apply</span>(<span class="hljs-literal">null</span>, numbers);<br></code></pre></td></tr></table></figure></li></ul><div class="tip warning"><p>上边这种调用apply的方法，有超出JavaScript引擎参数长度上限的风险。<br>如果我们的参数数组非常大，推荐使用下边这种混合策略：<span class='p blue h4'>将数组切块后循环传入目标方法</span></p></div>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs JS">  <span class="hljs-keyword">function</span> <span class="hljs-title function_">minOfArray</span>(<span class="hljs-params">arr</span>) &#123;<br>  <span class="hljs-keyword">var</span> min = <span class="hljs-title class_">Infinity</span>;<br>  <span class="hljs-keyword">var</span> <span class="hljs-variable constant_">QUANTUM</span> = <span class="hljs-number">32768</span>;<br><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>, len = arr.<span class="hljs-property">length</span>; i &lt; len; i += <span class="hljs-variable constant_">QUANTUM</span>) &#123;<br>    <span class="hljs-comment">// Math.min(i + QUANTUM, len)数组长度不能超过上面定义的长度32768</span><br>    <span class="hljs-keyword">var</span> arrmin = <span class="hljs-title class_">Math</span>.<span class="hljs-property">min</span>.<span class="hljs-title function_">apply</span>(<span class="hljs-literal">null</span>, arr.<span class="hljs-title function_">slice</span>(i, <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">min</span>(i + <span class="hljs-variable constant_">QUANTUM</span>, len)));<br>    min = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">min</span>(arrmin, min);<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> min;<br>&#125;<br><br><span class="hljs-keyword">var</span> min = <span class="hljs-title function_">minOfArray</span>([<span class="hljs-number">0</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>, <span class="hljs-number">2</span>]);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(min); <span class="hljs-comment">//0</span><br></code></pre></td></tr></table></figure><h2 id="3-bind-方法"><a href="#3-bind-方法" class="headerlink" title="3.bind()方法"></a>3.bind()方法</h2><p><code>bind()</code>函数会创建一个新的绑定函数，这个绑定函数包装了原函数的对象。调用绑定函数通常会执行包装函数。<br>绑定函数内部属性：</p><ul><li>包装的函数对象</li><li>在调用包装函数时始终作为this传递的值</li><li>在对包装函数做任何调用时都会优先用列表元素填充参数列表。</li></ul><ul><li>用bind方法创建一个新的函数解决this指向问题<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span> = <span class="hljs-number">9</span>; <span class="hljs-comment">//this指向全局的window对象</span><br><span class="hljs-keyword">var</span> <span class="hljs-variable language_">module</span> = &#123;<br>  <span class="hljs-attr">x</span>: <span class="hljs-number">81</span>,<br>  <span class="hljs-attr">getX</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123; <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span>; &#125;<br>&#125;;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">module</span>.<span class="hljs-title function_">getX</span>()); <span class="hljs-comment">//81</span><br><br><span class="hljs-keyword">var</span> retrieveX = <span class="hljs-variable language_">module</span>.<span class="hljs-property">getX</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">retrieveX</span>()); <span class="hljs-comment">//9,因为函数是在全局作用域中调用的</span><br><br><span class="hljs-comment">// 创建一个新函数，把this绑定到module对象</span><br><span class="hljs-comment">// 不要将全局变量 x 与 module 的属性 x 混淆</span><br><span class="hljs-keyword">var</span> boundGetX = retrieveX.<span class="hljs-title function_">bind</span>(<span class="hljs-variable language_">module</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">boundGetX</span>()); <span class="hljs-comment">//81</span><br></code></pre></td></tr></table></figure></li></ul><p class='p red h4'>bind传递参数问题：</p><p>在通过bind改变this指向的时候所传入的参数会拼接在调用返回函数所传参数之前，多余参数不起作用。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> name = <span class="hljs-string">&#x27;window&#x27;</span>;<br><span class="hljs-keyword">var</span> newThis = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;newThis&#x27;</span> &#125;;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">showName</span>(<span class="hljs-params">info1, info2</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>, info1, info2);<br>&#125;<br><span class="hljs-title function_">showName</span>(<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>); <span class="hljs-comment">//输出：window a b</span><br><br><span class="hljs-keyword">var</span> newShowName = showName.<span class="hljs-title function_">bind</span>(newThis, <span class="hljs-string">&#x27;hello&#x27;</span>);<br><span class="hljs-comment">//在通过bind改变this指向的时候只传了“hello”一个参数，</span><br><span class="hljs-comment">//在调用newShowName这个返回参数的时候，bind传参拼接在其前</span><br><span class="hljs-title function_">newShowName</span>(<span class="hljs-string">&#x27;world&#x27;</span>); <span class="hljs-comment">//输出：newThis hello world</span><br></code></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> name = <span class="hljs-string">&#x27;window&#x27;</span>;<br><span class="hljs-keyword">var</span> newThis = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;newThis&#x27;</span> &#125;;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">showName</span>(<span class="hljs-params">info1, info2</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>, info1, info2);<br>&#125;<br><span class="hljs-title function_">showName</span>(<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>); <span class="hljs-comment">//输出：window a b</span><br><br><span class="hljs-keyword">var</span> newShowName = showName.<span class="hljs-title function_">bind</span>(newThis, <span class="hljs-string">&#x27;hello&#x27;</span>);<br><span class="hljs-comment">//在通过bind改变this指向的时候只传了“hello”一个参数，</span><br><span class="hljs-comment">//在调用newShowName这个返回参数的时候，bind传参拼接在其前，</span><br><span class="hljs-comment">//这时newShowName的参数为“hello”，“a”，“world”</span><br><span class="hljs-comment">//而该函数只需要两个参数，则第三个参数被忽略</span><br> <span class="hljs-title function_">newShowName</span>(<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;world&#x27;</span>); <span class="hljs-comment">//输出：newThis hello a</span><br></code></pre></td></tr></table></figure><div class="tip "><p>bind无法改变构造函数的this指向</p></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> name = <span class="hljs-string">&#x27;window&#x27;</span>;<br><span class="hljs-keyword">var</span> newThis = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;newThis&#x27;</span> &#125;;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">showName</span>(<span class="hljs-params">info1, info2</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>, info1, info2);<br>&#125;<br><span class="hljs-title function_">showName</span>(<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>); <span class="hljs-comment">//输出：window a b</span><br><br><span class="hljs-comment">// 通过bind改变this指向</span><br><span class="hljs-keyword">var</span> newShowName = showName.<span class="hljs-title function_">bind</span>(newThis, <span class="hljs-string">&#x27;hello&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>);<br><span class="hljs-title function_">newShowName</span>(<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;world&#x27;</span>); <span class="hljs-comment">//输出：newThis hello world</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">new</span> <span class="hljs-title function_">newShowName</span>().<span class="hljs-property">constructor</span>); <span class="hljs-comment">//输出：showName函数体</span><br></code></pre></td></tr></table></figure><h1 id="三、使用原生javascript实现call-、apply-、bind"><a href="#三、使用原生javascript实现call-、apply-、bind" class="headerlink" title="三、使用原生javascript实现call()、apply()、bind()"></a>三、使用原生javascript实现call()、apply()、bind()</h1><h2 id="1-call-方法实现"><a href="#1-call-方法实现" class="headerlink" title="1.call()方法实现"></a>1.call()方法实现</h2><div class="tabs" id="call"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#call-1">ES6之前</button></li><li class="tab"><button type="button" data-href="#call-2">ES6之后</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="call-1"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">function</span> <span class="hljs-title function_">person</span>(<span class="hljs-params">a, b, c, d</span>) &#123;<br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>,<br>    <span class="hljs-attr">a</span>: a,<br>    <span class="hljs-attr">b</span>: b,<br>    <span class="hljs-attr">c</span>: c,<br>    <span class="hljs-attr">d</span>: d<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">let</span> zhangsan = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;张三&#x27;</span><br>&#125;<br><br><span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">newCall</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">obj</span>) &#123;<br>  <span class="hljs-comment">// 如果对象不存在则指向window</span><br>  <span class="hljs-keyword">var</span> obj = obj || <span class="hljs-variable language_">window</span><br>  <span class="hljs-comment">// 此时this的指向是person函数，因为是person函数调用了newCall函数，</span><br>  <span class="hljs-comment">// 我们将this保存下来添加到obj的属性中,即将person方法添加到zhangsan对象中,用zhangsan对象执行该函数，此时函数的this就指向zhangsan对象</span><br>  obj.<span class="hljs-property">p</span> = <span class="hljs-variable language_">this</span><br>  <span class="hljs-comment">// 注意：arguments的第一个参数是zhangsan对象,因此我们要将其排除</span><br>  <span class="hljs-keyword">let</span> newArguments = []<br>  <span class="hljs-comment">// es5方式实现，要使用eval()</span><br>  <span class="hljs-comment">// 使用eval调用obj.p()函数,里面的参数需要是[&#x27;arguments[1]&#x27;, &#x27;arguments[2]&#x27;, &#x27;arguments[3]&#x27;, &#x27;arguments[4]&#x27;]</span><br>  <span class="hljs-comment">// 因此for循环里面我们需要用字符串拼接</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-variable language_">arguments</span>.<span class="hljs-property">length</span>; i++) &#123;<br>    newArguments.<span class="hljs-title function_">push</span>(<span class="hljs-string">&#x27;arguments[&#x27;</span> + i + <span class="hljs-string">&#x27;]&#x27;</span>)<br>  &#125;<br>  <span class="hljs-comment">// 将eval执行的结果保存并return出去</span><br>  <span class="hljs-keyword">let</span> result = <span class="hljs-built_in">eval</span>(<span class="hljs-string">&#x27;obj.p(&#x27;</span> + newArguments + <span class="hljs-string">&#x27;)&#x27;</span>)<br>  <span class="hljs-comment">// 此处删除obj.p是因为我们不能修改原来的对象</span><br>  <span class="hljs-keyword">delete</span> obj.<span class="hljs-property">p</span><br>  <span class="hljs-keyword">return</span> result<br>&#125;<br><br><span class="hljs-keyword">var</span> result = person.<span class="hljs-title function_">newCall</span>(zhangsan, <span class="hljs-string">&#x27;点赞&#x27;</span>, <span class="hljs-string">&#x27;关注&#x27;</span>, <span class="hljs-string">&#x27;转发&#x27;</span>, <span class="hljs-string">&#x27;收藏&#x27;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result); <span class="hljs-comment">//&#123;name: &#x27;张三&#x27;, a: &#x27;点赞&#x27;, b: &#x27;关注&#x27;, c: &#x27;转发&#x27;, d: &#x27;收藏&#x27;&#125;</span><br></code></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="call-2"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">function</span> <span class="hljs-title function_">person</span>(<span class="hljs-params">a, b, c, d</span>) &#123;<br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>,<br>    <span class="hljs-attr">a</span>: a,<br>    <span class="hljs-attr">b</span>: b,<br>    <span class="hljs-attr">c</span>: c,<br>    <span class="hljs-attr">d</span>: d<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">let</span> zhangsan = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;张三&#x27;</span><br>&#125;<br><br><span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">newCall</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">obj</span>) &#123;<br>  <span class="hljs-comment">// 如果对象不存在则指向window</span><br>  <span class="hljs-keyword">var</span> obj = obj || <span class="hljs-variable language_">window</span><br>  <span class="hljs-comment">// 此时this的指向是person函数，因为是person函数调用了newCall函数，</span><br>  <span class="hljs-comment">// 我们将this保存下来添加到obj的属性中,即将person方法添加到zhangsan对象中,用zhangsan对象执行该函数，此时函数的this就指向zhangsan对象</span><br>  obj.<span class="hljs-property">p</span> = <span class="hljs-variable language_">this</span><br>  <span class="hljs-comment">// 注意：arguments的第一个参数是zhangsan对象,因此我们要将其排除</span><br>  <span class="hljs-keyword">let</span> newArguments = []<br>  <span class="hljs-comment">// es6方式实现，要使用...运算符</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-variable language_">arguments</span>.<span class="hljs-property">length</span>; i++) &#123;<br>    newArguments.<span class="hljs-title function_">push</span>(<span class="hljs-variable language_">arguments</span>[i])<br>  &#125;<br>  <span class="hljs-comment">// 将执行的结果保存并return出去</span><br>  <span class="hljs-keyword">let</span> result = obj.<span class="hljs-title function_">p</span>(...newArguments)<br>  <span class="hljs-comment">// 此处删除obj.p是因为我们不能修改原来的对象</span><br>  <span class="hljs-keyword">delete</span> obj.<span class="hljs-property">p</span><br>  <span class="hljs-keyword">return</span> result<br>&#125;<br><br><span class="hljs-keyword">var</span> result = person.<span class="hljs-title function_">newCall</span>(zhangsan, <span class="hljs-string">&#x27;点赞&#x27;</span>, <span class="hljs-string">&#x27;关注&#x27;</span>, <span class="hljs-string">&#x27;转发&#x27;</span>, <span class="hljs-string">&#x27;收藏&#x27;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result); <span class="hljs-comment">//&#123;name: &#x27;张三&#x27;, a: &#x27;点赞&#x27;, b: &#x27;关注&#x27;, c: &#x27;转发&#x27;, d: &#x27;收藏&#x27;&#125;</span><br></code></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-apply-方法实现"><a href="#2-apply-方法实现" class="headerlink" title="2.apply()方法实现"></a>2.apply()方法实现</h2><p>由于<code>apply()</code>方法和<code>call()</code>很接近，我们仍然可以使用<code>call</code>方法的逻辑，唯一不同的是<code>apply</code>方法传入的参数是数组的形式，要么有第二个参数，要么没有，因此<code>参数不是无限的</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">function</span> <span class="hljs-title function_">person</span>(<span class="hljs-params">a, b, c, d</span>) &#123;<br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>,<br>    <span class="hljs-attr">a</span>: a,<br>    <span class="hljs-attr">b</span>: b,<br>    <span class="hljs-attr">c</span>: c,<br>    <span class="hljs-attr">d</span>: d<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">let</span> zhangsan = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;张三&#x27;</span><br>&#125;<br><br><span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">newApply</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">obj, arr</span>) &#123;<br>  <span class="hljs-comment">// 如果对象不存在则指向window</span><br>  <span class="hljs-keyword">var</span> obj = obj || <span class="hljs-variable language_">window</span><br>  <span class="hljs-keyword">let</span> result = <span class="hljs-literal">null</span><br>  <span class="hljs-comment">// 此时this的指向是person函数，因为是person函数调用了newCall函数，</span><br>  <span class="hljs-comment">// 我们将this保存下来添加到obj的属性中,即将person方法添加到zhangsan对象中,用zhangsan对象执行该函数，此时函数的this就指向zhangsan对象</span><br>  obj.<span class="hljs-property">p</span> = <span class="hljs-variable language_">this</span><br>  <span class="hljs-keyword">if</span> (!arr) &#123;<br>    result = obj.<span class="hljs-title function_">p</span>()<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">let</span> newArguments = []<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-variable language_">arguments</span>.<span class="hljs-property">length</span>; i++) &#123;<br>      newArguments.<span class="hljs-title function_">push</span>(<span class="hljs-string">&#x27;arguments[&#x27;</span> + i + <span class="hljs-string">&#x27;]&#x27;</span>)<br>    &#125;<br>    result = <span class="hljs-built_in">eval</span>(<span class="hljs-string">&#x27;obj.p(&#x27;</span> + newArguments + <span class="hljs-string">&#x27;)&#x27;</span>)<br>  &#125;<br><br>  <span class="hljs-keyword">delete</span> obj.<span class="hljs-property">p</span><br>  <span class="hljs-keyword">return</span> result<br>&#125;<br><br><span class="hljs-keyword">var</span> result = person.<span class="hljs-title function_">newApply</span>(zhangsan, <span class="hljs-string">&#x27;点赞&#x27;</span>, <span class="hljs-string">&#x27;关注&#x27;</span>, <span class="hljs-string">&#x27;转发&#x27;</span>, <span class="hljs-string">&#x27;收藏&#x27;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result); <span class="hljs-comment">//&#123;name: &#x27;张三&#x27;, a: &#x27;点赞&#x27;, b: &#x27;关注&#x27;, c: &#x27;转发&#x27;, d: &#x27;收藏&#x27;&#125;</span><br></code></pre></td></tr></table></figure></p><h2 id="3-bind-方法实现"><a href="#3-bind-方法实现" class="headerlink" title="3.bind()方法实现"></a>3.bind()方法实现</h2><p>bind方法和call、apply方法不同，bind会返回一个函数，函数this会指向我们所传入的对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs Js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">person</span>(<span class="hljs-params">a, b, c</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>);<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a, b, c);<br>&#125;<br>person.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">collection</span> = <span class="hljs-string">&#x27;收藏&#x27;</span><br><br><span class="hljs-keyword">const</span> zhangsan = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;张三&#x27;</span> &#125;<br><br><span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">newBind</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">obj</span>) &#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> <span class="hljs-variable language_">this</span> !== <span class="hljs-string">&#x27;function&#x27;</span>) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;数据类型出错&#x27;</span>)<br>  &#125;<br>  <span class="hljs-comment">// 保存this指向，在call方法中也提及到此处this指的是person方法</span><br>  <span class="hljs-keyword">let</span> that = <span class="hljs-variable language_">this</span><br>  <span class="hljs-comment">// 将第一个括号的参数保存为数组</span><br>  arr1 = <span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">slice</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">arguments</span>, <span class="hljs-number">1</span>)<br>  o = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123; &#125;<br>  newFn = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// 将第二个括号的参数保存为数组</span><br>    arr2 = <span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">slice</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">arguments</span>)<br>    <span class="hljs-comment">// 将两个括号的参数合并</span><br>    arrSum = arr1.<span class="hljs-title function_">concat</span>(arr2)<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span> <span class="hljs-keyword">instanceof</span> o) &#123;<br>      that.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, arrSum)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      that.<span class="hljs-title function_">apply</span>(obj, arrSum)<br>    &#125;<br>  &#125;<br>  o.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = that.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span><br>  newFn.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-keyword">new</span> o<br>  <span class="hljs-keyword">return</span> newFn<br>&#125;<br><br><span class="hljs-comment">// const fn = person.newBind(zhangsan, &#x27;点赞&#x27;, &#x27;关注&#x27;)(&#x27;hello&#x27;)</span><br><br><span class="hljs-keyword">let</span> bibi = person.<span class="hljs-title function_">newBind</span>(zhangsan, <span class="hljs-string">&#x27;点赞&#x27;</span>, <span class="hljs-string">&#x27;关注&#x27;</span>)<br><span class="hljs-keyword">let</span> b = <span class="hljs-keyword">new</span> <span class="hljs-title function_">bibi</span>(<span class="hljs-string">&#x27;充电&#x27;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(b.<span class="hljs-property">collection</span>);<br></code></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://blog.csdn.net/qq_43000315/article/details/125360096">call ,apply和bind方法 详解</a></li><li><a href="https://www.bilibili.com/video/BV1m54y1q7hc/?spm_id_from=333.337.search-card.all.click&amp;vd_source=31b79a871574ab39ea54d9c74b90c2ff">原生JavaScript实现call、apply和bind</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通俗易懂的Promise知识点总结</title>
      <link href="/archives/d860876d.html"/>
      <url>/archives/d860876d.html</url>
      
        <content type="html"><![CDATA[<h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><p><code>Promise</code>相信大家都十分了解，对其运用想必也是相当熟悉，但是你真的了解<code>Promise</code>吗，你对里面的细节又真正了解多少呢，本文就带大家详细又彻底地了解<code>Promise</code>。</p><p><code>Promise</code>的诞生最早是用来解决回调地狱的问题，那么什么是回调地狱呢？我们来简单看一个例子，<wavy>文件的读取,当我们的文件需要按顺序读取时，可能就会出现以下情况</wavy><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>)<br><br>fs.<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;./1.txt&#x27;</span>,<span class="hljs-string">&#x27;utf8&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">err,result1</span>) =&gt;</span>&#123;<br>  <span class="hljs-keyword">if</span>(err) <span class="hljs-keyword">throw</span> err <br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result1);<br>  fs.<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;./2.txt&#x27;</span>,<span class="hljs-string">&#x27;utf8&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">err,result2</span>) =&gt;</span>&#123;<br>    <span class="hljs-keyword">if</span>(err) <span class="hljs-keyword">throw</span> err<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result2);<br>    fs.<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;./3.txt&#x27;</span>,<span class="hljs-string">&#x27;utf8&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">err,result3</span>) =&gt;</span>&#123;<br>      <span class="hljs-keyword">if</span>(err) <span class="hljs-keyword">throw</span> err<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result3);<br>    &#125;)<br>  &#125;)<br>&#125;);<br></code></pre></td></tr></table></figure><br>此时我们可以看到三个文件的读取顺序，<code>3.txt</code>要等到<code>2.txt</code>和<code>1.txt</code>的文件读取完后才能读取，<code>2.txt</code>要等到<code>1.txt</code>读取完才能读取。<br><div class="hide-block"><button type="button" class="hide-button" style="background-color: blue white;">点击查看执行结果    </button><div class="hide-content"><p><img src="https://cdn.staticaly.com/gh/Rhh-Z/PicBed@main/note/p8.png" alt="p8"></p></div></div></p><p>上述代码可能看着无法理解这怎么算是回调地狱，但是当我们要读取所要的文件数量需要十几二十个甚至上百个的时候，我们再来看一下代码的情况<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>)<br><br>fs.<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;./1.txt&#x27;</span>,<span class="hljs-string">&#x27;utf8&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">err,result1</span>) =&gt;</span>&#123;<br>    <span class="hljs-keyword">if</span>(err) <span class="hljs-keyword">throw</span> err<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result1);<br>    fs.<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;./2.txt&#x27;</span>,<span class="hljs-string">&#x27;utf8&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">err,result2</span>) =&gt;</span>&#123;<br>        <span class="hljs-keyword">if</span>(err) <span class="hljs-keyword">throw</span> err<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result2);<br>        fs.<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;./3.txt&#x27;</span>,<span class="hljs-string">&#x27;utf8&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">err,result3</span>) =&gt;</span>&#123;<br>            <span class="hljs-keyword">if</span>(err) <span class="hljs-keyword">throw</span> err<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result3);<br>            fs.<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;./4.txt&#x27;</span>,<span class="hljs-string">&#x27;utf8&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">err,result4</span>) =&gt;</span>&#123;<br>                <span class="hljs-keyword">if</span>(err) <span class="hljs-keyword">throw</span> err<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result4);<br>                fs.<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;./5.txt&#x27;</span>,<span class="hljs-string">&#x27;utf8&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">err,result5</span>) =&gt;</span>&#123;<br>                    <span class="hljs-keyword">if</span>(err) <span class="hljs-keyword">throw</span> err<br>                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result5);<br>                    fs.<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;./6.txt&#x27;</span>,<span class="hljs-string">&#x27;utf8&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">err,result6</span>) =&gt;</span>&#123;<br>                        <span class="hljs-keyword">if</span>(err) <span class="hljs-keyword">throw</span> err<br>                        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result6);<br>                        fs.<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;./7.txt&#x27;</span>,<span class="hljs-string">&#x27;utf8&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">err,result7</span>) =&gt;</span>&#123;<br>                            <span class="hljs-keyword">if</span>(err) <span class="hljs-keyword">throw</span> err<br>                            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result7);<br>                            fs.<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;./8.txt&#x27;</span>,<span class="hljs-string">&#x27;utf8&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">err,result8</span>) =&gt;</span>&#123;<br>                                <span class="hljs-keyword">if</span>(err) <span class="hljs-keyword">throw</span> err<br>                                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result8);<br>                                fs.<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;./9.txt&#x27;</span>,<span class="hljs-string">&#x27;utf8&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">err,result9</span>) =&gt;</span>&#123;<br>                                    <span class="hljs-keyword">if</span>(err) <span class="hljs-keyword">throw</span> err<br>                                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result9);<br>                                    fs.<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;./10.txt&#x27;</span>,<span class="hljs-string">&#x27;utf8&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">err,result10</span>) =&gt;</span>&#123;<br>                                        <span class="hljs-keyword">if</span>(err) <span class="hljs-keyword">throw</span> err<br>                                        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result10);<br>                                    &#125;)<br>                                &#125;)<br>                            &#125;)<br>                        &#125;)<br>                    &#125;)<br>                &#125;)<br>            &#125;<br>        &#125;)<br>    &#125;)<br>&#125;);<br></code></pre></td></tr></table></figure><br>这里我只举了十个例子，此时我们可以看到我们的代码会无限地向右缩进，已经导致我们代码的可阅读性变得非常差，代码也不易于维护</p><p>那么怎么解决回调地狱呢？此时你可能会想到使用<code>thenFs</code>异步读取文件<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">import</span> thenFs <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;then-fs&quot;</span>;<br><br><span class="hljs-comment">// 分开调用 不保证执行顺序，谁先执行完谁先打印结果</span><br>thenFs.<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;../source/1.md&#x27;</span>, <span class="hljs-string">&#x27;utf8&#x27;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">result</span>) =&gt;</span> &#123; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result); &#125;)<br>thenFs.<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;../source/2.md&#x27;</span>, <span class="hljs-string">&#x27;utf8&#x27;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">result</span>) =&gt;</span> &#123; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result); &#125;)<br>thenFs.<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;../source/锦瑟.md&#x27;</span>, <span class="hljs-string">&#x27;utf8&#x27;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">result</span>) =&gt;</span> &#123; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result); &#125;)<br><br><span class="hljs-comment">// 链式调用 保证执行顺序 按照then方法的执行顺序打印</span><br><span class="hljs-comment">// 此方法才和我们上述的代码执行顺序一致</span><br>thenFs.<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;../source/1.md&#x27;</span>, <span class="hljs-string">&#x27;utf8&#x27;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">result</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result);<br>  <span class="hljs-keyword">return</span> thenFs.<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;../source/2.md&#x27;</span>, <span class="hljs-string">&#x27;utf8&#x27;</span>)<br>&#125;)<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">result</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result);<br>    <span class="hljs-keyword">return</span> thenFs.<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;../source/锦瑟.md&#x27;</span>, <span class="hljs-string">&#x27;utf8&#x27;</span>)<br>  &#125;)<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">result</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result);<br>  &#125;)<br><br></code></pre></td></tr></table></figure><br><div class="hide-block"><button type="button" class="hide-button" style="background-color: blue white;">点击查看运行结果    </button><div class="hide-content"><p><img src="https://cdn.staticaly.com/gh/Rhh-Z/PicBed@main/note/p9.png" alt="p9"></p></div></div><br>我们可以看到用<code>thenFs</code>读取文件更加的直观、清晰，而且不存在无限向右缩进的情况，代码更加容易阅读与维护<br>那你可能会想，<code>Promise</code>呢？<code>Promise</code>到哪里去了？<br>其实我们的<code>thenFs</code>底层原理就是用<code>Promise</code>实现的，所以想要搞清楚怎么解决回调地狱，我们就需要知道<code>Promise</code>是什么，以及怎么使用</p><h1 id="二、Promise的介绍"><a href="#二、Promise的介绍" class="headerlink" title="二、Promise的介绍"></a>二、Promise的介绍</h1><div class="note info simple"><p>Promise是一种由社区最早提出的一种异步编程的解决方案，它比传统的解决方法（回调事件）更合理，更强大。</p></div><p class='p red h4'>1.特点</p><ol><li>对象的状态不受外界影响。Promise对象有三种状态：<code>pending</code>（进行中）、<code>fulfilled</code>（已成功）和<code>rejected</code>（已失败）。一个<code>Promise</code>对象必然处于这三个状态之一，只有异步操作的结果可以决定它是哪一种状态，任何其他操作都无法改变这个结果。</li><li>一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise对象的状态改变，只有两种可能：从<code>pending</code>变为<code>fulfilled</code>和从<code>pending</code>变为<code>rejected</code>。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果，这时就称为 <code>resolved</code>（已定型）。如果改变已经发生了，你再对Promise对象添加回调函数，也会立即得到这个结果。这与事件（Event）完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。</li></ol><p class='p red h4'>2.缺点</p><ol><li>无法取消<code>Promise</code>,一旦它执行，就无法取消。</li><li>如果不设置回调函数，<code>Promise</code> 内部抛出的错误就不会反应到外部。</li><li>当处于<code>pedding</code>状态时，无法得知目前进行到哪一步（到底是刚开始还是即将完成）。</li></ol><p class='p red h4'>3.基本用法</p><p><code>ES6</code> 规定，<code>Promise</code>对象是一个构造函数，用来生成<code>Promise</code>实例。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">const</span> promise = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">resolve, reject</span>) &#123;<br>  <span class="hljs-comment">// 一些处理异步操作的代码</span><br><br>  <span class="hljs-keyword">if</span> (<span class="hljs-comment">/* 异步操作成功 */</span>)&#123;<br>    <span class="hljs-title function_">resolve</span>(value);<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-title function_">reject</span>(error);<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><br><div class="note warning flat"><p><code>Promise</code>构造函数接受一个函数作为参数，该函数的两个参数分别是<code>resolve</code>和<code>reject</code>。它们是两个函数，由 <code>JavaScript</code> 引擎提供，不用自己部署。</p></div></p><p><code>Promise</code>实例生成以后，可以用<code>then</code>方法分别指定<code>resolved</code>状态和<code>rejected</code>状态的回调函数。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JS">promise.<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">value</span>) &#123;<br>  <span class="hljs-comment">// success</span><br>&#125;, <span class="hljs-keyword">function</span>(<span class="hljs-params">error</span>) &#123;<br>  <span class="hljs-comment">// failure</span><br>&#125;);<br></code></pre></td></tr></table></figure></p><p>学会基本的<code>Promise</code>运用以后，此时我们就可以用<code>Promise</code>改造文件的读取<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">import</span> fs <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;fs&#x27;</span><br><br><span class="hljs-comment">// 使用Promise封装</span><br><span class="hljs-keyword">const</span> fn1 = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    fs.<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;./1.txt&#x27;</span>, <span class="hljs-string">&#x27;utf-8&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">err, data</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">if</span> (err) &#123;<br>        <span class="hljs-title function_">reject</span>(err)<br>      &#125;<br>      <span class="hljs-title function_">resolve</span>(data)<br>    &#125;)<br>  &#125;)<br>&#125;<br><br><span class="hljs-keyword">const</span> fn2 = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    fs.<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;./2.txt&#x27;</span>, <span class="hljs-string">&#x27;utf-8&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">err, data</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">if</span> (err) &#123;<br>        <span class="hljs-title function_">reject</span>(err)<br>      &#125;<br>      <span class="hljs-title function_">resolve</span>(data)<br>    &#125;)<br>  &#125;)<br>&#125;<br><br><span class="hljs-keyword">const</span> fn3 = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    fs.<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;./3.txt&#x27;</span>, <span class="hljs-string">&#x27;utf-8&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">err, data</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">if</span> (err) &#123;<br>        <span class="hljs-title function_">reject</span>(err)<br>      &#125;<br>      <span class="hljs-title function_">resolve</span>(data)<br>    &#125;)<br>  &#125;)<br>&#125;<br><br><span class="hljs-title function_">fn1</span>().<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res1</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res1);<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">fn2</span>()<br>&#125;)<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res2</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res2);<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">fn3</span>()<br>  &#125;)<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res3</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res3);<br>  &#125;)<br></code></pre></td></tr></table></figure><br>此时我们可以看到代码的可阅读性相比之前要更加清晰</p><p class='p red h4'>4.运作原理</p><div class="note warning flat"><p><code>resolve</code>函数执行的是异步操作成功的回调，将<code>Promise</code>的状态由<code>pending</code>改为<code>resolved</code>，并将异步操作的成功结果作为<code>then</code>方法的参数传递出去；<code>reject</code>函数执行的是异步操作失败的回调，将<code>Promise</code>的状态由<code>pending</code>改为<code>rejected</code>,并将异步操作失败的结果作为<code>catch</code>方法的参数传递出去</p></div><p>以下是一个示例代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">const</span> p1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-title function_">resolve</span>(<span class="hljs-string">&#x27;成功&#x27;</span>)<br>    <span class="hljs-title function_">reject</span>(<span class="hljs-string">&#x27;失败&#x27;</span>)<br>&#125;)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;p1&#x27;</span>, p1)<br><br><span class="hljs-keyword">const</span> p2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-title function_">reject</span>(<span class="hljs-string">&#x27;失败&#x27;</span>)<br>    <span class="hljs-title function_">resolve</span>(<span class="hljs-string">&#x27;成功&#x27;</span>)<br>&#125;)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;p2&#x27;</span>, p2)<br><br><span class="hljs-keyword">const</span> p3 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">throw</span>(<span class="hljs-string">&#x27;error&#x27;</span>)<br>&#125;)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;p3&#x27;</span>, p3)<br></code></pre></td></tr></table></figure><br>执行结果：<br><img src="https://cdn.staticaly.com/gh/Rhh-Z/PicBed@main/note/p10.png" alt="p10"></p><p>这里我们可以看到:</p><ul><li>执行了<code>resolve</code>，<code>Promise</code>状态会变成<code>fulfilled</code>，即<span class='p red'>已完成状态</span></li><li>执行了<code>reject</code>，<code>Promise</code>状态会变成<code>rejected</code>，即<span class='p red'>被拒绝状态</span></li><li><code>Promise</code>只以第一次为准，第一次成功就永久为<code>fulfilled</code>，第一次失败就永远状态为<code>rejected</code></li><li><code>Promise</code>中有<code>throw</code>的话，就相当于执行了<code>reject</code></li></ul><div class="tip warning"><p>注意：return并不能改变它的状态，并且注意这不是在then方法中。</p></div><ul><li><span class='p red h4'>promise.then()返回的新的promise的结果状态由什么决定？</span><ol><li>如果<code>then</code>回调抛出异常，那么新的<code>Promise</code>示例状态就会变为<code>rejected</code></li><li>如果<code>then</code>回调返回的是非promise，，那么新 promise 实例状态就会变为 <code>resolved</code>，<code>value</code>为前面 <code>then</code> 回调返回的值（无返回值就是 <code>undefined</code>）</li><li>如果 <code>then</code> 回调返回的是另一个新的 <code>promise</code> 实例，那么新 <code>promise</code> 实例状态就是新 promise 实例的状态</li><li><code>then()</code> 回调返回的新 <code>promise</code>实例状态规则，适用于其他会返回新 <code>promise</code> 实例的方法。</li></ol></li></ul><p>我们再来看一种情况：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">const</span> p1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br><br>&#125;)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;p1&#x27;</span>, p1)<br></code></pre></td></tr></table></figure><br>如果我们不执行resolve/reject/throw，我们可以看到Promise状态仍然是pending，没有改变<br><img src="https://cdn.staticaly.com/gh/Rhh-Z/PicBed@main/note/p11.png" alt="p11"></p><div class="tip warning"><p>基于上一条，pending状态下的promise不会执行回调函数then()</p></div><div class="note warning flat"><p>使用Promise时,需要注意:</p><ul><li>在本轮<code>事件循环</code>运行完成之前，回调函数不会被调用</li><li>计时异步操作已经完成，在这之后通过then()添加的回调函数也会被调用</li><li>通过多次调用then()可以添加多个回调函数，它们会按照插入顺序执行（即`链式调用·）</li></ul></div><h1 id="三、封装Ajax的实例"><a href="#三、封装Ajax的实例" class="headerlink" title="三、封装Ajax的实例"></a>三、封装Ajax的实例</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-comment">// Promise封装Ajax请求</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">ajax</span>(<span class="hljs-params">method, url, data</span>) &#123;<br>  <span class="hljs-keyword">let</span> xhr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>()<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    xhr.<span class="hljs-property">onreadystatechange</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-keyword">if</span> (xhr.<span class="hljs-property">readyState</span> !== <span class="hljs-number">4</span>) <span class="hljs-keyword">return</span><br>      <span class="hljs-keyword">if</span> (xhr.<span class="hljs-property">status</span> === <span class="hljs-number">200</span>) &#123;<br>        <span class="hljs-title function_">resolve</span>(xhr.<span class="hljs-property">responseText</span>)<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 根据响应码判断失败原因</span><br>        <span class="hljs-title function_">reject</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">statusText</span>))<br>      &#125;<br>    &#125;<br>    xhr.<span class="hljs-title function_">open</span>(method, url)<br>    xhr.<span class="hljs-title function_">send</span>(data)<br>  &#125;)<br><br><span class="hljs-title function_">ajax</span>(<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;./posts.josn&#x27;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;result&#x27;</span>, res);<br>&#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err);<br>&#125;)<br></code></pre></td></tr></table></figure><h1 id="四、Promise的API"><a href="#四、Promise的API" class="headerlink" title="四、Promise的API"></a>四、Promise的API</h1><h2 id="1-Promise-reslove"><a href="#1-Promise-reslove" class="headerlink" title="1.Promise.reslove()"></a>1.Promise.reslove()</h2><p><code>Promise.reslove()</code>方法用于将现有对象转化为<code>Promise</code>对象<br>例如：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">const</span> objPromise = <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(&#123;<span class="hljs-string">&quot;data&quot;</span>:<span class="hljs-string">&quot;1&quot;</span>&#125;)<br>objPromise.<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res);<br>&#125;)<br></code></pre></td></tr></table></figure><br>执行结果为:<br><img src="https://cdn.staticaly.com/gh/Rhh-Z/PicBed@main/note/p12.png" alt="p12"></p><p><code>Promise.resolve()</code>等价于下面的写法。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(<span class="hljs-string">&#x27;foo&#x27;</span>)<br><span class="hljs-comment">// 等价于</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function"><span class="hljs-params">resolve</span> =&gt;</span> <span class="hljs-title function_">resolve</span>(<span class="hljs-string">&#x27;foo&#x27;</span>))<br></code></pre></td></tr></table></figure></p><div class="tip "><p><code>Promise.resolve</code>的参数分成四种情况<br><span class='p red h4'>1.参数是一个Promise实例</span><br>  如果参数是Promise实例对象，则直接返回这个实例，不做任何修改<br><span class='p red h4'>2.参数是一个thenable对象</span><br>  thenable对象指的是具有then方法的对象，比如下面这个对象<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">let</span> thenable = &#123;<br>  <span class="hljs-attr">then</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">resolve, reject</span>) &#123;<br>    <span class="hljs-title function_">resolve</span>(<span class="hljs-string">&#x27;执行了then方法&#x27;</span>);<br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><br><code>Promise.resolve</code>方法会将这个对象转为<code>Promise</code>对象，然后就会立即执行<code>thenable</code>对象中的<code>then</code>方法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">let</span> thenable = &#123;<br>  <span class="hljs-attr">then</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">resolve, reject</span>) &#123;<br>    <span class="hljs-title function_">resolve</span>(<span class="hljs-string">&#x27;执行了then方法&#x27;</span>);<br>  &#125;<br>&#125;;<br><span class="hljs-keyword">let</span> p1 = <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(thenable);<br>p1.<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">value</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(value);  <span class="hljs-comment">// 执行了then方法</span><br>&#125;);<br></code></pre></td></tr></table></figure><br><span class='p red h4'>3.参数不是具有then方法的对象，或者根本不是对象</span><br>  如果参数是一个原始值，或者不具有<code>then</code>方法的对象，则<code>Promise.resolve</code>方法会返回一个新的<code>Promise</code>对象，状态为<code>resolved</code>，此时可以使用该对象直接调用<code>then</code>方法<code>then</code>方法内的参数是<code>Promise.resolve</code>传入的值<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">const</span> p = <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(<span class="hljs-string">&#x27;Hello&#x27;</span>);<br>p.<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">s</span>)&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(s) <span class="hljs-comment">// Hello</span><br>&#125;);<br></code></pre></td></tr></table></figure><br>上面代码会生成一个新的<code>Promise</code>对象实例<code>p</code>，由于字符串<code>Hello</code>不属于异步操作（判断方法是字符串不具有<code>then</code>方法），返回<code>Promise</code>实例的状态从一开始就是<code>resolved</code>，所以回调函数会立即执行</p><p><span class='p red h4'>4.不带任何参数</span><br><code>Promise.resolve()</code>方法允许调用时不带参数，直接返回一个<code>resolved</code>状态的<code>Promise</code>对象。<br>所以，如果希望得到一个 Promise 对象，比较方便的方法就是直接调用Promise.resolve()方法。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">const</span> p = <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>();<br>p.<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">res</span>) &#123;<br>  <span class="hljs-comment">// ...</span><br>&#125;);<br></code></pre></td></tr></table></figure></p><p><wavy>需要注意的是，立即resolve()的 Promise 对象，是在本轮“事件循环”（event loop）的结束时执行，而不是在下一轮“事件循环”的开始时,举个例子：。</wavy><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;three&#x27;</span>);<br>&#125;, <span class="hljs-number">0</span>);<br><span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>().<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;two&#x27;</span>);<br>&#125;);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;one&#x27;</span>);<br><span class="hljs-comment">// 执行顺序为</span><br><span class="hljs-comment">// one</span><br><span class="hljs-comment">// two</span><br><span class="hljs-comment">// three</span><br></code></pre></td></tr></table></figure><br>上述代码中，<code>setTimeout(fn, 0)</code>在下一轮“事件循环”开始时执行，<code>Promise.resolve()</code>在本轮“事件循环”结束时执行，<code>console.log(&#39;one&#39;)</code>则是立即执行，因此最先输出。</p></div><h2 id="2-Promise-reject"><a href="#2-Promise-reject" class="headerlink" title="2.Promise.reject()"></a>2.Promise.reject()</h2><p><code>Promise.reject()</code>方法也会返回一个新的<code>Promise</code>实例，该实例的状态为<code>rejected</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">const</span> p = <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(<span class="hljs-string">&#x27;出错了&#x27;</span>);<br><span class="hljs-comment">// 等同于</span><br><span class="hljs-keyword">const</span> p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> <span class="hljs-title function_">reject</span>(<span class="hljs-string">&#x27;出错了&#x27;</span>))<br>p.<span class="hljs-title function_">then</span>(<span class="hljs-literal">null</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">s</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(s)  <span class="hljs-comment">// 出错了</span><br>&#125;);<br></code></pre></td></tr></table></figure></p><div class="tip "><p>注意：<code>Promise.reject()</code>方法的参数会原封不动地作为reject理由，变成后续方法的参数，这一点与<code>romise.resolve()</code>不一致</p></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">const</span> thenable = &#123;<br>  <span class="hljs-title function_">then</span>(<span class="hljs-params">resolve, reject</span>) &#123;<br>    <span class="hljs-title function_">reject</span>(<span class="hljs-string">&#x27;出错了&#x27;</span>);<br>  &#125;<br>&#125;;<br><span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(thenable)<br>.<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e === thenable)<span class="hljs-comment">// true</span><br>&#125;)<br></code></pre></td></tr></table></figure><p>上述代码中，<code>Promise.reject()</code>方法的参数是一个thenable对象，但是执行之后<code>catch</code>方法的参数不是<code>reject</code>抛出的’出错了’字符串，而是原封不动的<code>thenable</code>对象</p><h2 id="3-Promise-prototype-then"><a href="#3-Promise-prototype-then" class="headerlink" title="3.Promise.prototype.then()"></a>3.Promise.prototype.then()</h2><p>Promise实例具有<code>then</code>方法，也就是说，<code>then</code>方法是定义在原型<code>Promise.prototype</code>上的，它的作用是为<code>Promise</code>实例添加状态改变时的回调函数的参数</p><p><code>then</code>方法的第一个参数是<code>resolved</code>状态的回调函数。如果该参数不是函数，则会在内部被替换为 <code>(x) =&gt; x</code>，即原样返回 <code>promise</code> 最终结果的函数</p><p>第二个参数（可选）是<code>rejected</code>状态的回调函数。如果该参数不是函数，则会在内部被替换为一个 “Thrower” 函数 <code>(it throws an error it received as argument)</code></p><p><code>then</code>方法返回的是一个新的<code>Promise</code>实例（注意，不是原来那个<code>Promise</code>实例）。因此可以采用链式写法，即<code>then</code>方法后面再调用另一个<code>then</code>方法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-title function_">getJSON</span>(<span class="hljs-string">&quot;/posts.json&quot;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">json</span>) &#123;<br>  <span class="hljs-keyword">return</span> json.<span class="hljs-property">post</span>;<br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">post</span>) &#123;<br>  <span class="hljs-comment">// ...</span><br>&#125;);<br></code></pre></td></tr></table></figure><br>上面的代码使用<code>then</code>方法，依次指定了两个回调函数。第一个回调函数完成以后，会将返回结果作为参数，传入第二个回调函数。<br>采用链式的then，可以指定一组按照次序调用的回调函数。这时，前一个回调函数，有可能返回的还是一个Promise对象（即有异步操作），这时后一个回调函数，就会等待该Promise对象的状态发生变化，才会被调用。</p><p class='p red h4'>下面再详细介绍下then方法的返回值，也就是then方法中的return</p><p>当一个<code>Promise</code>完成<code>（fulfilled）</code>或者失败<code>（rejected）</code>时，返回函数将被异步调用（由当前的线程循环来调度完成）。具体的返回值<code>return</code>依据以下规则返回。如果<code>then</code>中的回调函数：</p><ul><li>返回<code>(return)</code>了一个值，name<code>then</code>返回的Promise将会成为接受状态，并且将会返回的值作为接受状态的会IDOA函数的参数值。</li><li>没有返回<code>(return)</code>任何值，那么then 返回的 Promise 将会成为接受状态，并且该接受状态的回调函数的参数值为 undefined。</li><li>抛出一个错误，那么 then 返回的 Promise 将会成为拒绝状态，并且将抛出的错误作为拒绝状态的回调函数的参数值。</li><li>返回 (return) 一个已经是接受状态的 Promise，那么 then 返回的 Promise 也会成为接受状态，并且将那个 Promise 的接受状态的回调函数的参数值作为该被返回的Promise的接受状态回调函数的参数值。</li><li>返回 (return) 一个已经是拒绝状态的 Promise，那么 then 返回的 Promise 也会成为拒绝状态，并且将那个 Promise 的拒绝状态的回调函数的参数值作为该被返回的Promise的拒绝状态回调函数的参数值。</li><li>返回 (return) 一个未定状态（pending）的 Promise，那么 then 返回 Promise 的状态也是未定的，并且它的终态与那个 Promise 的终态相同；同时，它变为终态时调用的回调函数参数与那个 Promise 变为终态时的回调函数的参数是相同的。</li></ul><h2 id="4-链式调用Promise-then"><a href="#4-链式调用Promise-then" class="headerlink" title="4.链式调用Promise.then()"></a>4.链式调用Promise.then()</h2><p><code>then</code>方法返回一个<code>Promise</code>对象，其允许方法链，从而创建一个<code>promise</code>链。<br>链式<code>·</code>promise<code>·</code>的一个很好的示例是<code>·</code>Fetch API<code>，可以用于获取资源，且当资源被获取时将</code>promise<code>链式排队进行执行。</code>Fetch API<code>是基于</code>promise<code>的机制，调用</code>fetch()<code>相当于使用</code>new Promise()`来定义 promsie。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">const</span> <span class="hljs-title function_">status</span> = response =&gt; &#123;<br>  <span class="hljs-keyword">if</span> (response.<span class="hljs-property">status</span> &gt;= <span class="hljs-number">200</span> &amp;&amp; response.<span class="hljs-property">status</span> &lt; <span class="hljs-number">300</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(response)<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(response.<span class="hljs-property">statusText</span>))<br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">json</span> = response =&gt; response.<span class="hljs-title function_">json</span>()<br><br><span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;/todos.json&#x27;</span>)<br>  .<span class="hljs-title function_">then</span>(status)    <span class="hljs-comment">// 注意，`status` 函数实际上在这里被调用，并且同样返回 promise，</span><br>  .<span class="hljs-title function_">then</span>(json)      <span class="hljs-comment">// 这里唯一的区别是的 `json` 函数会返回解决时传入 `data` 的 promise，</span><br>  .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> &#123;  <span class="hljs-comment">// 这是 `data` 会在此处作为匿名函数的第一个参数的原因。</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;请求成功获得 JSON 响应&#x27;</span>, data)<br>  &#125;)<br>  .<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;请求失败&#x27;</span>, error)<br>  &#125;)<br></code></pre></td></tr></table></figure></p><p>在此示例中，调用<code>fetch()</code>从域根目录中的<code>todos.json</code>文件中获取<code>TODO</code>项目的列表，并创建一个 promise 链。<br>运行<code>fetch()</code>会返回一个响应<code>response</code>，该响应具有许多属性，在属性中引用了：</p><ul><li><code>status</code>，表示<code>HTTP</code>状态码的数值。</li><li><code>statusText</code>，状态消息，如果请求成功，则为<code>OK</code>。</li></ul><p><code>response</code>还有一个<code>json()</code>方法，该方法会返回一个<code>promise</code>，该<code>promise</code>解决时会传入已处理并转换为<code>JSON</code>的响应体的内容。<br>因此，考虑到这些前提，发生的过程是：链中的第一个 promise 是我们定义的函数，即 <code>status()</code>，它会检查响应的状态，如果不是成功响应（介于 200 和 299 之间），则它会拒绝 promise。<br>此操作会导致 promise 链跳过列出的所有被链的 promise，且会直接跳到底部的<code>catch()</code>语句（记录<code>请求失败</code>的文本和错误消息）。<br>如果成功，则会调用定义的 json() 函数。 由于上一个 promise 成功后返回了 response 对象，因此将其作为第二个 promise 的输入。</p><h2 id="5-Promise-prototype-catch"><a href="#5-Promise-prototype-catch" class="headerlink" title="5.Promise.prototype.catch()"></a>5.Promise.prototype.catch()</h2><p><code>Promise.prototype.catch()</code>方法是<code>.then(null, rejection)</code>或<code>.then(undefined, rejection)</code>的别名，用于指定发生错误时的回调函数。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-title function_">getJSON</span>(<span class="hljs-string">&#x27;/posts.json&#x27;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">posts</span>) &#123;<br>  <span class="hljs-comment">// ...</span><br>&#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">error</span>) &#123;<br>  <span class="hljs-comment">// 处理 getJSON 和 前一个回调函数运行时发生的错误</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;发生错误！&#x27;</span>, error);<br>&#125;);<br></code></pre></td></tr></table></figure><br>上面代码中，<code>·</code>getJSON()<code>方法返回一个</code>Promise<code>对象，如果该对象状态变为</code>resolved<code>，则会调用</code>then()<code>方法指定的回调函数；如果异步操作抛出错误，状态就会变为</code>r<code>ejected</code>，就会调用<code>catch()</code>方法指定的回调函数，处理这个错误。另外，<code>then()</code>方法指定的回调函数，如果运行中抛出错误，也会被<code>catch()</code>方法捕获。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JS">p.<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">val</span>) =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;fulfilled:&#x27;</span>, val))<br>  .<span class="hljs-title function_">catch</span>(<span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;rejected&#x27;</span>, err));<br><br><span class="hljs-comment">// 等同于</span><br>p.<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">val</span>) =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;fulfilled:&#x27;</span>, val))<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-literal">null</span>, <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;rejected:&quot;</span>, err));<br></code></pre></td></tr></table></figure></p><ul><li>下面是一个例子。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">const</span> promise = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">resolve, reject</span>) &#123;<br>  <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;test&#x27;</span>);<br>&#125;);<br>promise.<span class="hljs-title function_">catch</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">error</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(error);<br>&#125;);<br><span class="hljs-comment">// Error: test</span><br></code></pre></td></tr></table></figure>上面代码中，promise抛出一个错误，就被catch()方法指定的回调函数捕获。注意，上面的写法与下面两种写法是等价的。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-comment">// 写法一</span><br><span class="hljs-keyword">const</span> promise = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">resolve, reject</span>) &#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;test&#x27;</span>);<br>  &#125; <span class="hljs-keyword">catch</span>(e) &#123;<br>    <span class="hljs-title function_">reject</span>(e);<br>  &#125;<br>&#125;);<br>promise.<span class="hljs-title function_">catch</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">error</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(error);<br>&#125;);<br><br><span class="hljs-comment">// 写法二</span><br><span class="hljs-keyword">const</span> promise = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">resolve, reject</span>) &#123;<br>  <span class="hljs-title function_">reject</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;test&#x27;</span>));<br>&#125;);<br>promise.<span class="hljs-title function_">catch</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">error</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(error);<br></code></pre></td></tr></table></figure>比较上面两种写法，可以发现reject()方法的作用，等同于抛出错误。</li></ul><p>如果 Promise 状态已经变成resolved，再抛出错误是无效的。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">const</span> promise = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">resolve, reject</span>) &#123;<br>  <span class="hljs-title function_">resolve</span>(<span class="hljs-string">&#x27;ok&#x27;</span>);<br>  <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;test&#x27;</span>);<br>&#125;);<br>promise<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">value</span>) &#123; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(value) &#125;)<br>  .<span class="hljs-title function_">catch</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">error</span>) &#123; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(error) &#125;);<br><span class="hljs-comment">// ok</span><br></code></pre></td></tr></table></figure><br>上面代码中，<code>Promise</code>在<code>resolve</code>语句后面，再抛出错误，不会被捕获，等于没有抛出。因为<code>Promise</code>的状态一旦改变，就永久保持该状态，不会再变了。</p><p><code>Promise</code>对象的错误具有“冒泡”性质，会一直向后传递，直到被捕获为止。也就是说，错误总是会被下一个catch语句捕获。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-title function_">getJSON</span>(<span class="hljs-string">&#x27;/post/1.json&#x27;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">post</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">getJSON</span>(post.<span class="hljs-property">commentURL</span>);<br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">comments</span>) &#123;<br>  <span class="hljs-comment">// some code</span><br>&#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">error</span>) &#123;<br>  <span class="hljs-comment">// 处理前面三个Promise产生的错误</span><br>&#125;);<br></code></pre></td></tr></table></figure><br>上面代码中，一共有三个 Promise 对象：一个由<code>getJSON()</code>产生，两个由<code>then()</code>产生。它们之中任何一个抛出的错误，都会被最后一个<code>catch()</code>捕获。<br>◾ 一般来说，不要在<code>then()</code>方法里面定义<code>Reject</code>状态的回调函数（即then的第二个参数），总是使用<code>catch</code>方法。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-comment">// bad</span><br>promise<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>) &#123;<br>    <span class="hljs-comment">// success</span><br>  &#125;, <span class="hljs-keyword">function</span>(<span class="hljs-params">err</span>) &#123;<br>    <span class="hljs-comment">// error</span><br>  &#125;);<br><br><span class="hljs-comment">// good</span><br>promise<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>) &#123; <span class="hljs-comment">//cb</span><br>    <span class="hljs-comment">// success</span><br>  &#125;)<br>  .<span class="hljs-title function_">catch</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">err</span>) &#123;<br>    <span class="hljs-comment">// error</span><br>  &#125;);<br></code></pre></td></tr></table></figure><br>上面代码中，第二种写法要好于第一种写法，理由是第二种写法可以捕获前面<code>then</code>方法执行中的错误，也更接近同步的写法<code>（try/catch）</code>。因此，建议总是使用<code>catch()</code>方法，而不使用then()方法的第二个参数。</p><p>跟传统的<code>try/catch</code>代码块不同的是，如果没有使用<code>catch()</code>方法指定错误处理的回调函数，<code>Promise</code>对象抛出的错误不会传递到外层代码，即不会有任何反应。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">const</span> someAsyncThing = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">resolve, reject</span>) &#123;<br>    <span class="hljs-comment">// 下面一行会报错，因为x没有声明</span><br>    <span class="hljs-title function_">resolve</span>(x + <span class="hljs-number">2</span>);<br>  &#125;);<br>&#125;;<br><br><span class="hljs-title function_">someAsyncThing</span>().<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;everything is great&#x27;</span>);<br>&#125;);<br><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">123</span>) &#125;, <span class="hljs-number">2000</span>);<br><span class="hljs-comment">// Uncaught (in promise) ReferenceError: x is not defined</span><br><span class="hljs-comment">// 123</span><br></code></pre></td></tr></table></figure><br>上面代码中，<code>someAsyncThing()</code>函数产生的<code>Promise</code>对象，内部有语法错误。浏览器运行到这一行，会打印出错误提示<code>ReferenceError: x is not defined</code>，但是不会退出进程、终止脚本执行，2 秒之后还是会输出<code>123</code>。这就是说，Promise 内部的错误不会影响到 Promise 外部的代码，通俗的说法就是“Promise 会吃掉错误”。</p><p>这个脚本放在服务器执行，退出码就是0（即表示执行成功）。不过，<code>Node.js</code>有一个<code>unhandledRejection</code>事件，专门监听未捕获的<code>reject</code>错误，上面的脚本会触发这个事件的监听函数，可以在监听函数里面抛出错误。</p><h2 id="6-Promise-prototype-finally"><a href="#6-Promise-prototype-finally" class="headerlink" title="6.Promise.prototype.finally()"></a>6.Promise.prototype.finally()</h2><p><code>finally()</code>方法用于指定不管 Promise 对象最后状态如何，都会执行的操作。该方法是 ES2018 引入标准的。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JS">promise<br>.<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">result</span> =&gt;</span> &#123;···&#125;)<br>.<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> &#123;···&#125;)<br>.<span class="hljs-title function_">finally</span>(<span class="hljs-function">() =&gt;</span> &#123;···&#125;);<br></code></pre></td></tr></table></figure><br>上面代码中，不管<code>promise</code>最后的状态，在执行完<code>then</code>或<code>catch</code>指定的回调函数以后，都会执行<code>finally</code>方法指定的回调函数。这为在Promise是否成功完成后都需要执行的代码提供了一种方式。这避免了同样的语句需要在<code>then()</code>和<code>catch()</code>中各写一次的情况。</p><p>下面是一个例子，服务器使用 Promise 处理请求，然后使用finally方法关掉服务器。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JS">server.<span class="hljs-title function_">listen</span>(port)<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// ...</span><br>  &#125;)<br>  .<span class="hljs-title function_">finally</span>(server.<span class="hljs-property">stop</span>);<br></code></pre></td></tr></table></figure><br><code>finally</code>方法的回调函数不接受任何参数，这意味着没有办法知道，前面的 <code>Promise</code> 状态到底是fulfilled<code>`还是</code>rejected<code>。这表明，</code>finally<code>方法里面的操作，应该是与状态无关的，不依赖于</code>Promise`的执行结果。</p><h2 id="7-Promise-all"><a href="#7-Promise-all" class="headerlink" title="7.Promise.all()"></a>7.Promise.all()</h2><p><code>Promise.all()</code>方法用于将多个<code>Promise</code>实例，包装成一个新的<code>Promise</code>实例。</p><p>可以使用<code>Promise.all()</code>，<span class='p cyan'>发起多个并发请求</span>，然后在所有<code>promise</code>都被解决后执行一些操作。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">const</span> p = <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">all</span>([p1, p2, p3]);<br></code></pre></td></tr></table></figure><br>上面代码中，<code>Promise.all()</code>方法接受一个数组作为参数，<code>p1</code>、<code>p2</code>、<code>p3</code>都是 Promise 实例，如果不是，就会先调用下面讲到的<code>Promise.resolve</code>方法，将参数转为<code>Promise</code>实例，再进一步处理。另外，<code>Promise.all()</code>方法的参数可以不是数组，但必须具有<code>Iterator</code>接口，且返回的每个成员都是<code>Promise</code>实例。</p><ul><li><p>p的状态由<code>p1</code>、<code>p2</code>、<code>p</code>3决定，分成两种情况。</p><p>（1）只有<code>p1</code>、<code>p2</code>、<code>p3</code>的状态都变成<code>fulfilled</code>，<code>p</code>的状态才会变成<code>fulfilled</code>，此时<code>p1</code>、<code>p2</code>、<code>p3</code>的返回值组成一个数组，传递给p的回调函数。</p><p>（2）只要<code>p1</code>、<code>p2</code>、<code>p3</code>之中有一个被<code>rejected</code>，<code>p</code>的状态就变成<code>rejected</code>，此时第一个被<code>reject</code>的实例的返回值，会传递给<code>p</code>的回调函数。</p></li></ul><p>如果你想在<code>promise</code>执行完毕后无论其结果怎样都做一些处理或清理时，<code>finally()</code>方法可能是有用的。</p><p>下面是一个具体的例子:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-comment">// 生成一个Promise对象的数组</span><br><span class="hljs-keyword">const</span> promises = [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">11</span>, <span class="hljs-number">13</span>].<span class="hljs-title function_">map</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">id</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">getJSON</span>(<span class="hljs-string">&#x27;/post/&#x27;</span> + id + <span class="hljs-string">&quot;.json&quot;</span>);<br>&#125;);<br><br><span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">all</span>(promises).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">posts</span>) &#123;<br>  <span class="hljs-comment">// ...</span><br>&#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">reason</span>)&#123;<br>  <span class="hljs-comment">// ...</span><br>&#125;);<br><br></code></pre></td></tr></table></figure></p><p>上面代码中，<code>promises</code>是包含 6 个<code>Promise</code>实例的数组，只有这 6 个实例的状态都变成<code>fulfilled</code>，或者其中有一个变为<code>rejected</code>，才会调用<code>Promise.all</code>方法后面的回调函数。</p><div class="note warning flat"><p>注意:如果作为参数的 Promise 实例，自己定义了catch方法，那么它一旦被rejected，并不会触发Promise.all()的catch方法。</p></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">const</span> p1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  <span class="hljs-title function_">resolve</span>(<span class="hljs-string">&#x27;hello&#x27;</span>);<br>&#125;)<br>.<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">result</span> =&gt;</span> result)<br>.<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> e);<br><br><span class="hljs-keyword">const</span> p2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;报错了&#x27;</span>);<br>&#125;)<br>.<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">result</span> =&gt;</span> result)<br>.<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> e);<br><br><span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">all</span>([p1, p2])<br>.<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">result</span> =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result))<br>.<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e));<br><span class="hljs-comment">// [&quot;hello&quot;, Error: 报错了]</span><br></code></pre></td></tr></table></figure><p>上面代码中，<code>p1</code>会<code>resolved</code>，<code>p2</code>首先会<code>rejected</code>，但是<code>p2</code>有自己的<code>catch</code>方法，该方法返回的是一个新的<code>Promise</code>实例，<code>p2</code>指向的实际上是这个实例。该实例执行完<code>catch</code>方法后，也会变成<code>resolved</code>，导致<code>Promise.all()</code>方法参数里面的两个实例都会<code>resolved</code>，因此会调用<code>then</code>方法指定的回调函数，而不会调用<code>catch</code>方法指定的回调函数。</p><div class="tip "><p>如果p2没有自己的catch方法，就会调用Promise.all()的catch方法。</p></div><p>以下是用Promise.all()发起多个并发请求的实例：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">function</span> <span class="hljs-title function_">getUserAccount</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/user/12345&#x27;</span>);<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getUserPermissions</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/user/12345/permissions&#x27;</span>);<br>&#125;<br><br><span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">all</span>([<span class="hljs-title function_">getUserAccount</span>(), <span class="hljs-title function_">getUserPermissions</span>()])<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">results</span>) &#123;<br>    <span class="hljs-keyword">const</span> acct = results[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">const</span> perm = results[<span class="hljs-number">1</span>];<br>  &#125;);<br></code></pre></td></tr></table></figure></p><h2 id="8-Promise-race"><a href="#8-Promise-race" class="headerlink" title="8.Promise.race()"></a>8.Promise.race()</h2><p><code>Promise.race()</code>方法同样是将多个 Promise 实例，包装成一个新的 Promise 实例，但是<code>race()</code>是谁执行得快就以谁的执行结果返回</p><div class="note warning simple"><p>注意：<code>Promise.race()</code>方法的参数与<code>Promise.all()</code>方法一样，如果不是<code>Promise</code>实例，就会先调用<code>Promise.resolve()</code>方法，将参数转为<code>Promise</code>实例，再进一步处理。</p></div><ul><li><p class='p red h4'>使用场景</p>1、把异步操作和定时器放到一起，如果定时器先触发，认为超时，告知用户；<br>2、如果图片等资源有多个存放路径，但是不确定哪个路径的资源更快，可以用该方法同时请求多个 路径，哪个路径的资源最先拿到，使用哪个资源<br>3、如果指定时间内没有获得结果，就将 Promise 的状态变为reject，否则变为resolve</li></ul><p class='p red h4'>实例：</p><p>1.把异步操作和定时器放到一起，如果定时器先触发，认为超时，告知用户:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">function</span> <span class="hljs-title function_">timeOut</span>(<span class="hljs-params">time</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-title function_">reject</span>(<span class="hljs-string">&quot;请求超时&quot;</span>)<br>    &#125;, time) <span class="hljs-comment">// 为了验证方法，可以把时间设小点</span><br>  &#125;);<br><br><span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">race</span>([<span class="hljs-title function_">timeOut</span>(<span class="hljs-number">200</span>), <span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;https://api.github.com/users/ruanyf&#x27;</span>)]).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res);<br>&#125;)<br></code></pre></td></tr></table></figure></p><p>2.下面是一个例子，如果指定时间内没有获得结果，就将<code>Promise</code>的状态变为<code>reject</code>，否则变为<code>resolve</code>。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">const</span> p = <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">race</span>([<br>  <span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;/resource-that-may-take-a-while&#x27;</span>),<br>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">resolve, reject</span>) &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">reject</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;request timeout&#x27;</span>)), <span class="hljs-number">5000</span>)<br>  &#125;)<br>]);<br><br>p<br>.<span class="hljs-title function_">then</span>(<span class="hljs-variable language_">console</span>.<span class="hljs-property">log</span>)<br>.<span class="hljs-title function_">catch</span>(<span class="hljs-variable language_">console</span>.<span class="hljs-property">error</span>);<br></code></pre></td></tr></table></figure><br>上面代码中，如果 5 秒之内<code>fetch</code>方法无法返回结果，变量<code>p</code>的状态就会变为<code>rejected</code>，从而触发<code>catch</code>方法指定的回调函数。</p><h2 id="9-Promise-allSettled"><a href="#9-Promise-allSettled" class="headerlink" title="9.Promise.allSettled()"></a>9.Promise.allSettled()</h2><p><code>Promise.allSettled()</code>方法返回一个在所有给定的<code>promise</code>都已经<code>fulfilled</code>或<code>rejected</code>后的<code>promise</code>，并带有一个对象数组，每个对象表示对应的<code>promise</code>结果。<br><div class="note info simple"><p>当您有多个彼此不依赖的异步任务成功完成时，或者您总是想知道每个<code>promise</code>的结果时，通常使用它。相比之下，<code>Promise.all()</code>更适合彼此相互依赖并且所有异步操作都成功的情况或者在其中任何一个<code>reject</code>时立即结束。</p></div></p><p><code>Promise.allSettled()</code>方法接受一组<code>Promise</code>实例作为参数，包装成一个新的<code>Promise</code>实例。只有等到所有这些参数实例都返回结果，不管是<code>fulfilled</code>还是<code>rejected</code>，包装实例才会结束。该方法由 ES2020 引入。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">const</span> promises = [<br>  <span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;/api-1&#x27;</span>),<br>  <span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;/api-2&#x27;</span>),<br>  <span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;/api-3&#x27;</span>),<br>];<br><span class="hljs-keyword">await</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">allSettled</span>(promises);<br><span class="hljs-title function_">removeLoadingIndicator</span>();<span class="hljs-comment">// 移除加载的滚动图标</span><br></code></pre></td></tr></table></figure><br>上面代码对服务器发出三个请求，等到三个请求都结束，不管请求成功还是失败，加载的滚动图标都会消失。</p><p><code>Promise.allSettled()</code>方法返回的新的<code>Promise</code>实例，一旦结束，状态总是<code>fulfilled</code>，不会变成<code>rejected</code>。状态变成<code>fulfilled</code>后，<code>Promise</code>的监听函数接收到的参数是一个数组，每个成员对应一个传入<code>Promise.allSettled()</code>的<code>Promise</code>实例。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">const</span> resolved = <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(<span class="hljs-number">42</span>);<br><span class="hljs-keyword">const</span> rejected = <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(-<span class="hljs-number">1</span>);<br><br><span class="hljs-keyword">const</span> allSettledPromise = <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">allSettled</span>([resolved, rejected]);<br><br>allSettledPromise.<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">results</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(results);<br>&#125;);<br><span class="hljs-comment">// [</span><br><span class="hljs-comment">//    &#123; status: &#x27;fulfilled&#x27;, value: 42 &#125;,</span><br><span class="hljs-comment">//    &#123; status: &#x27;rejected&#x27;, reason: -1 &#125;</span><br><span class="hljs-comment">// ]</span><br></code></pre></td></tr></table></figure><br>上面代码中，<code>Promise.allSettled()</code>的返回值<code>allSettledPromise</code>，状态只可能变成fulfilled。它的监听函数接收到的参数是数组<code>results</code>。该数组的每个成员都是一个对象，对应传入<code>Promise.allSettled()</code>的两个<code>Promise</code>实例。每个对象都有status属性，该属性的值只可能是字符串<code>fulfilled</code>或字符串<code>rejected</code>。<code>fulfilled</code>时，对象有<code>value</code>属性，<code>rejected</code>时有<code>reason</code>属性，对应两种状态的返回值。<br><img src="https://cdn.staticaly.com/gh/Rhh-Z/PicBed@main/note/p13.png" alt="p13"></p><ul><li>下面是返回值用法的例子<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Js"><span class="hljs-keyword">const</span> promises = [ <span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;index.html&#x27;</span>), <span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;https://does-not-exist/&#x27;</span>) ];<br><span class="hljs-keyword">const</span> results = <span class="hljs-keyword">await</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">allSettled</span>(promises);<br><br><span class="hljs-comment">// 过滤出成功的请求</span><br><span class="hljs-keyword">const</span> successfulPromises = results.<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">p</span> =&gt;</span> p.<span class="hljs-property">status</span> === <span class="hljs-string">&#x27;fulfilled&#x27;</span>);<br><br><span class="hljs-comment">// 过滤出失败的请求，并输出原因</span><br><span class="hljs-keyword">const</span> errors = results<br>  .<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">p</span> =&gt;</span> p.<span class="hljs-property">status</span> === <span class="hljs-string">&#x27;rejected&#x27;</span>)<br>  .<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">p</span> =&gt;</span> p.<span class="hljs-property">reason</span>);<br></code></pre></td></tr></table></figure></li></ul><p>有时候，我们不关心异步操作的结果，只关心这些操作有没有结束。这时，<code>Promise.allSettled()</code>方法就很有用。如果没有这个方法，想要确保所有操作都结束，就很麻烦。<code>Promise.all()</code>方法无法做到这一点。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">const</span> urls = [ <span class="hljs-comment">/* ... */</span> ];<br><span class="hljs-keyword">const</span> requests = urls.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">x</span> =&gt;</span> <span class="hljs-title function_">fetch</span>(x));<br><br><span class="hljs-keyword">try</span> &#123;<br>  <span class="hljs-keyword">await</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">all</span>(requests);<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;所有请求都成功。&#x27;</span>);<br>&#125; <span class="hljs-keyword">catch</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;至少一个请求失败，其他请求可能还没结束。&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure></p><p>上面代码中，<code>Promise.all()</code>无法确定所有请求都结束。想要达到这个目的，写起来很麻烦，有了<code>Promise.allSettled()</code>，这就很容易了。</p><p class='p red h4'>参考</p><ul><li><a href="https://juejin.cn/post/7020335414980378655">通俗易懂的 Promise 知识点总结，检验一下你是否真的完全掌握了 Promise？</a></li><li><a href="https://es6.ruanyifeng.com/">ES6 入门教程</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> ES6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Promise </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web worker</title>
      <link href="/archives/5a68d5c3.html"/>
      <url>/archives/5a68d5c3.html</url>
      
        <content type="html"><![CDATA[<h1 id="Web-worker的使用"><a href="#Web-worker的使用" class="headerlink" title="Web worker的使用"></a>Web worker的使用</h1><h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h2><div class="tip warning faa-parent animated-hover"><p class="faa-horizontal">众所周知，JavaScript是单线程的，但是碰到一些计算密集型或者高延迟的任务时，会影响整个页面的运行。Web Worker就是在这个环境下诞生的，它是HTML5的新特性之一,可用户减少主线程上大量的线程活动，也是最常用的worker类型。</p></div><p>Web Worker 的作用，就是为 JavaScript 创造多线程环境，允许主线程创建 Worker 线程，将一些任务分配给后者运行。在主线程运行的同时，Worker 线程在后台运行，两者互不干扰。等到 Worker 线程完成计算任务，再把结果返回给主线程。这样的好处是，一些计算密集型或高延迟的任务，被 Worker 线程负担了，主线程（通常负责 UI 交互）就会很流畅，不会被阻塞或拖慢。</p><p>Worker 线程一旦新建成功，就会始终运行，不会被主线程上的活动（比如用户点击按钮、提交表单）打断。这样有利于随时响应主线程的通信。但是，这也造成了 Worker 比较耗费资源，不应该过度使用，而且一旦使用完毕，就应该关闭。——引自阮一峰的<a href="https://www.ruanyifeng.com/blog/2018/07/web-worker.html">《Web Worker 使用教程》</a></p><div class="tip warning"><p>Web Worker 有以下几个使用注意点:</p></div><p>（1）同源限制</p><p>分配给 Worker 线程运行的脚本文件，必须与主线程的脚本文件同源。</p><p>（2）DOM 限制</p><p>Worker 线程所在的全局对象，与主线程不一样，无法读取主线程所在网页的 DOM 对象，也无法使用<code>document</code>、<code>window</code>、<code>parent</code>这些对象。但是，Worker 线程可以<code>navigator</code>对象和<code>location</code>对象。</p><p>（3）通信联系</p><p>Worker 线程和主线程不在同一个上下文环境，它们不能直接通信，必须通过消息完成。</p><p>（4）脚本限制</p><p>Worker 线程不能执行<code>alert()</code>方法和<code>confirm()</code>方法，但可以使用 XMLHttpRequest 对象发出 AJAX 请求。</p><p>（5）文件限制</p><p>Worker 线程无法读取本地文件，即不能打开本机的文件系统（<code>file://</code>），它所加载的脚本，必须来自网络。</p><h2 id="2-基本用法"><a href="#2-基本用法" class="headerlink" title="2. 基本用法"></a>2. 基本用法</h2><p class='p red h4'>2.1 主线程</p><ol><li><p>在主线程使用new命令,调用window全局对象中的Worker()构造函数，创建一个Worker线程。<br><code>let worker = new Worker(&#39;domo-worker.js&#39;)</code></p><div class="note info simlple flat"><p>Worker()构造函数的参数是一个脚本文件，该文件就是 Worker 线程所要执行的任务。由于 Worker 不能读取本地文件，所以这个脚本必须来自网络。如果下载没有成功（比如404错误），Worker 就会默默地失败。</p></div></li><li><p>主线程调用worker.postMessage()方法，该方法用来向 Worker线程发送消息。<br><code>worker.postMessage(&#39;Hello World&#39;);</code><br><code>worker.postMessage(&#123;method: &#39;echo&#39;, args: [&#39;Work&#39;]&#125;);</code><br>work.postMessage()方法的参数就是主线程传给Worker的数据。它可以使各种数据类型，包括二进制数据。</p></li><li><p>主线程通过<code>worker.onmessage</code>指定监听函数，接收worker线程发回来的消息</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs JS">worker.<span class="hljs-property">onmessage</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Received message &#x27;</span> + event.<span class="hljs-property">data</span>);<br>  <span class="hljs-title function_">doSomething</span>();<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">doSomething</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// 执行任务</span><br>  worker.<span class="hljs-title function_">postMessage</span>(<span class="hljs-string">&#x27;Work done!&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>上面代码中，事件对象的data属性可以获取 Worker 发来的数据。<br>Worker 任务完成以后，主线程就可以使用<code>worker.terminate()</code>把它关掉。</p></li></ol><p class='p red h4'>2.2 Worker线程</p><p>如果需要监听主线程发来的数据，在子线程中使用message事件<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JS">self.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;message&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;<br>  self.<span class="hljs-title function_">postMessage</span>(<span class="hljs-string">&#x27;You said: &#x27;</span> + e.<span class="hljs-property">data</span>);<br>&#125;, <span class="hljs-literal">false</span>);<br></code></pre></td></tr></table></figure><br>上面代码中，self代表子线程自身，即子线程的全局对象。因此self可以省略，等同于以下写法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-comment">// 写法一</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;message&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">postMessage</span>(<span class="hljs-string">&#x27;You said: &#x27;</span> + e.<span class="hljs-property">data</span>);<br>&#125;, <span class="hljs-literal">false</span>);<br><br><span class="hljs-comment">// 写法二</span><br><span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;message&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;<br>  <span class="hljs-title function_">postMessage</span>(<span class="hljs-string">&#x27;You said: &#x27;</span> + e.<span class="hljs-property">data</span>);<br>&#125;, <span class="hljs-literal">false</span>);<br></code></pre></td></tr></table></figure><br>根据主线程发来的数据，Worker线程可以调用不同的方法，下面是一个例子。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs JS">self.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;message&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;<br>  <span class="hljs-keyword">var</span> data = e.<span class="hljs-property">data</span>;<br>  <span class="hljs-keyword">switch</span> (data.<span class="hljs-property">cmd</span>) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;start&#x27;</span>:<br>      self.<span class="hljs-title function_">postMessage</span>(<span class="hljs-string">&#x27;WORKER STARTED: &#x27;</span> + data.<span class="hljs-property">msg</span>);<br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;stop&#x27;</span>:<br>      self.<span class="hljs-title function_">postMessage</span>(<span class="hljs-string">&#x27;WORKER STOPPED: &#x27;</span> + data.<span class="hljs-property">msg</span>);<br>      self.<span class="hljs-title function_">close</span>(); <span class="hljs-comment">// Terminates the worker.</span><br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-attr">default</span>:<br>      self.<span class="hljs-title function_">postMessage</span>(<span class="hljs-string">&#x27;Unknown command: &#x27;</span> + data.<span class="hljs-property">msg</span>);<br>  &#125;;<br>&#125;, <span class="hljs-literal">false</span>);<br></code></pre></td></tr></table></figure></p><p class='p red h4'>2.3 Worker加载脚本</p><p>Worker内部如果要加载其他脚本,有个专门的方法叫<code>importScripts()</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-comment">//加载单个脚本</span><br><span class="hljs-title function_">importScripts</span>(<span class="hljs-string">&#x27;script1.js&#x27;</span>)<br><span class="hljs-comment">// 加载多个脚本</span><br><span class="hljs-title function_">importScripts</span>(<span class="hljs-string">&#x27;script1.js&#x27;</span>,<span class="hljs-string">&#x27;script2.js&#x27;</span>)<br></code></pre></td></tr></table></figure></p><p class='p red h4'>2.4 错误处理</p><p>主线程可以监听 Worker 是否发生错误。如果发生错误，Worker 会触发主线程的error事件。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JS">worker.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;error&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>([<br>    <span class="hljs-string">&#x27;ERROR: Line &#x27;</span>, event.<span class="hljs-property">lineno</span>, <span class="hljs-string">&#x27; in &#x27;</span>, event.<span class="hljs-property">filename</span>, <span class="hljs-string">&#x27;: &#x27;</span>, eventmessage<br>  ].<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&#x27;</span>));<br>&#125;);<br></code></pre></td></tr></table></figure><br>报错控制台信息如下：<br><img src="https://cdn.staticaly.com/gh/Rhh-Z/PicBed@main/note/p1.png" alt="error"></p><p class='p red h4'>2.5 关闭Worker</p><p>使用完毕，为了节省系统资源，必须关闭 Worker。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-comment">// 主线程</span><br>worker.<span class="hljs-title function_">terminate</span>();<br><br><span class="hljs-comment">// Worker 线程</span><br>self.<span class="hljs-title function_">close</span>();<br></code></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> PWA </category>
          
          <category> Web worker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web worker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PWA入门</title>
      <link href="/archives/1ced7ccd.html"/>
      <url>/archives/1ced7ccd.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-PWA"><a href="#1-PWA" class="headerlink" title="1.PWA"></a>1.PWA</h1><p class='p '></p><h2 id="1-1-PWA是什么"><a href="#1-1-PWA是什么" class="headerlink" title="1.1 PWA是什么"></a>1.1 PWA是什么</h2><ul><li><code>PWA</code>（Progressive Web Apps，渐进式 Web 应用）运用现代的 Web API 以及传统的渐进式增强策略来创建跨平台 Web 应用程序。这些应用无处不在、功能丰富，使其具有与原生应用相同的用户体验优势。<a href="https://developer.mozilla.org/zh-CN/docs/Web/Progressive_web_apps">MDN文档地址</a></li><li><code>PWA</code>能够做到原生应用的体验<span class='p blue'>不是靠某一项技术</span>,而是应用一些新技术进行改进，只要你拥有一个web app，name你的PWA旅程就开始了，现在Vue和React等框架的脚手架中都集成了PWA功能，因此我们可以来学习学习里面的一些技术。</li></ul><div class="note orange icon-padding simple"><i class="note-icon fas fa-battery-half"></i><p><span class='p h4 red'>PWA的优势</span>:PWA 是可被发现、易安装、可链接、独立于网络、渐进式、可重复使用、响应性和安全的。关于这些含义的细节，请参阅<a href="https://developer.mozilla.org/en-US/docs/Web/Progressive_web_apps/Introduction#advantages_of_web_applications">PWA的优势</a></p></div><h2 id="1-2-PWA的核心技术"><a href="#1-2-PWA的核心技术" class="headerlink" title="1.2 PWA的核心技术"></a>1.2 PWA的核心技术</h2><ul><li>web app manifest</li><li>service worker</li><li>promise/async/await</li><li>fetch api</li><li>Cache storage</li><li>常见的缓存策略</li><li>notification</li></ul><h2 id="1-3-web-app-minifest-应用程序清单"><a href="#1-3-web-app-minifest-应用程序清单" class="headerlink" title="1.3 web app minifest(应用程序清单)"></a>1.3 web app minifest(应用程序清单)</h2><ol><li>manifest是清单文件，它里面基本包含了应用中所有组件的信息，也给Android系统提供了关于这个应用程序的基本信息，系统在运行任何程序代码之前必须知道这些信息。</li><li>web app manifest是PWA技术集合始终的一部分，可以让网站安装到设备的主屏幕，而不需要用户通过应用商店进行下载。</li><li>web app manifest在一个JSON文件中提供有关应用程序的信息（如名称，作者，图标和描述）</li><li>传统的web app入口：1.网址 2.书签，收藏夹 3.直接搜索</li><li>添加web app manifest后的特点<ul><li>可以添加到桌面，有位移的图标和名称</li><li>有启动时界面，避免生硬的过渡</li><li>隐藏浏览器相关的UI，比如地址栏等</li></ul></li></ol><p class='p red h4'>使用步骤</p><ul><li>在项目根目录下创建一个manifest.json文件</li><li>在index.html中引入manifest.json文件</li><li>在manifest.json文件中提供常见的配置</li><li>需要在https协议或者<a href="http://localhost下访问">http://localhost下访问</a></li></ul><div class="note warning simple"><p>注意:</p><ol><li>PWA的项目必须要在https写一下才能访问，如果是http协议只支持localhost，用于项目调试使用。</li><li>Web 应用程序清单部署在您的 HTML 页面中，使用在你的文件的头部的一个链接标记,如：<code>&lt;link rel=&quot;manifest&quot; href=&quot;manifest.json&quot;&gt;</code></li></ol></div><p class='p red h4'>常见配置</p><ul><li><code>name</code>:用于指定应用的名称，用户安装横幅提示的名称，和启动画面中的文字</li><li><code>short_name</code>:引用的短名称，用于主屏幕显示</li><li><code>start_url</code>:指定用户从设备启动应用程序时加载的URL，可以是绝对路径和相对路径</li><li><code>icons</code>:用于指定可在个钟环境中用作引用程序图标的图像对象数组,144×144</li><li><code>background_color</code>:用户指定启动动画的背景颜色</li><li><code>theme_color</code>:用于指定应用程序的主题颜色</li><li><code>display</code>:用于指定app的显示模式，有以下四个选项<ul><li><code>browser</code>该应用程序在传统的浏览器标签或新窗口中打开，具体实现取决于浏览器和平台。这是默认的设置。</li><li><code>fullscreen</code>全屏显示，所有可用的显示区域都被使用，并且不显示状态栏</li><li><code>standalone</code>让这个引用看起来像一个独立的引用程序，包括具有不同的窗口，在应用程序启动器中拥有自己的图标等</li><li><code>minimal-ui</code>该引用程序将看起来像一个独立的引用程序，但会有浏览器地址栏</li></ul></li></ul><div class="note info simple"><p>更多配置选项，请参考：<a href="https://developer.mozilla.org/zh-CN/docs/Web/Manifest">Web App Manifest</a></p></div><div class="hide-block"><button type="button" class="hide-button" style="">点击查看display三种模式的例子    </button><div class="hide-content"><div class="tabs" id="display"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#display-1">fullscreen</button></li><li class="tab"><button type="button" data-href="#display-2">standalone</button></li><li class="tab"><button type="button" data-href="#display-3">minimal-ui</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="display-1"><p><img src="https://cdn.staticaly.com/gh/Rhh-Z/PicBed@main/note/fullscreen.png" alt="fullscreen"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="display-2"><p><img src="https://cdn.staticaly.com/gh/Rhh-Z/PicBed@main/note/standalone.png" alt="standalone"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="display-3"><p><img src="https://cdn.staticaly.com/gh/Rhh-Z/PicBed@main/note/minimal-ui.png" alt="minimal-ui"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div></div></div><div class="hide-block"><button type="button" class="hide-button" style="background-color: blue white;">点击查看manifest范例    </button><div class="hide-content"><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs JSON"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;HackerWeb&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;short_name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;HackerWeb&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;start_url&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;.&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;display&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;standalone&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;background_color&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#fff&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;description&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;A simply readable Hacker News app.&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;icons&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;src&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;images/touch/homescreen48.png&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;sizes&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;48x48&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;image/png&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;src&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;images/touch/homescreen72.png&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;sizes&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;72x72&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;image/png&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;src&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;images/touch/homescreen96.png&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;sizes&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;96x96&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;image/png&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;src&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;images/touch/homescreen144.png&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;sizes&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;144x144&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;image/png&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;src&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;images/touch/homescreen168.png&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;sizes&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;168x168&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;image/png&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;src&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;images/touch/homescreen192.png&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;sizes&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;192x192&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;image/png&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;related_applications&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;platform&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;web&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;platform&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;play&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;url&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;https://play.google.com/store/apps/details?id=cheeaun.hackerweb&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></div></div><h2 id="1-4-service-worker"><a href="#1-4-service-worker" class="headerlink" title="1.4 service worker"></a>1.4 service worker</h2><p class='p red h4'>一、基本介绍</p><ol><li>一个标准的PWA程序，必须包三个部分<ul><li>https服务器或者<a href="http://localhost">http://localhost</a></li><li>manifest.json</li><li>service worker</li></ul></li><li>W3C组织早在2014年5月就提出过Service Worker这样的一个HTMl5 API，主要用来桌持久的离线缓存。</li><li>前端有很多性能优化的手段：CDN、Css Sprite、文件的合并压缩、异步加载、资源缓存等等，这些手段都是用来做性能优化的，<span class='p red'>但是如果断网了</span>，会发生什么？</li><li>service worker允许web引用在网络环境比较差或者是离线的环境下依旧可以使用</li><li>service worker可以极大的提升web app的用户体验</li><li>service worker是一个独立的worker线程，独立于当前网页进程，<emp>是一种特殊的web worker</emp></li><li>service worker 是一种提供详细的作为浏览器和网络或缓存间的代理的服务。</li></ol><div class='checkbox checked'><input type="radio" checked="checked"/>            <p>在了解Service Worker之前我们先来看看<a href="https://www.rhhz.top/archives/5a68d5c3.html">Web Worker</a></p>            </div><p class='p red h4'>二、基本使用</p><ol><li>在<code>window.onload</code>中注册service worker,防止与其他资源竞争</li><li><code>navigator</code>对象中内置了<code>serviceWorker</code>属性</li><li>service worker在老版本的浏览器中不支持，需要浏览器兼容<code>if(&#39;serviceWorker&#39; in navigator)&#123;&#125;</code></li><li>注册service worker <code>navigator.serviceWorker.register(&quot;./sw.js&quot;)</code>,返回一个<code>Promise</code>对象<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-variable language_">window</span>.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-string">&#x27;serviceWorker&#x27;</span> <span class="hljs-keyword">in</span> navigator)(<br>    navigator.<span class="hljs-property">serviceWorker</span>.<span class="hljs-title function_">register</span>(<span class="hljs-string">&#x27;./sw.js&#x27;</span>)<br>    .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">resitration</span> =&gt;</span> &#123;<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(resitration)<span class="hljs-number">3</span>)<br>    .<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err)<br>    &#125;)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><p class='p red h4'>三、生命周期事件</p><ul><li><code>install</code>事件会在service worker注册成功的时候触发，主要用于缓存静态资源,保证在断网的时候也能够使用。</li><li><code>activate</code>事件会在service worker激活的时候触发，主要用于刷除旧的资源</li><li><code>fetch</code>事件会在发送请求的时候触发，主要用于操作缓存或者读取网络资源</li><li>如果<code>sw.js</code>发生了改变，install事件会重新触发</li><li><code>activate</code>事件会在install事件后触发，但是如果现在已经存在service worker了，那么就处于等待状态，知道当前service worker终止</li><li>因此我们可以通过<code>selfskipWaiting()</code>方法跳过等待，该方法返回一个<code>Promise</code>对象，但是<code>Promise</code>对象是异步的，因此可能会导致<code>skipWaiting</code>还未执行完就执行了<code>activate</code></li><li>所以我们还要添加一步操作，通过<code>eventwaitUntil()</code>方法解决该问题，该方法扩号内的参数是一个promise对象，会在promise结束后才会结束当前生命周期函数，防止浏览器在异步操作之前就停止了生命周期</li><li>service worker激活后，会在下一次刷新页面的时候生效，可以通过<code>self.clients.claim()</code>立即获取控制权</li></ul><div class="hide-block"><button type="button" class="hide-button" style="background-color: blue white;">基础demo    </button><div class="hide-content"><div class="tabs" id="service-worker"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#service-worker-1">index.html</button></li><li class="tab"><button type="button" data-href="#service-worker-2">sw.js</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="service-worker-1"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs HTML">//主进程<br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;load&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">      <span class="hljs-comment">// 2.能力检测</span></span><br><span class="language-javascript">      <span class="hljs-keyword">if</span> (<span class="hljs-string">&#x27;serviceWorker&#x27;</span> <span class="hljs-keyword">in</span> navigator) &#123;</span><br><span class="language-javascript">        navigator.<span class="hljs-property">serviceWorker</span>.<span class="hljs-title function_">register</span>(<span class="hljs-string">&#x27;./sw.js&#x27;</span>)</span><br><span class="language-javascript">          .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">registration</span> =&gt;</span> &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(registration);</span><br><span class="language-javascript">          &#125;)</span><br><span class="language-javascript">          .<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(error);</span><br><span class="language-javascript">          &#125;)</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="service-worker-2"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs JS">self.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;install&#x27;</span>, <span class="hljs-function"><span class="hljs-params">event</span> =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;install&#x27;</span>, event);<br>  <span class="hljs-comment">// self.skipWaiting会让service worker跳过等待，直接进入到activate状态</span><br>  <span class="hljs-comment">// event.wailUntil,会等待skipWaiting结束，才进入到activate  </span><br>  event.<span class="hljs-title function_">waitUntil</span>(self.<span class="hljs-title function_">skipWaiting</span>())<br>&#125;)<br><br>self.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;activate&#x27;</span>, <span class="hljs-function"><span class="hljs-params">event</span> =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;activate&#x27;</span>, event);<br>  <span class="hljs-comment">// 表示service worker激活后，立即获取控制权</span><br>  event.<span class="hljs-title function_">waitUntil</span>(self.<span class="hljs-property">clients</span>.<span class="hljs-title function_">claim</span>())<br>&#125;)<br><br><span class="hljs-comment">// fetch用于抓取网络请求</span><br>self.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;fetch&#x27;</span>, <span class="hljs-function"><span class="hljs-params">event</span> =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;fetch&#x27;</span>, event);<br>&#125;)<br></code></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div></div></div><h2 id="1-5-Fetch-api"><a href="#1-5-Fetch-api" class="headerlink" title="1.5 Fetch api"></a>1.5 Fetch api</h2><p class='p red h4'>基本使用</p><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API"><code>Fetch api</code></a> 提供了一个 JavaScript按口，用于访问和操纵<code>HTTP管道</code>的部分，例如请求和响应。</li><li>在service worker中，如果想要发送请求，无法使用<code>XMLHttnBequest</code>， 必须使用Fetch api</li><li>Fetch api是基丁promise实现的</li><li>fetch(url config)用于发送http请求，返回一个包含响应结果的promise对象</li><li><code>response</code>是一个二级制数据流，需要调用<code>jso()</code>方法可以转换成json数据</li><li><code>Config</code>常见参数<ul><li>body; 用于设置请求体</li><li>headers;用于设置请求头</li><li>method; 用于设置请求方式</li></ul></li></ul><div class="hide-block"><button type="button" class="hide-button" style="background-color: blue white;">点击查看基本示例    </button><div class="hide-content"><div class="tabs" id="fetch"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#fetch-1">JS</button></li><li class="tab"><button type="button" data-href="#fetch-2">data.json</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="fetch-1"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;./data.json&#x27;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>   <span class="hljs-comment">// res是请求到的响应内容，二进制的流</span><br>   <span class="hljs-comment">// fetch强大的地方在于它不仅可以发起请求，还能读取json文件和二进制流的文件</span><br>   <span class="hljs-comment">// 调用res.json()方法，把数据变成json格式，返回的是一个promise对象</span><br>   <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">json</span>()<br> &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> &#123;<br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data);<br> &#125;)<br></code></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="fetch-2"><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JSon"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;data&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;张三&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;18&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div></div></div><div class="hide-block"><button type="button" class="hide-button" style="background-color: blue white;">点击查看结果    </button><div class="hide-content"><p><img src="https://cdn.staticaly.com/gh/Rhh-Z/PicBed@main/note/p2.png" alt="p2"></p></div></div><h2 id="1-6-cache-storage-离线处理"><a href="#1-6-cache-storage-离线处理" class="headerlink" title="1.6 cache storage(离线处理)"></a>1.6 cache storage(离线处理)</h2><p class='p red h4'>基本使用</p><ol><li><code>cacheStorage</code>接口表示<code>Cache</code>对象的存储。配合service worker来实现资源的缓存</li><li><code>cachesapi</code>类似于数据库的操作</li><li><code>caches.open(cacheName).then(function(cache)0)</code>: 用于打开缓存，返回一个匹配<code>cacheName</code>的cache对象的promise，类似于连接数据库<ul><li><code>caches.kevs()</code> 返回一个promise对象，包括所有的缓存的key(数据库名)</li><li><code>caches.delete(key)</code>根据key删除对应的缓存(数据库)cache对象常用方法(单条数据的操作)</li></ul></li><li>cache 接口为缓存的 <code>Request/Response</code> 对象对提供存储机制<code>cache.put(req,res)</code>把请求当成key，并且把对应的响应存储起来<code>cache.add(url)</code>根据url发起请求，并且把响应结果存储起来</li><li><code>cache.addAll(urls)</code>抓取一个url数组，并且把结果都存储起来<br>6 此时Caches中已经缓存了我们需要的静态资源，当请求失败时，我们可以去缓存中读出对应的数据，通过event.respondWith(response)可以控制响应的内容</li><li><code>cache.match(req)</code>: 获取req对应的response</li></ol><div class="hide-block"><button type="button" class="hide-button" style="background-color: bule white;">点击查看缓存策略    </button><div class="hide-content"><div class="tabs" id="cache-category"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#cache-category-1">只读缓存</button></li><li class="tab"><button type="button" data-href="#cache-category-2">只读网络</button></li><li class="tab"><button type="button" data-href="#cache-category-3">缓存优先</button></li><li class="tab"><button type="button" data-href="#cache-category-4">网络优先</button></li><li class="tab"><button type="button" data-href="#cache-category-5">缓存与网络竞速</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="cache-category-1"><p><img src="https://cdn.staticaly.com/gh/Rhh-Z/PicBed@main/note/cache1.png" alt="cache1"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="cache-category-2"><p><img src="https://cdn.staticaly.com/gh/Rhh-Z/PicBed@main/note/cache2.png" alt="cache2"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="cache-category-3"><p><img src="https://cdn.staticaly.com/gh/Rhh-Z/PicBed@main/note/cache3.png" alt="cache3"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="cache-category-4"><p><img src="https://cdn.staticaly.com/gh/Rhh-Z/PicBed@main/note/cache4.png" alt="cache4"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="cache-category-5"><p><img src="https://cdn.staticaly.com/gh/Rhh-Z/PicBed@main/note/cache5.png" alt="cache5"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><div class="tip warning"><p><wavy>注意避免缓存跨域资源</wavy>,由于更新机制的问题，如果 Service Worker 缓存了错误的结果，将会对 web 应用造成灾难性的后果。我们必须小心翼翼的检查网络返回是否准确。一种常见的做法是只缓存满足如下条件的结果:<br>1.响应状态码为200;避免缓存304、404、50x等常见的结果<br>2.响应类型为basic或者cors;即只缓存源、或者正确地跨域请求结果，避免缓存错误的响应和不正确的跨域请求响应(opaque)</p></div></div></div><p class='p red h4'>基础示例</p><div class="tabs" id="cache"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#cache-1">index.js</button></li><li class="tab"><button type="button" data-href="#cache-2">sw.js</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="cache-1"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-comment">// 页面加载完成后注册service worker</span><br><span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;load&#x27;</span>, <span class="hljs-keyword">async</span> () =&gt; &#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-string">&#x27;serviceWorker&#x27;</span> <span class="hljs-keyword">in</span> navigator) &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-keyword">const</span> registration = <span class="hljs-keyword">await</span> navigator.<span class="hljs-property">serviceWorker</span>.<span class="hljs-title function_">register</span>(<span class="hljs-string">&#x27;sw.js&#x27;</span>)<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;注册成功&#x27;</span>, registration);<br>    &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;注册失败&#x27;</span>);<br>    &#125;<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="cache-2"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">CACHE_NAME</span> = <span class="hljs-string">&#x27;cache_v1&#x27;</span><br><span class="hljs-keyword">const</span> urls = [<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-string">&#x27;/index.css&#x27;</span>, <span class="hljs-string">&#x27;/manifest.json&#x27;</span>, <span class="hljs-string">&#x27;/img/33.jpg&#x27;</span>]<br><span class="hljs-comment">// 主要用于存储资源</span><br>self.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;install&#x27;</span>, <span class="hljs-keyword">async</span> event =&gt; &#123;<br>  <span class="hljs-comment">// 开启一个cache,返回的是一个promise对象，用async/await处理</span><br>  <span class="hljs-keyword">const</span> cache = <span class="hljs-keyword">await</span> caches.<span class="hljs-title function_">open</span>(<span class="hljs-variable constant_">CACHE_NAME</span>)<br>  <span class="hljs-comment">// cache对象可以存储资源</span><br>  <span class="hljs-comment">// 用addAll()方法将静态资源添加进去，等待cache把资源存储起来</span><br>  <span class="hljs-keyword">await</span> cache.<span class="hljs-title function_">addAll</span>(urls)<br>  <span class="hljs-keyword">await</span> self.<span class="hljs-title function_">skipWaiting</span>()<br>&#125;)<br><br><span class="hljs-comment">// 主要用于清除旧的缓存</span><br>self.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;activate&#x27;</span>, <span class="hljs-keyword">async</span> event =&gt; &#123;<br>  <span class="hljs-comment">// 获取所有新的资源的keys</span><br>  <span class="hljs-keyword">const</span> keys = <span class="hljs-keyword">await</span> caches.<span class="hljs-title function_">keys</span>()<br>  <span class="hljs-comment">// 删除旧的资源</span><br>  keys.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">key</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (key !== <span class="hljs-variable constant_">CACHE_NAME</span>) &#123;<br>      caches.<span class="hljs-title function_">delete</span>(key)<br>    &#125;<br>  &#125;)<br>  <span class="hljs-comment">// 表示service worker激活后，立即获取控制权</span><br>  <span class="hljs-keyword">await</span> self.<span class="hljs-property">clients</span>.<span class="hljs-title function_">claim</span>()<br>&#125;)<br><br><span class="hljs-comment">// fetch用于抓取网络请求</span><br>self.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;fetch&#x27;</span>, <span class="hljs-keyword">async</span> event =&gt; &#123;<br>  <span class="hljs-comment">// 获取请求对象</span><br>  <span class="hljs-comment">// 只缓存同源的内容</span><br>  <span class="hljs-keyword">const</span> req = event.<span class="hljs-property">request</span><br>  <span class="hljs-comment">// http://localhost</span><br>  <span class="hljs-keyword">const</span> url = <span class="hljs-keyword">new</span> <span class="hljs-title function_">URL</span>(req.<span class="hljs-property">url</span>)<br>  <span class="hljs-keyword">if</span> (url.<span class="hljs-property">origin</span> !== self.<span class="hljs-property">origin</span>) &#123;<br>    <span class="hljs-keyword">return</span><br>  &#125;<br><br>  <span class="hljs-comment">// 当我们请求动态、静态两种不同资源时需要用到不同的缓存策略</span><br>  <span class="hljs-keyword">if</span> (req.<span class="hljs-property">url</span>.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&#x27;/api&#x27;</span>)) &#123;<span class="hljs-comment">//如果是动态资源</span><br>    event.<span class="hljs-title function_">respondWith</span>(<span class="hljs-title function_">networkFirst</span>(req))<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">// 给浏览器响应</span><br>    event.<span class="hljs-title function_">respondWith</span>(<span class="hljs-title function_">cacheFirst</span>(req))<br>  &#125;<br><br>&#125;)<br><br><span class="hljs-comment">// 缓存优先 一般使用于静态资源</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">cacheFirst</span>(<span class="hljs-params">req</span>) &#123;<br>  <span class="hljs-keyword">const</span> cache = <span class="hljs-keyword">await</span> caches.<span class="hljs-title function_">open</span>(<span class="hljs-variable constant_">CACHE_NAME</span>)<br>  <span class="hljs-keyword">const</span> cached = cache.<span class="hljs-title function_">match</span>(req)<br>  <span class="hljs-comment">// 如果从缓存中得到了,就直接返回缓存的数据</span><br>  <span class="hljs-keyword">if</span> (cached) &#123;<br>    <span class="hljs-keyword">return</span> cached<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">const</span> fetchRequest = req.<span class="hljs-title function_">clone</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">fetch</span>(fetchRequest).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">response</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">if</span> (!response || response.<span class="hljs-property">status</span> !== <span class="hljs-number">200</span> || response.<span class="hljs-property">type</span> !== <span class="hljs-string">&#x27;basic&#x27;</span>) &#123;<br>        <span class="hljs-keyword">return</span> response;<br>      &#125;<br>      <span class="hljs-keyword">return</span> response;<br>    &#125;);<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 网络优先 用户发送请求</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">networkFirst</span>(<span class="hljs-params">req</span>) &#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-keyword">const</span> fetchRequest = req.<span class="hljs-property">clone</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">fetch</span>(fetchRequest).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">response</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">if</span> (!response || response.<span class="hljs-property">status</span> !== <span class="hljs-number">200</span> || response.<span class="hljs-property">type</span> !== <span class="hljs-string">&#x27;basic&#x27;</span>) &#123;<br>        <span class="hljs-keyword">return</span> response;<br>      &#125;<br>      <span class="hljs-keyword">return</span> response;<br>    &#125;);<br>  &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>    <span class="hljs-keyword">const</span> cache = <span class="hljs-keyword">await</span> caches.<span class="hljs-title function_">open</span>(<span class="hljs-variable constant_">CACHE_NAME</span>)<br>    <span class="hljs-keyword">const</span> cached = <span class="hljs-keyword">await</span> cache.<span class="hljs-title function_">match</span>(req)<br>    <span class="hljs-keyword">return</span> cached<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>此时在控制台中可以查看到注册成功的提示<br><img src="https://cdn.staticaly.com/gh/Rhh-Z/PicBed@main/note/p3.png" alt="p2"></p><p>进入应用中查看浏览器中的缓存，可以看到缓存成功<br><img src="https://cdn.staticaly.com/gh/Rhh-Z/PicBed@main/note/p4.png" alt="p4"></p><p>然后把网络关闭，再刷新，可以看到依然能够访问当前页面<br><img src="https://cdn.staticaly.com/gh/Rhh-Z/PicBed@main/note/p5.png" alt="p5"></p><h2 id="1-7-Notification-api"><a href="#1-7-Notification-api" class="headerlink" title="1.7 Notification api"></a>1.7 Notification api</h2><p class='p red h4'>基本使用</p><ol><li><code>Notification API</code>的通知接口用于向用户配置和显示桌面通知</li><li><code>Notification permission</code>可以获取当前用户的授权情况<ul><li>Default:默认的，未授权</li><li><code>Denied</code>:拒绝的，如果拒绝了，无法再次请求授权，也无法弹窗提醒</li><li><code>Granted</code>:授权的，可以弹窗提醒</li></ul></li><li>通过<code>Notification.requestPermission()</code>可以请求用户的授权</li><li>通过<code>new Notification(&#39;title&#39;,&#123;body:&#39;,icon:&#39;&#125;)</code>可以显示通知</li><li>在授权的情况下,可以在<code>service worker</code>中显示通知<code>self.registration.showNotification(&#39;你好&#39;,&#123;body:&#39;msg&#39;&#125;)</code></li></ol><p class='p red h4'>基础示例</p><div class="tabs" id="notification"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#notification-1">index.js</button></li><li class="tab"><button type="button" data-href="#notification-2">演示效果</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="notification-1"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Js"><span class="hljs-comment">// 在index.js中添加以下几行代码</span><br><span class="hljs-comment">// 如果进入页面发现用户没有联网，给用户一个通知</span><br><span class="hljs-keyword">if</span> (<span class="hljs-title class_">Notification</span>.<span class="hljs-property">permission</span> === <span class="hljs-string">&#x27;default&#x27;</span>) &#123;<br>  <span class="hljs-title class_">Notification</span>.<span class="hljs-title function_">requestPermission</span>()<br>&#125;<br><span class="hljs-keyword">if</span> (!navigator.<span class="hljs-property">onLine</span>) &#123;<br>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">Notification</span>(<span class="hljs-string">&#x27;提示&#x27;</span>, &#123; <span class="hljs-attr">body</span>: <span class="hljs-string">&#x27;您当前没有网络，访问的是缓存内容&#x27;</span> &#125;)<br>&#125;<br><span class="hljs-comment">// 重新脸上网络后，给出提示</span><br><span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;online&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">Notification</span>(<span class="hljs-string">&#x27;提示&#x27;</span>, &#123; <span class="hljs-attr">body</span>: <span class="hljs-string">&#x27;网络已链接，您可以刷新访问最新&#x27;</span> &#125;)<br>&#125;)<br></code></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="notification-2"><p>在浏览器中使用offline调式断网和连网的情况，可以看到能够给出提示<br><img src="https://cdn.staticaly.com/gh/Rhh-Z/PicBed@main/note/p7.png" alt="p7"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
      
      
      <categories>
          
          <category> PWA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PWA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown语法与外挂标签</title>
      <link href="/archives/1e814d34.html"/>
      <url>/archives/1e814d34.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-Markdown语法格式"><a href="#1-Markdown语法格式" class="headerlink" title="1.Markdown语法格式"></a>1.Markdown语法格式</h1><div class="note info simple"><p>参考<a href="http://markdown.p2hp.com/basic-syntax/index.html">Markdown基本语法</a></p></div><h2 id="1-1代码块"><a href="#1-1代码块" class="headerlink" title="1.1代码块"></a>1.1代码块</h2><div class="tabs" id="代码块"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#代码块-1">示例源码</button></li><li class="tab"><button type="button" data-href="#代码块-2">渲染结果</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="代码块-1"><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell">\```shell<br><span class="hljs-meta prompt_"># </span><span class="language-bash">VSCode终端</span><br>hexo clean; hexo s<br>hexo clean; hexo g; hexo d<br>git add .; git commit -m &quot;npm publish&quot;; npm version patch; <br>git push<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Cmder终端</span><br>hexo clean &amp;&amp; hexo s<br>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d<br>git add . &amp;&amp; git commit -m &quot;npm publish&quot; &amp;&amp; npm version patch<br>git push<br>\```<br></code></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="代码块-2"><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">VSCode终端</span><br>hexo clean; hexo s<br>hexo clean; hexo g; hexo d<br>git add .; git commit -m &quot;npm publish&quot;; npm version patch; <br>git push<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Cmder终端</span><br>hexo clean &amp;&amp; hexo s<br>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d<br>git add . &amp;&amp; git commit -m &quot;npm publish&quot; &amp;&amp; npm version patch<br>git push<br></code></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-2多级标题"><a href="#1-2多级标题" class="headerlink" title="1.2多级标题"></a>1.2多级标题</h2><div class="tabs" id="多级标题"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#多级标题-1">示例源码</button></li><li class="tab"><button type="button" data-href="#多级标题-2">渲染结果</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="多级标题-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Markdown"><span class="hljs-section"># H1</span><br><span class="hljs-section">## H2</span><br><span class="hljs-section">### H3</span><br><span class="hljs-section">#### H4</span><br><span class="hljs-section">##### H5</span><br><span class="hljs-section">###### H6</span><br></code></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="多级标题-2"><p>见本文使用的标题！</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-3文字样式"><a href="#1-3文字样式" class="headerlink" title="1.3文字样式"></a>1.3文字样式</h2><div class="note info simple"><p>此部分可参考:<a href="https://blog.csdn.net/qq_43732429/article/details/108034518">【Markdown语法】 字体颜色大小及文字底色设置</a></p></div><div class="tabs" id="文字样式"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#文字样式-1">示例源码</button></li><li class="tab"><button type="button" data-href="#文字样式-2">渲染结果</button></li><li class="tab"><button type="button" data-href="#文字样式-3">常用颜色</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="文字样式-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs Markdown"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">u</span>&gt;</span></span>下划线演示<span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">u</span>&gt;</span></span><br><br>文字<span class="hljs-strong">**加粗**</span>演示<br>文字<span class="hljs-strong">__加粗__</span>演示<br><br>文字<span class="hljs-emphasis">*斜体*</span>演示<br>文字<span class="hljs-emphasis">_斜体_</span>演示<br><br>文本<span class="hljs-code">`高亮`</span>演示<br><br>文本~~删除~~线演示<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">font</span> <span class="hljs-attr">size</span> = <span class="hljs-string">5</span>&gt;</span></span>5号字<span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">font</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">font</span> <span class="hljs-attr">face</span>=<span class="hljs-string">&quot;黑体&quot;</span>&gt;</span></span>黑体<span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">font</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">font</span> <span class="hljs-attr">color</span>=<span class="hljs-string">blue</span>&gt;</span></span>蓝色<span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">font</span>&gt;</span></span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">bgcolor</span>=<span class="hljs-string">MistyRose</span>&gt;</span></span>这里的背景色是：MistyRosen，此处输入任意想输入的内容<span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span></span><br></code></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="文字样式-2"><p><u>下划线演示</u></p><p>文字<strong>加粗</strong>演示<br>文字<strong>加粗</strong>演示</p><p>文字<em>斜体</em>演示<br>文字<em>斜体</em>演示</p><p>文本<code>高亮</code>演示</p><p>文本<del>删除</del>线演示</p><font size = 5>5号字</font><font face="黑体">黑体</font><font color=blue>蓝色</font><table><tr><td bgcolor=MistyRose>这里的背景色是：MistyRosen，此处输入任意想输入的内容</td></tr></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="文字样式-3"><table><tr><td bgcolor=Beige>这里的背景色是：Beige，此处输入任意想输入的内容</td></tr></table><table><tr><td bgcolor=DarkSeaGreen>这里的背景色是：DarkSeaGreen，此处输入任意想输入的内容</td></tr></table><table><tr><td bgcolor=MistyRose>这里的背景色是：MistyRose，此处输入任意想输入的内容</td></tr></table><p><font color=NavajoWhite>color=NavajoWhite</font> <br/></p><p><font color=Feldspar>color=Feldspar</font> <br/></p><p><font color=SandyBrown>color=SandyBrown</font> <br/></p><p><font color=Salmon>color=Salmon</font> <br/></p><p><font color=Pink>color=Pink</font> <br/></p><p><font color=PaleVioletRed>color=PaleVioletRed</font> <br/></p><p><font color=HotPink>color=HotPink</font> <br/></p><p><font color=silver>color=silver</font> <br/></p><p><font color=LightSlateGray>color=LightSlateGray</font> <br/></p><p><font color=SlateGray>color=SlateGray</font> <br/></p><p><font color=RosyBrown>color=RosyBrown</font> <br/></p><p><font color=maroon>color=maroon</font> <br/></p><p><font color=DarkSeaGreen>color=DarkSeaGreen</font> <br/></p><p><font color=LightSeaGreen>color=LightSeaGreen</font> <br/></p><p><font color=SeaGreen>color=SeaGreen</font> <br/></p><p><font color=PowderBlue>color=PowderBlue</font> <br/></p><p><font color=LightSteelBlue>color=LightSteelBlue</font> <br/></p><p><font color=CadetBlue>color=CadetBlue</font> <br/></p><p><font color=navy>color=navy</font> <br/></p><p><font color=Thistle>color=Thistle</font> <br/></p><p><font color=Plum>color=Plum</font> <br/></p><p><font color=MediumPurple>color=MediumPurple</font> <br/></p><p><font color=Purple>color=Purple</font> <br/></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-4引用"><a href="#1-4引用" class="headerlink" title="1.4引用"></a>1.4引用</h2><div class="tabs" id="引用"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#引用-1">示例源码</button></li><li class="tab"><button type="button" data-href="#引用-2">渲染结果</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="引用-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Markdown"><span class="hljs-quote">&gt;  Java</span><br><span class="hljs-quote">&gt; 二级引用演示</span><br><span class="hljs-quote">&gt; MySQL</span><br><span class="hljs-quote">&gt; &gt;外键</span><br><span class="hljs-quote">&gt; &gt;</span><br><span class="hljs-quote">&gt; &gt;事务</span><br><span class="hljs-quote">&gt; &gt;</span><br><span class="hljs-quote">&gt; &gt;<span class="hljs-strong">**行级锁**</span>(引用内部一样可以用格式)</span><br><span class="hljs-quote">&gt; </span><br><span class="hljs-quote">&gt; ....</span><br></code></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="引用-2"><blockquote><p> Java<br>二级引用演示<br>MySQL</p><blockquote><p>外键</p><p>事务</p><p><strong>行级锁</strong>(引用内部一样可以用格式)</p></blockquote><p>….</p></blockquote><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-5水平线"><a href="#1-5水平线" class="headerlink" title="1.5水平线"></a>1.5水平线</h2><div class="tabs" id="水平线"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#水平线-1">示例源码</button></li><li class="tab"><button type="button" data-href="#水平线-2">渲染结果</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="水平线-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Markdown">---<br><span class="hljs-strong">**<span class="hljs-emphasis">*</span></span><br><span class="hljs-emphasis"><span class="hljs-strong">_________________</span></span><br></code></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="水平线-2"><hr><hr><hr><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-6列表"><a href="#1-6列表" class="headerlink" title="1.6列表"></a>1.6列表</h2><div class="note info simple"><p>注意:*，+，-效果都是一样的</p></div><h3 id="1-6-1无序列表"><a href="#1-6-1无序列表" class="headerlink" title="1.6.1无序列表"></a>1.6.1无序列表</h3><div class="tabs" id="无序列表"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#无序列表-1">示例源码</button></li><li class="tab"><button type="button" data-href="#无序列表-2">渲染结果</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="无序列表-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Markdown"><span class="hljs-bullet">*</span> Java<br><span class="hljs-bullet">*</span> Python<br><span class="hljs-bullet">*</span> ...<br><br><span class="hljs-bullet">+</span> Java<br><span class="hljs-bullet">+</span> Python<br><span class="hljs-bullet">+</span> ...<br><br><span class="hljs-bullet">-</span> Java<br><span class="hljs-bullet">-</span> Python<br><span class="hljs-bullet">-</span> ...<br></code></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="无序列表-2"><ul><li>Java</li><li>Python</li><li>…</li></ul><ul><li>Java</li><li>Python</li><li>…</li></ul><ul><li>Java</li><li>Python</li><li>…</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="1-6-2有序列表"><a href="#1-6-2有序列表" class="headerlink" title="1.6.2有序列表"></a>1.6.2有序列表</h3><div class="tabs" id="有序列表"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#有序列表-1">示例源码</button></li><li class="tab"><button type="button" data-href="#有序列表-2">渲染结果</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="有序列表-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Markdown"><span class="hljs-section"># 注意.后面有空格</span><br><span class="hljs-bullet">1.</span> <br><span class="hljs-bullet">2.</span> <br><span class="hljs-bullet">3.</span> <br><span class="hljs-bullet">4.</span> <br></code></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="有序列表-2"><ol><li></li><li></li><li></li><li></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-7图片"><a href="#1-7图片" class="headerlink" title="1.7图片"></a>1.7图片</h2><div class="tabs" id="图片"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#图片-1">示例源码</button></li><li class="tab"><button type="button" data-href="#图片-2">渲染结果</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="图片-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Markdown"><span class="hljs-section"># 本地图片</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/img/j51.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;示例图片&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;zoom:50%;&quot;</span> /&gt;</span></span><br><span class="hljs-section"># 在线图片</span><br>![<span class="hljs-string">code</span>](<span class="hljs-link">https://cdn.staticaly.com/gh/Rhh-Z/PicBed@main/img/j1.jpg</span>)<br></code></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="图片-2"><p>本地图片<br><img src="/img/j51.jpg" alt="示例图片" style="zoom:50%;" /><br>在线图片<br><img src="https://cdn.staticaly.com/gh/Rhh-Z/PicBed@main/img/j1.jpg" alt="code"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-8表格"><a href="#1-8表格" class="headerlink" title="1.8表格"></a>1.8表格</h2><div class="tabs" id="表格"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#表格-1">示例源码</button></li><li class="tab"><button type="button" data-href="#表格-2">渲染结果</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="表格-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Markdown">| 项目标号 | 资金     | 备注 |<br>| -------- | -------- | ---- |<br>| 1        | 100，000 | 无   |<br>| 2        | 200，000 | 无   |<br>| 3        | 300,600  | 重要 |<br></code></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="表格-2"><div class="table-container"><table><thead><tr><th>项目标号</th><th>资金</th><th>备注</th></tr></thead><tbody><tr><td>1</td><td>100，000</td><td>无</td></tr><tr><td>2</td><td>200，000</td><td>无</td></tr><tr><td>3</td><td>300,600</td><td>重要</td></tr></tbody></table></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-9代码"><a href="#1-9代码" class="headerlink" title="1.9代码"></a>1.9代码</h2><div class="note orange icon-padding modern"><i class="note-icon fas fa-battery-half"></i><p>要将单词或短语表示为代码，请将其括在勾号（`）中。</p></div><div class="tabs" id="代码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#代码-1">示例源码</button></li><li class="tab"><button type="button" data-href="#代码-2">渲染结果</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="代码-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Markdown"><span class="hljs-code">`代码块`</span><br><span class="hljs-code">`Zywoo`</span><br></code></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="代码-2"><p><code>代码块</code><br><code>Zywoo</code></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-10链接"><a href="#1-10链接" class="headerlink" title="1.10链接"></a>1.10链接</h2><div class="tabs" id="链接"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#链接-1">示例源码</button></li><li class="tab"><button type="button" data-href="#链接-2">渲染结果</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="链接-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Markdown"><span class="hljs-section"># 普通链接</span><br>My favorite basketball player is [<span class="hljs-string">Stepen Curry</span>](<span class="hljs-link">https://baike.baidu.com/link?url=dM0bPKZ1wLvh7MnDxSW9xqHGB4H96aLnYQ89gOdUd_KG9FWBWE2OeIw-lkGiwD8hM3TJErXp7ZkfE_bOC_8jgYIvUKcjaZRveDIeqZZ5hpP0xetKQqdBlFpudvylk4y5871OfbIljrILPTpFdG9_Ra</span>)<br>My favorite CSGO player is [<span class="hljs-string">Zywoo</span>](<span class="hljs-link">https://www.18183.com/xinwen/202208/4098811.html</span>)<br><br><span class="hljs-section"># 网址和电子邮件地址(要将URL或电子邮件地址快速转换为链接，请将其括在尖括号中)</span><br><span class="language-xml">&lt;https://markdown.p2hp.com&gt;</span><br><span class="language-xml">&lt;fake@example.com&gt;</span><br><br><span class="hljs-section"># 格式化链接(为了强调链接，请在方括号和括号之前和之后添加星号)</span><br>I love supporting the <span class="hljs-strong">**[<span class="hljs-string">EFF</span>](<span class="hljs-link">https://eff.org</span>)**</span>.<br>This is the <span class="hljs-emphasis">*[<span class="hljs-string">Markdown Guide</span>](<span class="hljs-link">https://markdown.p2hp.com</span>)*</span>.<br></code></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="链接-2"><p>普通链接:<br>My favorite basketball player is <a href="https://baike.baidu.com/link?url=dM0bPKZ1wLvh7MnDxSW9xqHGB4H96aLnYQ89gOdUd_KG9FWBWE2OeIw-lkGiwD8hM3TJErXp7ZkfE_bOC_8jgYIvUKcjaZRveDIeqZZ5hpP0xetKQqdBlFpudvylk4y5871OfbIljrILPTpFdG9_Ra">Stepen Curry</a><br>My favorite CSGO player is <a href="https://www.18183.com/xinwen/202208/4098811.html">Zywoo</a></p><p>网址和电子邮件地址:<br><a href="https://markdown.p2hp.com">https://markdown.p2hp.com</a><br><a href="&#x6d;&#97;&#x69;&#x6c;&#116;&#111;&#x3a;&#102;&#x61;&#107;&#x65;&#x40;&#x65;&#x78;&#97;&#x6d;&#112;&#108;&#x65;&#x2e;&#x63;&#x6f;&#x6d;">&#102;&#x61;&#107;&#x65;&#x40;&#x65;&#x78;&#97;&#x6d;&#112;&#108;&#x65;&#x2e;&#x63;&#x6f;&#x6d;</a></p><p>格式化链接:<br>I love supporting the <strong><a href="https://eff.org">EFF</a></strong>.<br>This is the <em><a href="https://markdown.p2hp.com">Markdown Guide</a></em>.</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-11转义字符"><a href="#1-11转义字符" class="headerlink" title="1.11转义字符"></a>1.11转义字符</h2><div class="note orange icon-padding modern"><i class="note-icon fas fa-battery-half"></i><p>要显示原义字符，否则将用于设置Markdown文档中的文本格式\，请在字符前面添加反斜杠</p></div><div class="tabs" id="转义字符"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#转义字符-1">示例源码</button></li><li class="tab"><button type="button" data-href="#转义字符-2">渲染结果</button></li><li class="tab"><button type="button" data-href="#转义字符-3">你可以转义的字符</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="转义字符-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Markdown">\<span class="hljs-emphasis">* 如果没有反斜杠，这将是无序列表中的项目符号.</span><br></code></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="转义字符-2"><p>* 如果没有反斜杠，这将是无序列表中的项目符号.</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="转义字符-3"><div class="table-container"><table><thead><tr><th>字符</th><th>名称</th></tr></thead><tbody><tr><td>\</td><td>反斜线</td></tr><tr><td>`</td><td>刻度线</td></tr><tr><td>*</td><td>星号</td></tr><tr><td>_</td><td>下划线</td></tr><tr><td>{}</td><td>大括号</td></tr><tr><td>[]</td><td>中括号</td></tr><tr><td>()</td><td>括号</td></tr><tr><td>#</td><td>井号</td></tr><tr><td>+</td><td>加号</td></tr><tr><td>-</td><td>减号（连字符）</td></tr><tr><td>.</td><td>点</td></tr><tr><td>!</td><td>感叹号</td></tr></tbody></table></div><p>and so on …</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="2-Butterfly外挂标签"><a href="#2-Butterfly外挂标签" class="headerlink" title="2.Butterfly外挂标签"></a>2.Butterfly外挂标签</h1><div class="note warning simple"><p>注意！此部分需要添加了外挂标签的配置后才能使用</p></div><div class="note info simple"><p>这部分参考Fomalhaut🥝:<a href="https://www.fomal.cc/posts/2013454d.html">Markdown 语法与外挂标签写法汇总</a></p></div><h2 id="2-1行内文本样式text"><a href="#2-1行内文本样式text" class="headerlink" title="2.1行内文本样式text"></a>2.1行内文本样式text</h2><div class="tabs" id="行内文本样式text"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#行内文本样式text-1">标签语法</button></li><li class="tab"><button type="button" data-href="#行内文本样式text-2">示例源码</button></li><li class="tab"><button type="button" data-href="#行内文本样式text-3">渲染结果</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="行内文本样式text-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Markdown">&#123;% u 文本内容 %&#125;<br>&#123;% emp 文本内容 %&#125;<br>&#123;% wavy 文本内容 %&#125;<br>&#123;% del 文本内容 %&#125;<br>&#123;% kbd 文本内容 %&#125;<br>&#123;% psw 文本内容 %&#125;<br></code></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="行内文本样式text-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Markdown"><span class="hljs-bullet">1.</span> 带 &#123;% u 下划线 %&#125; 的文本<br><span class="hljs-bullet">2.</span> 带 &#123;% emp 着重号 %&#125; 的文本<br><span class="hljs-bullet">3.</span> 带 &#123;% wavy 波浪线 %&#125; 的文本<br><span class="hljs-bullet">4.</span> 带 &#123;% del 删除线 %&#125; 的文本<br><span class="hljs-bullet">5.</span> 键盘样式的文本 &#123;% kbd command %&#125; + &#123;% kbd D %&#125;<br><span class="hljs-bullet">6.</span> 密码样式的文本：&#123;% psw 这里没有验证码 %&#125;<br></code></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="行内文本样式text-3"><ol><li>带 <u>下划线</u> 的文本</li><li>带 <emp>着重号</emp> 的文本</li><li>带 <wavy>波浪线</wavy> 的文本</li><li>带 <del>删除线</del> 的文本</li><li>键盘样式的文本 <kbd>command</kbd> + <kbd>D</kbd></li><li>密码样式的文本：<psw>这里没有验证码</psw></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-2行内文本-span"><a href="#2-2行内文本-span" class="headerlink" title="2.2行内文本 span"></a>2.2行内文本 span</h2><div class="tabs" id="行内文本span"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#行内文本span-1">标签语法</button></li><li class="tab"><button type="button" data-href="#行内文本span-2">配置参数</button></li><li class="tab"><button type="button" data-href="#行内文本span-3">示例源码</button></li><li class="tab"><button type="button" data-href="#行内文本span-4">渲染结果</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="行内文本span-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Markdown">&#123;% span 样式参数(参数以空格划分), 文本内容 %&#125;<br></code></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="行内文本span-2"><ol><li><code>字体</code>: logo, code</li><li><code>颜色</code>: red,yellow,green,cyan,blue,gray</li><li><code>大小</code>: small, h4, h3, h2, h1, large, huge, ultra</li><li><code>对齐方向</code>: left, center, right</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="行内文本span-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Markdown"><span class="hljs-bullet">-</span> 彩色文字<br>这段文字包含了各种颜色的标签文字:&#123;% span red, 红色 %&#125;、&#123;% span yellow, 黄色 %&#125;、&#123;% span green, 绿色 %&#125;、&#123;% span cyan, 青色 %&#125;、&#123;% span blue, 蓝色 %&#125;、&#123;% span gray, 灰色 %&#125;<br><span class="hljs-bullet">-</span> 大小位置展示<br>&#123;% span left code small blue, Rhh %&#125;<br>&#123;% span center code large blue, Rhh %&#125;<br>&#123;% span right code ultra blue, Rhh %&#125;<br></code></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="行内文本span-4"><ul><li>彩色文字<br>这段文字包含了各种颜色的标签文字:<span class='p red'>红色</span>、<span class='p yellow'>黄色</span>、<span class='p green'>绿色</span>、<span class='p cyan'>青色</span>、<span class='p blue'>蓝色</span>、<span class='p gray'>灰色</span></li><li>大小位置展示<br><span class='p left code small blue'>Rhh</span><br><span class='p center code large blue'>Rhh</span><br><span class='p right code ultra blue'>Rhh</span></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-3段落文本-P"><a href="#2-3段落文本-P" class="headerlink" title="2.3段落文本 P"></a>2.3段落文本 P</h2><div class="tabs" id="段落文本-p"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#段落文本-p-1">标签语法</button></li><li class="tab"><button type="button" data-href="#段落文本-p-2">配置参数</button></li><li class="tab"><button type="button" data-href="#段落文本-p-3">示例源码</button></li><li class="tab"><button type="button" data-href="#段落文本-p-4">渲染结果</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="段落文本-p-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Markdown">&#123;% p 样式参数(参数以空格划分), 文本内容 %&#125;<br></code></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="段落文本-p-2"><ol><li><code>字体</code>: logo, code</li><li><code>颜色</code>: red,yellow,green,cyan,blue,gray</li><li><code>大小</code>: small, h4, h3, h2, h1, large, huge, ultra</li><li><code>对齐方向</code>: left, center, right</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="段落文本-p-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Markdown"><span class="hljs-bullet">-</span> 彩色文字<br>在一段话中方便插入各种颜色的标签，包括：&#123;% p red, 红色 %&#125;&#123;% p yellow, 黄色 %&#125;&#123;% p green, 绿色 %&#125;&#123;% p cyan, 青色 %&#125;&#123;% p blue, 蓝色 %&#125;&#123;% p gray, 灰色 %&#125;<br><span class="hljs-bullet">-</span> 超大号文字<br>文档「开始」页面中的标题部分就是超大号文字。<br>&#123;% p center logo large, Notice! %&#125;<br>&#123;% p center small, You are the best %&#125;<br></code></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="段落文本-p-4"><ul><li>彩色文字<br>在一段话中方便插入各种颜色的标签，包括：<p class='p red'>红色</p><p class='p yellow'>黄色</p><p class='p green'>绿色</p><p class='p cyan'>青色</p><p class='p blue'>蓝色</p><p class='p gray'>灰色</p></li><li>超大号文字<br>文档「开始」页面中的标题部分就是超大号文字。<p class='p center logo large'>Notice!</p><p class='p center small'>You are the best</p></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-4引用note"><a href="#2-4引用note" class="headerlink" title="2.4引用note"></a>2.4引用note</h2><div class="tabs" id="引用note"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#引用note-1">主题配置</button></li><li class="tab"><button type="button" data-href="#引用note-2">标签语法</button></li><li class="tab"><button type="button" data-href="#引用note-3">参数配置</button></li><li class="tab"><button type="button" data-href="#引用note-4">示例源码</button></li><li class="tab"><button type="button" data-href="#引用note-5">渲染结果</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="引用note-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Markdown"><span class="hljs-section">#在主题配置文件中配置</span><br>note:<br>  # Note tag style values:<br>  #  - simple    bs-callout old alert style. Default.<br>  #  - modern    bs-callout new (v2-v3) alert style.<br>  #  - flat      flat callout style with background, like on Mozilla or StackOverflow.<br>  #  - disabled  disable all CSS styles import of note tag.<br>  style: flat<br>  icons: true<br>  border<span class="hljs-emphasis">_radius: 3</span><br><span class="hljs-emphasis">  # Offset lighter of background in % for modern and flat styles (modern: -12 | 12; flat: -18 | 6).</span><br><span class="hljs-emphasis">  # Offset also applied to label tag variables. This option can work with disabled note tag.</span><br><span class="hljs-emphasis">  light_</span>bg<span class="hljs-emphasis">_offset: 0</span><br></code></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="引用note-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Markdown"><span class="hljs-section"># 自带icon</span><br>&#123;% note [class] [no-icon] [style] %&#125;<br>Any content (support inline tags too.io).<br>&#123;% endnote %&#125;<br><span class="hljs-section"># 外部icon</span><br>&#123;% note [color] [icon] [style] %&#125;<br>Any content (support inline tags too.io).<br>&#123;% endnote %&#125;<br></code></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="引用note-3"><p class='p blue h3'>1. 自带 icon</p><div class="table-container"><table><thead><tr><th>参数</th><th>用法</th></tr></thead><tbody><tr><td>class</td><td>【可选】标识，不同的标识有不同的配色 （ default /primary/success/info/warning/danger ）</td></tr><tr><td>no-icon</td><td>【可选】不显示 icon</td></tr><tr><td>style</td><td>【可选】可以覆盖配置中的 style （simple/modern/flat/disabled）</td></tr></tbody></table></div><p class='p blue h3'>2. 外部 icon</p><div class="table-container"><table><thead><tr><th>参数</th><th>用法</th></tr></thead><tbody><tr><td>class</td><td>【可选】标识，不同的标识有不同的配色 （ default /blue/pink/red/purple/orange/green ）</td></tr><tr><td>no-icon</td><td>【可选】可配置自定义 icon (只支持 fontawesome 图标，也可以配置 no-icon)</td></tr><tr><td>style</td><td>【可选】可以覆盖配置中的 style （simple/modern/flat/disabled）</td></tr></tbody></table></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="引用note-4"><details class="folding-tag" ><summary> 1.自带icon </summary>              <div class='content'>              <ol><li><code>simple</code> 样式<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Markdown">&#123;% note simple %&#125;默认 提示块标签&#123;% endnote %&#125;<br><br>&#123;% note default simple %&#125;default 提示块标签&#123;% endnote %&#125;<br><br>&#123;% note primary simple %&#125;primary 提示块标签&#123;% endnote %&#125;<br><br>&#123;% note success simple %&#125;success 提示块标签&#123;% endnote %&#125;<br><br>&#123;% note info simple %&#125;info 提示块标签&#123;% endnote %&#125;<br><br>&#123;% note warning simple %&#125;warning 提示块标签&#123;% endnote %&#125;<br><br>&#123;% note danger simple %&#125;danger 提示块标签&#123;% endnote %&#125;<br></code></pre></td></tr></table></figure></li><li><code>modren</code> 样式<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Markdown">&#123;% note modern %&#125;默认 提示块标签&#123;% endnote %&#125;<br><br>&#123;% note default modern %&#125;default 提示块标签&#123;% endnote %&#125;<br><br>&#123;% note primary modern %&#125;primary 提示块标签&#123;% endnote %&#125;<br><br>&#123;% note success modern %&#125;success 提示块标签&#123;% endnote %&#125;<br><br>&#123;% note info modern %&#125;info 提示块标签&#123;% endnote %&#125;<br><br>&#123;% note warning modern %&#125;warning 提示块标签&#123;% endnote %&#125;<br><br>&#123;% note danger modern %&#125;danger 提示块标签&#123;% endnote %&#125;<br></code></pre></td></tr></table></figure></li><li><code>flat</code> 样式<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Markdown">&#123;% note flat %&#125;默认 提示块标签&#123;% endnote %&#125;<br><br>&#123;% note default flat %&#125;default 提示块标签&#123;% endnote %&#125;<br><br>&#123;% note primary flat %&#125;primary 提示块标签&#123;% endnote %&#125;<br><br>&#123;% note success flat %&#125;success 提示块标签&#123;% endnote %&#125;<br><br>&#123;% note info flat %&#125;info 提示块标签&#123;% endnote %&#125;<br><br>&#123;% note warning flat %&#125;warning 提示块标签&#123;% endnote %&#125;<br><br>&#123;% note danger flat %&#125;danger 提示块标签&#123;% endnote %&#125;<br></code></pre></td></tr></table></figure></li><li><code>disabled</code> 样式<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Markdown">&#123;% note disabled %&#125;默认 提示块标签&#123;% endnote %&#125;<br><br>&#123;% note default disabled %&#125;default 提示块标签&#123;% endnote %&#125;<br><br>&#123;% note primary disabled %&#125;primary 提示块标签&#123;% endnote %&#125;<br><br>&#123;% note success disabled %&#125;success 提示块标签&#123;% endnote %&#125;<br><br>&#123;% note info disabled %&#125;info 提示块标签&#123;% endnote %&#125;<br><br>&#123;% note warning disabled %&#125;warning 提示块标签&#123;% endnote %&#125;<br><br>&#123;% note danger disabled %&#125;danger 提示块标签&#123;% endnote %&#125;<br></code></pre></td></tr></table></figure></li></ol>              </div>            </details><details class="folding-tag" ><summary> 2.外部icon </summary>              <div class='content'>              <ol><li><code>simple</code> 样式<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Markdown">&#123;% note &#x27;fab fa-cc-visa&#x27; simple %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;<br><br>&#123;% note blue &#x27;fas fa-bullhorn&#x27; simple %&#125;2021年快到了....&#123;% endnote %&#125;<br><br>&#123;% note pink &#x27;fas fa-car-crash&#x27; simple %&#125;小心开车 安全至上&#123;% endnote %&#125;<br><br>&#123;% note red &#x27;fas fa-fan&#x27; simple%&#125;这是三片呢？还是四片？&#123;% endnote %&#125;<br><br>&#123;% note orange &#x27;fas fa-battery-half&#x27; simple %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;<br><br>&#123;% note purple &#x27;far fa-hand-scissors&#x27; simple %&#125;剪刀石头布&#123;% endnote %&#125;<br><br>&#123;% note green &#x27;fab fa-internet-explorer&#x27; simple %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;<br></code></pre></td></tr></table></figure></li><li><code>modren</code> 样式<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Markdown">&#123;% note &#x27;fab fa-cc-visa&#x27; modern %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;<br><br>&#123;% note blue &#x27;fas fa-bullhorn&#x27; modern %&#125;2021年快到了....&#123;% endnote %&#125;<br><br>&#123;% note pink &#x27;fas fa-car-crash&#x27; modern %&#125;小心开车 安全至上&#123;% endnote %&#125;<br><br>&#123;% note red &#x27;fas fa-fan&#x27; modern%&#125;这是三片呢？还是四片？&#123;% endnote %&#125;<br><br>&#123;% note orange &#x27;fas fa-battery-half&#x27; modern %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;<br><br>&#123;% note purple &#x27;far fa-hand-scissors&#x27; modern %&#125;剪刀石头布&#123;% endnote %&#125;<br><br>&#123;% note green &#x27;fab fa-internet-explorer&#x27; modern %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;<br></code></pre></td></tr></table></figure></li><li><code>flat</code> 样式<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Markdown">&#123;% note &#x27;fab fa-cc-visa&#x27; flat %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;<br><br>&#123;% note blue &#x27;fas fa-bullhorn&#x27; flat %&#125;2021年快到了....&#123;% endnote %&#125;<br><br>&#123;% note pink &#x27;fas fa-car-crash&#x27; flat %&#125;小心开车 安全至上&#123;% endnote %&#125;<br><br>&#123;% note red &#x27;fas fa-fan&#x27; flat%&#125;这是三片呢？还是四片？&#123;% endnote %&#125;<br><br>&#123;% note orange &#x27;fas fa-battery-half&#x27; flat %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;<br><br>&#123;% note purple &#x27;far fa-hand-scissors&#x27; flat %&#125;剪刀石头布&#123;% endnote %&#125;<br><br>&#123;% note green &#x27;fab fa-internet-explorer&#x27; flat %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;<br></code></pre></td></tr></table></figure></li><li><code>disabled</code> 样式<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Markdown">&#123;% note &#x27;fab fa-cc-visa&#x27; disabled %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;<br><br>&#123;% note blue &#x27;fas fa-bullhorn&#x27; disabled %&#125;2021年快到了....&#123;% endnote %&#125;<br><br>&#123;% note pink &#x27;fas fa-car-crash&#x27; disabled %&#125;小心开车 安全至上&#123;% endnote %&#125;<br><br>&#123;% note red &#x27;fas fa-fan&#x27; disabled %&#125;这是三片呢？还是四片？&#123;% endnote %&#125;<br><br>&#123;% note orange &#x27;fas fa-battery-half&#x27; disabled %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;<br><br>&#123;% note purple &#x27;far fa-hand-scissors&#x27; disabled %&#125;剪刀石头布&#123;% endnote %&#125;<br><br>&#123;% note green &#x27;fab fa-internet-explorer&#x27; disabled %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;<br></code></pre></td></tr></table></figure></li></ol>              </div>            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="引用note-5"><details class="folding-tag" ><summary> 1.自带icon </summary>              <div class='content'>              <p>1.<code>simple</code> 样式</p><div class="note simple"><p>默认 提示块标签</p></div><div class="note default simple"><p>default 提示块标签</p></div><div class="note primary simple"><p>primary 提示块标签</p></div><div class="note success simple"><p>success 提示块标签</p></div><div class="note info simple"><p>info 提示块标签</p></div><div class="note warning simple"><p>warning 提示块标签</p></div><div class="note danger simple"><p>danger 提示块标签</p></div><p>2.<code>modren</code> 样式</p><div class="note modern"><p>默认 提示块标签</p></div><div class="note default modern"><p>default 提示块标签</p></div><div class="note primary modern"><p>primary 提示块标签</p></div><div class="note success modern"><p>success 提示块标签</p></div><div class="note info modern"><p>info 提示块标签</p></div><div class="note warning modern"><p>warning 提示块标签</p></div><div class="note danger modern"><p>danger 提示块标签</p></div><p>3.<code>flat</code> 样式</p><div class="note flat"><p>默认 提示块标签</p></div><div class="note default flat"><p>default 提示块标签</p></div><div class="note primary flat"><p>primary 提示块标签</p></div><div class="note success flat"><p>success 提示块标签</p></div><div class="note info flat"><p>info 提示块标签</p></div><div class="note warning flat"><p>warning 提示块标签</p></div><div class="note danger flat"><p>danger 提示块标签</p></div><p>4.<code>disabled</code> 样式</p><div class="note disabled"><p>默认 提示块标签</p></div><div class="note default disabled"><p>default 提示块标签</p></div><div class="note primary disabled"><p>primary 提示块标签</p></div><div class="note success disabled"><p>success 提示块标签</p></div><div class="note info disabled"><p>info 提示块标签</p></div><div class="note warning disabled"><p>warning 提示块标签</p></div><div class="note danger disabled"><p>danger 提示块标签</p></div>              </div>            </details><details class="folding-tag" ><summary> 2.外部icon </summary>              <div class='content'>              <p>1.<code>simple</code> 样式</p><div class="note icon-padding simple"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding simple"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了….</p></div><div class="note pink icon-padding simple"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding simple"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding simple"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding simple"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding simple"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div><p>2.<code>modren</code> 样式</p><div class="note icon-padding modern"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了….</p></div><div class="note pink icon-padding modern"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding modern"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding modern"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding modern"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding modern"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div><p>3.<code>flat</code> 样式</p><div class="note icon-padding flat"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding flat"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了….</p></div><div class="note pink icon-padding flat"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding flat"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding flat"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding flat"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding flat"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div><p>4.<code>disabled</code> 样式</p><div class="note icon-padding disabled"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding disabled"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了….</p></div><div class="note pink icon-padding disabled"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding disabled"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding disabled"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding disabled"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding disabled"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div>              </div>            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-5上标签-tip"><a href="#2-5上标签-tip" class="headerlink" title="2.5上标签 tip"></a>2.5上标签 tip</h2><div class="tabs" id="上标签tip"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#上标签tip-1">标签语法</button></li><li class="tab"><button type="button" data-href="#上标签tip-2">配置参数</button></li><li class="tab"><button type="button" data-href="#上标签tip-3">示例源码</button></li><li class="tab"><button type="button" data-href="#上标签tip-4">渲染示例</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="上标签tip-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Markdown">&#123;% tip [参数，可选] %&#125;文本内容&#123;% endtip %&#125;<br></code></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="上标签tip-2"><ol><li><code>自带图标</code>: success,error,warning,bolt,ban,home,sync,cogs,key,bell</li><li><code>自定义图标</code>: 支持 fontawesome。</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="上标签tip-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Markdown">&#123;% tip %&#125;default&#123;% endtip %&#125;<br>&#123;% tip info %&#125;info&#123;% endtip %&#125;<br>&#123;% tip success %&#125;success&#123;% endtip %&#125;<br>&#123;% tip error %&#125;error&#123;% endtip %&#125;<br>&#123;% tip warning %&#125;warning&#123;% endtip %&#125;<br>&#123;% tip bolt %&#125;bolt&#123;% endtip %&#125;<br>&#123;% tip ban %&#125;ban&#123;% endtip %&#125;<br>&#123;% tip home %&#125;home&#123;% endtip %&#125;<br>&#123;% tip sync %&#125;sync&#123;% endtip %&#125;<br>&#123;% tip cogs %&#125;cogs&#123;% endtip %&#125;<br>&#123;% tip key %&#125;key&#123;% endtip %&#125;<br>&#123;% tip bell %&#125;bell&#123;% endtip %&#125;<br>&#123;% tip fa-ravelry %&#125;自定义font awesome图标&#123;% endtip %&#125;<br></code></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="上标签tip-4"><div class="tip "><p>default</p></div><div class="tip info"><p>info</p></div><div class="tip success"><p>success</p></div><div class="tip error"><p>error</p></div><div class="tip warning"><p>warning</p></div><div class="tip bolt"><p>bolt</p></div><div class="tip ban"><p>ban</p></div><div class="tip home"><p>home</p></div><div class="tip sync"><p>sync</p></div><div class="tip cogs"><p>cogs</p></div><div class="tip key"><p>key</p></div><div class="tip bell"><p>bell</p></div><div class="tip fa-ravelry"><p>自定义font awesome图标</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-6动态标签-anima"><a href="#2-6动态标签-anima" class="headerlink" title="2.6动态标签 anima"></a>2.6动态标签 anima</h2><div class="tabs" id="动态标签-anima"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#动态标签-anima-1">标签语法</button></li><li class="tab"><button type="button" data-href="#动态标签-anima-2">配置参数</button></li><li class="tab"><button type="button" data-href="#动态标签-anima-3">示例源码</button></li><li class="tab"><button type="button" data-href="#动态标签-anima-4">渲染示例</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="动态标签-anima-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Markdown">&#123;% tip [参数，可选] %&#125;文本内容&#123;% endtip %&#125;<br></code></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="动态标签-anima-2"><ul><li>将所需的 CSS 类添加到图标（或 DOM 中的任何元素）。</li><li>对于父级悬停样式，需要给目标元素添加指定 CSS 类，同时还要给目标元素的父级元素添加 CSS 类 faa-parent animated-hover。（详情见示例及示例源码）<br>You can regulate the speed of the animation by adding the CSS class or . faa-fastfaa-slow</li><li>可以通过给目标元素添加 CSS 类 faa-fast 或 faa-slow 来控制动画快慢。</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="动态标签-anima-3"><ol><li>On DOM load（当页面加载时显示动画）<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Markdown">&#123;% tip warning faa-horizontal animated %&#125;warning&#123;% endtip %&#125;<br>&#123;% tip ban faa-flash animated %&#125;ban&#123;% endtip %&#125;<br></code></pre></td></tr></table></figure></li><li>调整动画速度<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Markdown">&#123;% tip warning faa-horizontal animated faa-fast %&#125;warning&#123;% endtip %&#125;<br>&#123;% tip ban faa-flash animated faa-slow %&#125;ban&#123;% endtip %&#125;<br></code></pre></td></tr></table></figure></li><li><p>On hover（当鼠标悬停时显示动画）</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Markdown">&#123;% tip warning faa-horizontal animated-hover %&#125;warning&#123;% endtip %&#125;<br>&#123;% tip ban faa-flash animated-hover %&#125;ban&#123;% endtip %&#125;<br></code></pre></td></tr></table></figure></li><li><p>On parent hover（当鼠标悬停在父级元素时显示动画）</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Markdown">&#123;% tip warning faa-parent animated-hover %&#125;<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;faa-horizontal&quot;</span>&gt;</span></span>warning<span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span>&#123;% endtip %&#125;<br>&#123;% tip ban faa-parent animated-hover %&#125;<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;faa-flash&quot;</span>&gt;</span></span>ban<span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span>&#123;% endtip %&#125;<br></code></pre></td></tr></table></figure></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="动态标签-anima-4"><p>1.On DOM load（当页面加载时显示动画）</p><div class="tip warning faa-horizontal animated"><p>warning</p></div><div class="tip ban faa-flash animated"><p>ban</p></div><p>2.调整动画速度</p><div class="tip warning faa-horizontal animated faa-fast"><p>warning</p></div><div class="tip ban faa-flash animated faa-slow"><p>ban</p></div><p>3.On hover（当鼠标悬停时显示动画）</p><div class="tip warning faa-horizontal animated-hover"><p>warning</p></div><div class="tip ban faa-flash animated-hover"><p>ban</p></div><p>4.On parent hover（当鼠标悬停在父级元素时显示动画）</p><div class="tip warning faa-parent animated-hover"><p class="faa-horizontal">warning</p></div><div class="tip ban faa-parent animated-hover"><p class="faa-flash">ban</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-7复选checkbox"><a href="#2-7复选checkbox" class="headerlink" title="2.7复选checkbox"></a>2.7复选checkbox</h2><div class="tabs" id="复选checkbox"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#复选checkbox-1">标签语法</button></li><li class="tab"><button type="button" data-href="#复选checkbox-2">配置参数</button></li><li class="tab"><button type="button" data-href="#复选checkbox-3">示例源码</button></li><li class="tab"><button type="button" data-href="#复选checkbox-4">渲染示例</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="复选checkbox-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Markdown">&#123;% checkbox 样式参数（可选）, 文本（支持简单md） %&#125;<br></code></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="复选checkbox-2"><ol><li><code>样式</code>: plus, minus, times</li><li><code>颜色</code>: red,yellow,green,cyan,blue,gray</li><li><code>选中状态</code>: checked</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="复选checkbox-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Markdown">&#123;% checkbox 纯文本测试 %&#125;<br>&#123;% checkbox checked, 支持简单的 [<span class="hljs-string">markdown</span>](<span class="hljs-link">https://guides.github.com/features/mastering-markdown/</span>) 语法 %&#125;<br>&#123;% checkbox red, 支持自定义颜色 %&#125;<br>&#123;% checkbox green checked, 绿色 + 默认选中 %&#125;<br>&#123;% checkbox yellow checked, 黄色 + 默认选中 %&#125;<br>&#123;% checkbox cyan checked, 青色 + 默认选中 %&#125;<br>&#123;% checkbox blue checked, 蓝色 + 默认选中 %&#125;<br>&#123;% checkbox plus green checked, 增加 %&#125;<br>&#123;% checkbox minus yellow checked, 减少 %&#125;<br>&#123;% checkbox times red checked, 叉 %&#125;<br></code></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="复选checkbox-4"><div class='checkbox'><input type="checkbox" />            <p>纯文本测试</p>            </div><div class='checkbox checked'><input type="checkbox" checked="checked"/>            <p>支持简单的 <a href="https://guides.github.com/features/mastering-markdown/">markdown</a> 语法</p>            </div><div class='checkbox red'><input type="checkbox" />            <p>支持自定义颜色</p>            </div><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p>绿色 + 默认选中</p>            </div><div class='checkbox yellow checked'><input type="checkbox" checked="checked"/>            <p>黄色 + 默认选中</p>            </div><div class='checkbox cyan checked'><input type="checkbox" checked="checked"/>            <p>青色 + 默认选中</p>            </div><div class='checkbox blue checked'><input type="checkbox" checked="checked"/>            <p>蓝色 + 默认选中</p>            </div><div class='checkbox plus green checked'><input type="checkbox" checked="checked"/>            <p>增加</p>            </div><div class='checkbox minus yellow checked'><input type="checkbox" checked="checked"/>            <p>减少</p>            </div><div class='checkbox times red checked'><input type="checkbox" checked="checked"/>            <p>叉</p>            </div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-8单选列表radio"><a href="#2-8单选列表radio" class="headerlink" title="2.8单选列表radio"></a>2.8单选列表radio</h2><div class="tabs" id="单选列表radio"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#单选列表radio-1">标签语法</button></li><li class="tab"><button type="button" data-href="#单选列表radio-2">配置参数</button></li><li class="tab"><button type="button" data-href="#单选列表radio-3">示例源码</button></li><li class="tab"><button type="button" data-href="#单选列表radio-4">渲染示例</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="单选列表radio-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Markdown">&#123;% radio 样式参数（可选）, 文本（支持简单md） %&#125;<br></code></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="单选列表radio-2"><ol><li>颜色: red,yellow,green,cyan,blue,gray</li><li>选中状态: checked</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="单选列表radio-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Markdown">&#123;% radio 纯文本测试 %&#125;<br>&#123;% radio checked, 支持简单的 [<span class="hljs-string">markdown</span>](<span class="hljs-link">https://guides.github.com/features/mastering-markdown/</span>) 语法 %&#125;<br>&#123;% radio red, 支持自定义颜色 %&#125;<br>&#123;% radio green, 绿色 %&#125;<br>&#123;% radio yellow, 黄色 %&#125;<br>&#123;% radio cyan, 青色 %&#125;<br>&#123;% radio blue, 蓝色 %&#125;<br></code></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="单选列表radio-4"><div class='checkbox'><input type="radio" />            <p>纯文本测试</p>            </div><div class='checkbox checked'><input type="radio" checked="checked"/>            <p>支持简单的 <a href="https://guides.github.com/features/mastering-markdown/">markdown</a> 语法</p>            </div><div class='checkbox red'><input type="radio" />            <p>支持自定义颜色</p>            </div><div class='checkbox green'><input type="radio" />            <p>绿色</p>            </div><div class='checkbox yellow'><input type="radio" />            <p>黄色</p>            </div><div class='checkbox cyan'><input type="radio" />            <p>青色</p>            </div><div class='checkbox blue'><input type="radio" />            <p>蓝色</p>            </div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-9时间轴timeline"><a href="#2-9时间轴timeline" class="headerlink" title="2.9时间轴timeline"></a>2.9时间轴timeline</h2><div class="tabs" id="时间轴timeline"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#时间轴timeline-1">标签语法</button></li><li class="tab"><button type="button" data-href="#时间轴timeline-2">配置参数</button></li><li class="tab"><button type="button" data-href="#时间轴timeline-3">示例源码</button></li><li class="tab"><button type="button" data-href="#时间轴timeline-4">渲染示例</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="时间轴timeline-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Markdown">&#123;% timeline 时间线标题（可选）[,color] %&#125;<br>&lt;!-- timeline 时间节点（标题） --&gt;<br>正文内容<br>&lt;!-- endtimeline --&gt;<br>&lt;!-- timeline 时间节点（标题） --&gt;<br>正文内容<br>&lt;!-- endtimeline --&gt;<br>&#123;% endtimeline %&#125;<br></code></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="时间轴timeline-2"><ol><li>title: 标题 / 时间线</li><li>color:timeline 颜色:default (留空) /blue/pink /red/purple /orange/green</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="时间轴timeline-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs Markdown">&#123;% timeline 时间轴样式,blue %&#125;<br><br>&lt;!-- timeline 2020-07-24 [<span class="hljs-string">2.6.6 -&gt; 3.0</span>](<span class="hljs-link">https://github.com/volantis-x/hexo-theme-volantis/releases</span>) --&gt;<br><br><span class="hljs-bullet">1.</span> 如果有 <span class="hljs-code">`hexo-lazyload-image`</span> 插件，需要删除并重新安装最新版本，设置 <span class="hljs-code">`lazyload.isSPA: true`</span>。<br><span class="hljs-bullet">2.</span> 2.x 版本的 css 和 js 不适用于 3.x 版本，如果使用了 <span class="hljs-code">`use_cdn: true`</span> 则需要删除。<br><span class="hljs-bullet">3.</span> 2.x 版本的 fancybox 标签在 3.x 版本中被重命名为 gallery 。<br><span class="hljs-bullet">4.</span> 2.x 版本的置顶 <span class="hljs-code">`top: true`</span> 改为了 <span class="hljs-code">`pin: true`</span>，并且同样适用于 <span class="hljs-code">`layout: page`</span> 的页面。<br><span class="hljs-bullet">5.</span> 如果使用了 <span class="hljs-code">`hexo-offline`</span> 插件，建议卸载，3.0 版本默认开启了 pjax 服务。<br><br>&lt;!-- endtimeline --&gt;<br><br>&lt;!-- timeline 2020-05-15 [<span class="hljs-string">2.6.3 -&gt; 2.6.6</span>](<span class="hljs-link">https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.6</span>) --&gt;<br><br>不需要额外处理。<br><br>&lt;!-- endtimeline --&gt;<br><br>&lt;!-- timeline 2020-04-20 [<span class="hljs-string">2.6.2 -&gt; 2.6.3</span>](<span class="hljs-link">https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3</span>) --&gt;<br><br><span class="hljs-bullet">1.</span> 全局搜索 <span class="hljs-code">`seotitle`</span> 并替换为 <span class="hljs-code">`seo_title`</span>。<br><span class="hljs-bullet">2.</span> group 组件的索引规则有变，使用 group 组件的文章内，<span class="hljs-code">`group: group_name`</span> 对应的组件名必须是 <span class="hljs-code">`group_name`</span>。<br><span class="hljs-bullet">2.</span> group 组件的列表名优先显示文章的 <span class="hljs-code">`short_title`</span> 其次是 <span class="hljs-code">`title`</span>。<br><br>&lt;!-- endtimeline --&gt;<br><br>&#123;% endtimeline %&#125;<br></code></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="时间轴timeline-4"><div class="timeline blue"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>时间轴样式</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2020-07-24 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases">2.6.6 -&gt; 3.0</a></p></div></div><div class='timeline-item-content'><ol><li>如果有 <code>hexo-lazyload-image</code> 插件，需要删除并重新安装最新版本，设置 <code>lazyload.isSPA: true</code>。</li><li>2.x 版本的 css 和 js 不适用于 3.x 版本，如果使用了 <code>use_cdn: true</code> 则需要删除。</li><li>2.x 版本的 fancybox 标签在 3.x 版本中被重命名为 gallery 。</li><li>2.x 版本的置顶 <code>top: true</code> 改为了 <code>pin: true</code>，并且同样适用于 <code>layout: page</code> 的页面。</li><li>如果使用了 <code>hexo-offline</code> 插件，建议卸载，3.0 版本默认开启了 pjax 服务。</li></ol></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2020-05-15 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.6">2.6.3 -&gt; 2.6.6</a></p></div></div><div class='timeline-item-content'><p>不需要额外处理。</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2020-04-20 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3">2.6.2 -&gt; 2.6.3</a></p></div></div><div class='timeline-item-content'><ol><li>全局搜索 <code>seotitle</code> 并替换为 <code>seo_title</code>。</li><li>group 组件的索引规则有变，使用 group 组件的文章内，<code>group: group_name</code> 对应的组件名必须是 <code>group_name</code>。</li><li>group 组件的列表名优先显示文章的 <code>short_title</code> 其次是 <code>title</code>。</li></ol></div></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-10折叠筐floding"><a href="#2-10折叠筐floding" class="headerlink" title="2.10折叠筐floding"></a>2.10折叠筐floding</h2><div class="tabs" id="折叠筐floding"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#折叠筐floding-1">标签语法</button></li><li class="tab"><button type="button" data-href="#折叠筐floding-2">配置参数</button></li><li class="tab"><button type="button" data-href="#折叠筐floding-3">示例源码</button></li><li class="tab"><button type="button" data-href="#折叠筐floding-4">渲染结果</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="折叠筐floding-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Markdown">&#123;% folding 参数（可选）, 标题 %&#125;<br>![](<span class="hljs-link">https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg</span>)<br>&#123;% endfolding %&#125;<br></code></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="折叠筐floding-2"><ol><li><code>颜色</code>：blue, cyan, green, yellow, red</li><li><code>状态</code>：状态填写 open 代表默认打开。</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="折叠筐floding-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs Markdown">&#123;% folding 查看图片测试 %&#125;<br><br>![<span class="hljs-string">Img</span>](<span class="hljs-link">https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg</span>)<br><br>&#123;% endfolding %&#125;<br><br>&#123;% folding cyan open, 查看默认打开的折叠框 %&#125;<br><br>这是一个默认打开的折叠框。<br><br>&#123;% endfolding %&#125;<br><br>&#123;% folding green, 查看代码测试 %&#125;<br>假装这里有代码块（代码块没法嵌套代码块）<br>&#123;% endfolding %&#125;<br><br>&#123;% folding yellow, 查看列表测试 %&#125;<br><span class="hljs-bullet">-</span> haha<br><span class="hljs-bullet">-</span> hehe<br>&#123;% endfolding %&#125;<br><br>&#123;% folding red, 查看嵌套测试 %&#125;<br><br>&#123;% folding blue, 查看嵌套测试2 %&#125;<br><br>&#123;% folding 查看嵌套测试3 %&#125;<br><br>hahaha <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#x27;https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/tieba/%E6%BB%91%E7%A8%BD.png&#x27;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#x27;height:24px&#x27;</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><br>&#123;% endfolding %&#125;<br><br>&#123;% endfolding %&#125;<br><br>&#123;% endfolding %&#125;<br></code></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="折叠筐floding-4"><details class="folding-tag" ><summary> 查看图片测试 </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg" alt="Img"></p>              </div>            </details><details class="folding-tag" cyan open><summary> 查看默认打开的折叠框 </summary>              <div class='content'>              <p>这是一个默认打开的折叠框。</p>              </div>            </details><details class="folding-tag" green><summary> 查看代码测试 </summary>              <div class='content'>              <p>假装这里有代码块（代码块没法嵌套代码块）</p>              </div>            </details><details class="folding-tag" yellow><summary> 查看列表测试 </summary>              <div class='content'>              <ul><li>haha</li><li>hehe</li></ul>              </div>            </details><details class="folding-tag" red><summary> 查看嵌套测试 </summary>              <div class='content'>              <details class="folding-tag" blue><summary> 查看嵌套测试2 </summary>              <div class='content'>              <details class="folding-tag" ><summary> 查看嵌套测试3 </summary>              <div class='content'>              <p>hahaha <span><img src='https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/tieba/%E6%BB%91%E7%A8%BD.png' style='height:24px'></span></p>              </div>            </details>              </div>            </details>              </div>            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-11分栏tab"><a href="#2-11分栏tab" class="headerlink" title="2.11分栏tab"></a>2.11分栏tab</h2><div class="tabs" id="分栏tab"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏tab-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏tab-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏tab-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏tab-4">渲染结果</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏tab-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Markdown">&#123;% tabs Unique name, [index] %&#125;<br>&lt;!-- tab [Tab caption] [@icon] --&gt;<br>Any content (support inline tags too).<br>&lt;!-- endtab --&gt;<br>&#123;% endtabs %&#125;<br></code></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏tab-2"><ol><li>Unique name :</li></ol><p>选项卡块标签的唯一名称，不带逗号。</p><p>将在 #id 中用作每个标签及其索引号的前缀。</p><p>如果名称中包含空格，则对于生成 #id，所有空格将由破折号代替。</p><p>仅当前帖子 / 页面的 URL 必须是唯一的！</p><p>不写控制台会报警告</p><ol><li>[index]:</li></ol><p>活动选项卡的索引号。</p><p>如果未指定，将选择第一个标签（1）。</p><p>如果 index 为 - 1，则不会选择任何选项卡。</p><p>可选参数。</p><ol><li>[Tab caption]:</li></ol><p>当前选项卡的标题。</p><p>如果未指定标题，则带有制表符索引后缀的唯一名称将用作制表符的标题。</p><p>如果未指定标题，但指定了图标，则标题将为空。</p><p>可选参数。</p><ol><li>[@icon]:</li></ol><p>FontAwesome 图标名称（全名，看起来像 “fas fa-font”）</p><p>可以指定带空格或不带空格；</p><p>例如’Tab caption @icon’ 和 ‘Tab caption@icon’.</p><p>可选参数。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏tab-3"><p>1.Demo 1 - 预设选择第一个【默认】<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Markdown">&#123;% tabs test1 %&#125;<br>&lt;!-- tab --&gt;<br><span class="hljs-strong">**This is Tab 1.**</span><br>&lt;!-- endtab --&gt;<br><br>&lt;!-- tab --&gt;<br><span class="hljs-strong">**This is Tab 2.**</span><br>&lt;!-- endtab --&gt;<br><br>&lt;!-- tab --&gt;<br><span class="hljs-strong">**This is Tab 3.**</span><br>&lt;!-- endtab --&gt;<br>&#123;% endtabs %&#125;<br></code></pre></td></tr></table></figure><br>2.Demo 2 - 预设选择 tabs<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Markdown">&#123;% tabs test2, 3 %&#125;<br>&lt;!-- tab --&gt;<br><span class="hljs-strong">**This is Tab 1.**</span><br>&lt;!-- endtab --&gt;<br><br>&lt;!-- tab --&gt;<br><span class="hljs-strong">**This is Tab 2.**</span><br>&lt;!-- endtab --&gt;<br><br>&lt;!-- tab --&gt;<br><span class="hljs-strong">**This is Tab 3.**</span><br>&lt;!-- endtab --&gt;<br>&#123;% endtabs %&#125;<br></code></pre></td></tr></table></figure><br>3.Demo 3 - 没有预设值<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Markdown">&#123;% tabs test3, -1 %&#125;<br>&lt;!-- tab --&gt;<br><span class="hljs-strong">**This is Tab 1.**</span><br>&lt;!-- endtab --&gt;<br><br>&lt;!-- tab --&gt;<br><span class="hljs-strong">**This is Tab 2.**</span><br>&lt;!-- endtab --&gt;<br><br>&lt;!-- tab --&gt;<br><span class="hljs-strong">**This is Tab 3.**</span><br>&lt;!-- endtab --&gt;<br>&#123;% endtabs %&#125;<br></code></pre></td></tr></table></figure><br>4.Demo 4 - 自定义 Tab 名 + 只有 icon + icon 和 Tab 名<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Markdown">&#123;% tabs test4 %&#125;<br>&lt;!-- tab 第一个Tab --&gt;<br><span class="hljs-strong">**tab名字为第一个Tab**</span><br>&lt;!-- endtab --&gt;<br><br>&lt;!-- tab @fab fa-apple-pay --&gt;<br><span class="hljs-strong">**只有图标 没有Tab名字**</span><br>&lt;!-- endtab --&gt;<br><br>&lt;!-- tab 炸弹@fas fa-bomb --&gt;<br><span class="hljs-strong">**名字+icon**</span><br>&lt;!-- endtab --&gt;<br>&#123;% endtabs %&#125;<br></code></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏tab-4"><p><p class='p '>1.Demo 1 - 预设选择第一个【默认】</p></p><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">test1 1</button></li><li class="tab"><button type="button" data-href="#test1-2">test1 2</button></li><li class="tab"><button type="button" data-href="#test1-3">test1 3</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p class='p '>2.Demo 2 - 预设选择 tabs</p><div class="tabs" id="test2"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#test2-1">test2 1</button></li><li class="tab"><button type="button" data-href="#test2-2">test2 2</button></li><li class="tab active"><button type="button" data-href="#test2-3">test2 3</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="test2-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test2-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="test2-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p class='p '>3.Demo 3 - 没有预设值</p><div class="tabs" id="test3"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#test3-1">test3 1</button></li><li class="tab"><button type="button" data-href="#test3-2">test3 2</button></li><li class="tab"><button type="button" data-href="#test3-3">test3 3</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="test3-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test3-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test3-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p class='p '>4.Demo 4 - 自定义 Tab 名 + 只有 icon + icon 和 Tab 名</p><div class="tabs" id="test4"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test4-1">第一个Tab</button></li><li class="tab"><button type="button" data-href="#test4-2"><i class="fab fa-apple-pay" style="text-align: center;"></i></button></li><li class="tab"><button type="button" data-href="#test4-3"><i class="fas fa-bomb"></i>炸弹</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><p><strong>tab名字为第一个Tab</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-2"><p><strong>只有图标 没有Tab名字</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-3"><p><strong>名字+icon</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-12链接卡片-link"><a href="#2-12链接卡片-link" class="headerlink" title="2.12链接卡片 link"></a>2.12链接卡片 link</h2><div class="tabs" id="链接卡片link"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#链接卡片link-1">标签语法</button></li><li class="tab"><button type="button" data-href="#链接卡片link-2">示例源码</button></li><li class="tab"><button type="button" data-href="#链接卡片link-3">渲染结果</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="链接卡片link-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Markdown">&#123;% link 标题, 链接, 图片链接（可选） %&#125;<br></code></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="链接卡片link-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Markdown">&#123;% link 糖果屋教程贴, https://akilar.top/posts/615e2dec/, https://cdn.cbd.int/akilar-candyassets@1.0.36/image/siteicon/favicon.ico %&#125;<br></code></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="链接卡片link-3"><div class="tag link"><a class="link-card" title="糖果屋教程贴" href="https://akilar.top/posts/615e2dec/"><div class="left"><img src="https://cdn.cbd.int/akilar-candyassets@1.0.36/image/siteicon/favicon.ico"/></div><div class="right"><p class="text">糖果屋教程贴</p><p class="url">https://akilar.top/posts/615e2dec/</p></div></a></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-13按钮-btns"><a href="#2-13按钮-btns" class="headerlink" title="2.13按钮 btns"></a>2.13按钮 btns</h2><div class="tabs" id="按钮btns"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#按钮btns-1">标签语法</button></li><li class="tab"><button type="button" data-href="#按钮btns-2">配置参数</button></li><li class="tab"><button type="button" data-href="#按钮btns-3">示例源码</button></li><li class="tab"><button type="button" data-href="#按钮btns-4">渲染结果</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="按钮btns-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Markdown">&#123;% btns 样式参数 %&#125;<br>&#123;% cell 标题, 链接, 图片或者图标 %&#125;<br>&#123;% cell 标题, 链接, 图片或者图标 %&#125;<br>&#123;% endbtns %&#125;<br></code></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="按钮btns-2"><ol><li>圆角样式：rounded, circle</li><li>增加文字样式：可以在容器内增加 <b>标题</b>和<p>描述文字</p></li><li>布局方式：默认为自动宽度，适合视野内只有一两个的情况。</li></ol><div class="table-container"><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>wide</td><td>宽一点的按钮</td></tr><tr><td>fill</td><td>填充布局，自动铺满至少一行，多了会换行</td></tr><tr><td>center</td><td>居中，按钮之间是固定间距</td></tr><tr><td>around</td><td>居中分散</td></tr><tr><td>grid2</td><td>等宽最多2列，屏幕变窄会适当减少列数</td></tr><tr><td>grid3</td><td>等宽最多3列，屏幕变窄会适当减少列数</td></tr><tr><td>grid4</td><td>等宽最多4列，屏幕变窄会适当减少列数</td></tr><tr><td>grid5</td><td>等宽最多5列，屏幕变窄会适当减少列数</td></tr></tbody></table></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="按钮btns-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs Markdown">1.如果需要显示类似「团队成员」之类的一组含有头像的链接<br>&#123;% btns circle grid5 %&#125;<br>&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;<br>&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;<br>&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;<br>&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;<br>&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;<br>&#123;% endbtns %&#125;<br><br>2.或者含有图标的按钮<br>&#123;% btns rounded grid5 %&#125;<br>&#123;% cell 下载源码, /, fas fa-download %&#125;<br>&#123;% cell 查看文档, /, fas fa-book-open %&#125;<br>&#123;% endbtns %&#125;<br><br>3.圆形图标 + 标题 + 描述 + 图片 + 网格5列 + 居中<br><br>&#123;% btns circle center grid5 %&#125;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&#x27;https://apps.apple.com/cn/app/heart-mate-pro-hrm-utility/id1463348922?ls=1&#x27;</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;fab fa-apple&#x27;</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span></span>心率管家<span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span></span><br>  &#123;% p red, 专业版 %&#125;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#x27;https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/qrcode/heartmate_pro.png&#x27;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&#x27;https://apps.apple.com/cn/app/heart-mate-lite-hrm-utility/id1475747930?ls=1&#x27;</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;fab fa-apple&#x27;</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span></span>心率管家<span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span></span><br>  &#123;% p green, 免费版 %&#125;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#x27;https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/qrcode/heartmate_lite.png&#x27;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br>&#123;% endbtns %&#125;<br></code></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="按钮btns-4"><p>1.如果需要显示类似「团队成员」之类的一组含有头像的链接</p><div class="btns circle grid5">            <a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a><a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a><a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a><a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a><a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a>          </div><p>2.或者含有图标的按钮</p><div class="btns rounded grid5">            <a class="button" href='/' title='下载源码'><i class='fas fa-download'></i>下载源码</a><a class="button" href='/' title='查看文档'><i class='fas fa-book-open'></i>查看文档</a>          </div><p>3.圆形图标 + 标题 + 描述 + 图片 + 网格5列 + 居中</p><div class="btns circle center grid5">            <a href='https://apps.apple.com/cn/app/heart-mate-pro-hrm-utility/id1463348922?ls=1'>  <i class='fab fa-apple'></i>  <b>心率管家</b>  <p class='p red'>专业版</p>  <img src='https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/qrcode/heartmate_pro.png'></a><a href='https://apps.apple.com/cn/app/heart-mate-lite-hrm-utility/id1475747930?ls=1'>  <i class='fab fa-apple'></i>  <b>心率管家</b>  <p class='p green'>免费版</p>  <img src='https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/qrcode/heartmate_lite.png'></a>          </div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-14github卡片-ghcard"><a href="#2-14github卡片-ghcard" class="headerlink" title="2.14github卡片 ghcard"></a>2.14github卡片 ghcard</h2><div class="tabs" id="github卡片ghcard"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#github卡片ghcard-1">标签语法</button></li><li class="tab"><button type="button" data-href="#github卡片ghcard-2">配置参数</button></li><li class="tab"><button type="button" data-href="#github卡片ghcard-3">示例源码</button></li><li class="tab"><button type="button" data-href="#github卡片ghcard-4">渲染结果（此部分需要翻墙才能显示）</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="github卡片ghcard-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Markdown">&#123;% ghcard 用户名, 其它参数（可选） %&#125;<br>&#123;% ghcard 用户名/仓库, 其它参数（可选） %&#125;<br></code></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="github卡片ghcard-2"><p>使用,分割各个参数。写法为：参数名=参数值<br>以下只写几个常用参数值。</p><div class="table-container"><table><thead><tr><th>参数名</th><th>取值</th><th>释义</th></tr></thead><tbody><tr><td>hide</td><td>stars,commits,prs,issues,contribs</td><td>隐藏指定统计</td></tr><tr><td>count_private</td><td>true</td><td>将私人项目贡献添加到总提交计数中</td></tr><tr><td>show_icons</td><td>true</td><td>显示图标</td></tr><tr><td>theme</td><td>查阅:<a href="https://github.com/anuraghazra/github-readme-stats/blob/master/themes/README.md">Available Themes</a></td><td>主题</td></tr></tbody></table></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="github卡片ghcard-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Markdown">1.用户信息卡片<br><br>| &#123;% ghcard Rhh-Z %&#125; | &#123;% ghcard Rhh-Z, theme=vue %&#125; |<br>| -- | -- |<br>| &#123;% ghcard Rhh-Z, theme=buefy %&#125; | &#123;% ghcard Rhh-Z, theme=solarized-light %&#125; |<br>| &#123;% ghcard Rhh-Z, theme=onedark %&#125; | &#123;% ghcard Rhh-Z, theme=solarized-dark %&#125; |<br>| &#123;% ghcard Rhh-Z, theme=algolia %&#125; | &#123;% ghcard Rhh-Z, theme=calm %&#125; |<br><br>2.仓库信息卡片<br><br>| &#123;% ghcard Rhh-Z/Rhh-Z.github.io, theme=vue %&#125; | &#123;% ghcard Rhh-Z/Rhh-Z.github.io, theme=vue %&#125; |<br>| -- | -- |<br>| &#123;% ghcard Rhh-Z/Rhh-Z.github.io, theme=buefy %&#125; | &#123;% ghcard Rhh-Z/Rhh-Z.github.io, theme=solarized-light %&#125; |<br>| &#123;% ghcard Rhh-Z/Rhh-Z.github.io, theme=onedark %&#125; | &#123;% ghcard Rhh-Z/Rhh-Z.github.io, theme=solarized-dark %&#125; |<br>| &#123;% ghcard Rhh-Z/Rhh-Z.github.io, theme=algolia %&#125; | &#123;% ghcard Rhh-Z/Rhh-Z.github.io, theme=calm %&#125; |<br></code></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="github卡片ghcard-4"><p>1.用户信息卡片</p><div class="table-container"><table><thead><tr><th><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/Rhh-Z"><img src="https://github-readme-stats.vercel.app/api/?username=Rhh-Z&show_owner=true"/></a></th><th><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/Rhh-Z"><img src="https://github-readme-stats.vercel.app/api/?username=Rhh-Z&theme=vue&show_owner=true"/></a></th></tr></thead><tbody><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/Rhh-Z"><img src="https://github-readme-stats.vercel.app/api/?username=Rhh-Z&theme=buefy&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/Rhh-Z"><img src="https://github-readme-stats.vercel.app/api/?username=Rhh-Z&theme=solarized-light&show_owner=true"/></a></td></tr><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/Rhh-Z"><img src="https://github-readme-stats.vercel.app/api/?username=Rhh-Z&theme=onedark&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/Rhh-Z"><img src="https://github-readme-stats.vercel.app/api/?username=Rhh-Z&theme=solarized-dark&show_owner=true"/></a></td></tr><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/Rhh-Z"><img src="https://github-readme-stats.vercel.app/api/?username=Rhh-Z&theme=algolia&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/Rhh-Z"><img src="https://github-readme-stats.vercel.app/api/?username=Rhh-Z&theme=calm&show_owner=true"/></a></td></tr></tbody></table></div><p>2.仓库信息卡片</p><div class="table-container"><table><thead><tr><th><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/Rhh-Z/Rhh-Z.github.io"><img src="https://github-readme-stats.vercel.app/api/pin/?username=Rhh-Z&repo=Rhh-Z.github.io&theme=vue&show_owner=true"/></a></th><th><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/Rhh-Z/Rhh-Z.github.io"><img src="https://github-readme-stats.vercel.app/api/pin/?username=Rhh-Z&repo=Rhh-Z.github.io&theme=vue&show_owner=true"/></a></th></tr></thead><tbody><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/Rhh-Z/Rhh-Z.github.io"><img src="https://github-readme-stats.vercel.app/api/pin/?username=Rhh-Z&repo=Rhh-Z.github.io&theme=buefy&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/Rhh-Z/Rhh-Z.github.io"><img src="https://github-readme-stats.vercel.app/api/pin/?username=Rhh-Z&repo=Rhh-Z.github.io&theme=solarized-light&show_owner=true"/></a></td></tr><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/Rhh-Z/Rhh-Z.github.io"><img src="https://github-readme-stats.vercel.app/api/pin/?username=Rhh-Z&repo=Rhh-Z.github.io&theme=onedark&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/Rhh-Z/Rhh-Z.github.io"><img src="https://github-readme-stats.vercel.app/api/pin/?username=Rhh-Z&repo=Rhh-Z.github.io&theme=solarized-dark&show_owner=true"/></a></td></tr><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/Rhh-Z/Rhh-Z.github.io"><img src="https://github-readme-stats.vercel.app/api/pin/?username=Rhh-Z&repo=Rhh-Z.github.io&theme=algolia&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/Rhh-Z/Rhh-Z.github.io"><img src="https://github-readme-stats.vercel.app/api/pin/?username=Rhh-Z&repo=Rhh-Z.github.io&theme=calm&show_owner=true"/></a></td></tr></tbody></table></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-15github徽标-ghbdage"><a href="#2-15github徽标-ghbdage" class="headerlink" title="2.15github徽标 ghbdage"></a>2.15github徽标 ghbdage</h2><div class="tabs" id="github徽标ghbdage"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#github徽标ghbdage-1">标签语法</button></li><li class="tab"><button type="button" data-href="#github徽标ghbdage-2">配置参数</button></li><li class="tab"><button type="button" data-href="#github徽标ghbdage-3">示例源码</button></li><li class="tab"><button type="button" data-href="#github徽标ghbdage-4">渲染结果</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="github徽标ghbdage-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Markdown">&#123;% bdage [right],[left],[logo]||[color],[link],[title]||[option] %&#125;<br></code></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="github徽标ghbdage-2"><ol><li>left：徽标左边的信息，必选参数。</li><li>right: 徽标右边的信息，必选参数，</li><li>logo：徽标图标，图标名称详见simpleicons，可选参数。</li><li>color：徽标右边的颜色，可选参数。</li><li>link：指向的链接，可选参数。</li><li>title：徽标的额外信息，可选参数。主要用于优化SEO，但object标签不会像a标签一样在鼠标悬停显示title信息。</li><li>option：自定义参数，支持shields.io的全部API参数支持，具体参数可以参看上文中的拓展写法示例。形式为name1=value2&amp;name2=value2。</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="github徽标ghbdage-3"><p>1.基本参数,定义徽标左右文字和图标<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Markdown">&#123;% bdage Theme,Butterfly %&#125;<br>&#123;% bdage Frame,Hexo,hexo %&#125;<br></code></pre></td></tr></table></figure><br>2.信息参数，定义徽标右侧内容背景色，指向链接<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Markdown">&#123;% bdage CDN,JsDelivr,jsDelivr||abcdef,https://metroui.org.ua/index.html,本站使用JsDelivr为静态资源提供CDN加速 %&#125;<br>//如果是跨顺序省略可选参数，仍然需要写个逗号,用作分割<br>&#123;% bdage Source,GitHub,GitHub||,https://github.com/ %&#125;<br></code></pre></td></tr></table></figure><br>3.拓展参数，支持shields的API的全部参数内容<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Markdown">&#123;% bdage Hosted,Vercel,Vercel||brightgreen,https://vercel.com/,本站采用双线部署，默认线路托管于Vercel||style=social&amp;logoWidth=20 %&#125;<br>//如果是跨顺序省略可选参数组，仍然需要写双竖线||用作分割<br>&#123;% bdage Hosted,Vercel,Vercel||||style=social&amp;logoWidth=20&amp;logoColor=violet %&#125;<br></code></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="github徽标ghbdage-4"><p>1.基本参数,定义徽标左右文字和图标</p><object class="ghbdage" style="margin-inline:5px" title="" standby="loading..." data="https://img.shields.io/badge/Butterfly-Theme-orange?logo=&color=orange&link=&"></object><object class="ghbdage" style="margin-inline:5px" title="" standby="loading..." data="https://img.shields.io/badge/Hexo-Frame-orange?logo=hexo&color=orange&link=&"></object><p>2.信息参数，定义徽标右侧内容背景色，指向链接</p><object class="ghbdage" style="margin-inline:5px" title="本站使用JsDelivr为静态资源提供CDN加速" standby="loading..." data="https://img.shields.io/badge/JsDelivr-CDN-orange?logo=jsDelivr&color=abcdef&link=https://metroui.org.ua/index.html&"></object>//如果是跨顺序省略可选参数，仍然需要写个逗号,用作分割<object class="ghbdage" style="margin-inline:5px" title="" standby="loading..." data="https://img.shields.io/badge/GitHub-Source-orange?logo=GitHub&color=orange&link=https://github.com/&"></object><p>3.拓展参数，支持shields的API的全部参数内容</p><object class="ghbdage" style="margin-inline:5px" title="本站采用双线部署，默认线路托管于Vercel" standby="loading..." data="https://img.shields.io/badge/Vercel-Hosted-orange?logo=Vercel&color=brightgreen&link=https://vercel.com/&style=social&logoWidth=20"></object>//如果是跨顺序省略可选参数组，仍然需要写双竖线||用作分割<object class="ghbdage" style="margin-inline:5px" title="" standby="loading..." data="https://img.shields.io/badge/Vercel-Hosted-orange?logo=Vercel&color=orange&link=&style=social&logoWidth=20&logoColor=violet"></object><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-16网站卡片-sites"><a href="#2-16网站卡片-sites" class="headerlink" title="2.16网站卡片 sites"></a>2.16网站卡片 sites</h2><div class="tabs" id="网站卡片sites"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#网站卡片sites-1">标签语法</button></li><li class="tab"><button type="button" data-href="#网站卡片sites-2">示例源码</button></li><li class="tab"><button type="button" data-href="#网站卡片sites-3">渲染结果</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="网站卡片sites-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Markdown">&#123;% sitegroup %&#125;<br>&#123;% site 标题, url=链接, screenshot=截图链接, avatar=头像链接（可选）, description=描述（可选） %&#125;<br>&#123;% site 标题, url=链接, screenshot=截图链接, avatar=头像链接（可选）, description=描述（可选） %&#125;<br>&#123;% endsitegroup %&#125;<br></code></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="网站卡片sites-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Markdown">&#123;% sitegroup %&#125;<br>&#123;% site xaoxuu, url=https://xaoxuu.com, screenshot=https://i.loli.net/2020/08/21/VuSwWZ1xAeUHEBC.jpg, avatar=https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/avatar/avatar.png, description=简约风格 %&#125;<br>&#123;% site inkss, url=https://inkss.cn, screenshot=https://i.loli.net/2020/08/21/Vzbu3i8fXs6Nh5Y.jpg, avatar=https://cdn.jsdelivr.net/gh/inkss/common@master/static/web/avatar.jpg, description=这是一段关于这个网站的描述文字 %&#125;<br>&#123;% site MHuiG, url=https://blog.mhuig.top, screenshot=https://i.loli.net/2020/08/22/d24zpPlhLYWX6D1.png, avatar=https://cdn.jsdelivr.net/gh/MHuiG/imgbed@master/data/p.png, description=这是一段关于这个网站的描述文字 %&#125;<br>&#123;% site Colsrch, url=https://colsrch.top, screenshot=https://i.loli.net/2020/08/22/dFRWXm52OVu8qfK.png, avatar=https://cdn.jsdelivr.net/gh/Colsrch/images/Colsrch/avatar.jpg, description=这是一段关于这个网站的描述文字 %&#125;<br>&#123;% site Linhk1606, url=https://linhk1606.github.io, screenshot=https://i.loli.net/2020/08/21/3PmGLCKicnfow1x.png, avatar=https://i.loli.net/2020/02/09/PN7I5RJfFtA93r2.png, description=这是一段关于这个网站的描述文字 %&#125;<br>&#123;% endsitegroup %&#125;<br></code></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="网站卡片sites-3"><div class="site-card-group"><a class="site-card" href="https://xaoxuu.com"><div class="img"><img src="https://i.loli.net/2020/08/21/VuSwWZ1xAeUHEBC.jpg"/></div><div class="info"><img src="https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/avatar/avatar.png"/><span class="title">xaoxuu</span><span class="desc">简约风格</span></div></a><a class="site-card" href="https://inkss.cn"><div class="img"><img src="https://i.loli.net/2020/08/21/Vzbu3i8fXs6Nh5Y.jpg"/></div><div class="info"><img src="https://cdn.jsdelivr.net/gh/inkss/common@master/static/web/avatar.jpg"/><span class="title">inkss</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a><a class="site-card" href="https://blog.mhuig.top"><div class="img"><img src="https://i.loli.net/2020/08/22/d24zpPlhLYWX6D1.png"/></div><div class="info"><img src="https://cdn.jsdelivr.net/gh/MHuiG/imgbed@master/data/p.png"/><span class="title">MHuiG</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a><a class="site-card" href="https://colsrch.top"><div class="img"><img src="https://i.loli.net/2020/08/22/dFRWXm52OVu8qfK.png"/></div><div class="info"><img src="https://cdn.jsdelivr.net/gh/Colsrch/images/Colsrch/avatar.jpg"/><span class="title">Colsrch</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a><a class="site-card" href="https://linhk1606.github.io"><div class="img"><img src="https://i.loli.net/2020/08/21/3PmGLCKicnfow1x.png"/></div><div class="info"><img src="https://i.loli.net/2020/02/09/PN7I5RJfFtA93r2.png"/><span class="title">Linhk1606</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-17行内图片-inlineimage"><a href="#2-17行内图片-inlineimage" class="headerlink" title="2.17行内图片 inlineimage"></a>2.17行内图片 inlineimage</h2><div class="tabs" id="行内图片inlineimage"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#行内图片inlineimage-1">标签语法</button></li><li class="tab"><button type="button" data-href="#行内图片inlineimage-2">配置参数</button></li><li class="tab"><button type="button" data-href="#行内图片inlineimage-3">示例源码</button></li><li class="tab"><button type="button" data-href="#行内图片inlineimage-4">渲染结果</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="行内图片inlineimage-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Markdown">&#123;% inlineimage 图片链接, height=高度（可选） %&#125;<br></code></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="行内图片inlineimage-2"><ol><li><code>高度</code>：height=20px</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="行内图片inlineimage-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Markdown">这是 &#123;% inlineimage https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/0000.gif %&#125; 一段话。<br><br>这又是 &#123;% inlineimage https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/5150.gif, height=40px %&#125; 一段话。<br></code></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="行内图片inlineimage-4"><p>这是 <img no-lazy class="inline" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/0000.gif" style="height:1.5em"/> 一段话。</p><p>这又是 <img no-lazy class="inline" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/5150.gif" style="height:40px;"/> 一段话。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-18单张图片-image"><a href="#2-18单张图片-image" class="headerlink" title="2.18单张图片 image"></a>2.18单张图片 image</h2><div class="tabs" id="单张图片image"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#单张图片image-1">标签语法</button></li><li class="tab"><button type="button" data-href="#单张图片image-2">配置参数</button></li><li class="tab"><button type="button" data-href="#单张图片image-3">示例源码</button></li><li class="tab"><button type="button" data-href="#单张图片image-4">渲染结果</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="单张图片image-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Markdown">&#123;% image 链接, width=宽度（可选）, height=高度（可选）, alt=描述（可选）, bg=占位颜色（可选） %&#125;<br></code></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="单张图片image-2"><ol><li>图片宽度高度：width=300px, height=32px</li><li>图片描述：alt=图片描述（butterfly需要在主题配置文件中开启图片描述）</li><li>占位背景色：bg=#f2f2f2</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="单张图片image-3"><p>1.添加描述：<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Markdown">&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, alt=每天下课回宿舍的路，没有什么故事。 %&#125;<br></code></pre></td></tr></table></figure><br>2.指定宽度<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Markdown">&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, width=400px %&#125;<br></code></pre></td></tr></table></figure><br>3.指定宽度并添加描述：<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Markdown">&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, width=400px, alt=每天下课回宿舍的路，没有什么故事。 %&#125;<br></code></pre></td></tr></table></figure><br>4.设置占位背景色：<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Markdown">&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, width=400px, bg=#1D0C04, alt=优化不同宽度浏览的观感 %&#125;<br></code></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="单张图片image-4"><p>1.添加描述：</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg" alt="每天下课回宿舍的路，没有什么故事。"/></div><span class="image-caption">每天下课回宿舍的路，没有什么故事。</span></div><p>2.指定宽度</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg" style="width:400px;"/></div></div><p>3.指定宽度并添加描述：</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg" alt="每天下课回宿舍的路，没有什么故事。" style="width:400px;"/></div><span class="image-caption">每天下课回宿舍的路，没有什么故事。</span></div><p>4.设置占位背景色：</p><div class="img-wrap"><div class="img-bg" style="background:#1D0C04"><img class="img" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg" alt="优化不同宽度浏览的观感" style="width:400px;"/></div><span class="image-caption">优化不同宽度浏览的观感</span></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-19音频-audio"><a href="#2-19音频-audio" class="headerlink" title="2.19音频 audio"></a>2.19音频 audio</h2><div class="tabs" id="音频audio"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#音频audio-1">标签语法</button></li><li class="tab"><button type="button" data-href="#音频audio-2">示例源码</button></li><li class="tab"><button type="button" data-href="#音频audio-3">渲染结果</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="音频audio-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Markdown">&#123;% audio 音频链接 %&#125;<br></code></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="音频audio-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Markdown">&#123;% audio https://github.com/volantis-x/volantis-docs/releases/download/assets/Lumia1020.mp3 %&#125;<br></code></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="音频audio-3"><div class="audio"><audio controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/Lumia1020.mp3' type='audio/mp3'>Your browser does not support the audio tag.</audio></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-20视频-video"><a href="#2-20视频-video" class="headerlink" title="2.20视频 video"></a>2.20视频 video</h2><div class="tabs" id="视频video"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#视频video-1">标签语法</button></li><li class="tab"><button type="button" data-href="#视频video-2">配置参数</button></li><li class="tab"><button type="button" data-href="#视频video-3">示例源码</button></li><li class="tab"><button type="button" data-href="#视频video-4">渲染结果</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="视频video-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Markdown">&#123;% video 视频链接 %&#125;<br></code></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="视频video-2"><ol><li><code>对齐方向</code>：left, center, right</li><li><code>列数</code>：逗号后面直接写列数，支持 1 ～ 4 列。</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="视频video-3"><p>1.100%宽度<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Markdown">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="hljs-emphasis">_0341.mov %&#125;</span><br></code></pre></td></tr></table></figure><br>2.50%宽度<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Markdown">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="hljs-emphasis">_0341.mov %&#125;</span><br></code></pre></td></tr></table></figure><br>3.25%宽度<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Markdown">&#123;% videos, 4 %&#125;<br>&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="hljs-emphasis">_0341.mov %&#125;</span><br><span class="hljs-emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;<br>&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="hljs-emphasis">_0341.mov %&#125;</span><br><span class="hljs-emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;<br>&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="hljs-emphasis">_0341.mov %&#125;</span><br><span class="hljs-emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;<br>&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="hljs-emphasis">_0341.mov %&#125;</span><br><span class="hljs-emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;<br>&#123;% endvideos %&#125;<br></code></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="视频video-4"><p>1.100%宽度</p><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><p>2.50%宽度</p><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><p>3.25%宽度</p><div class="videos" col='4'><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-21相册-gallery"><a href="#2-21相册-gallery" class="headerlink" title="2.21相册 gallery"></a>2.21相册 gallery</h2><div class="tabs" id="相册gallery"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#相册gallery-1">标签语法</button></li><li class="tab"><button type="button" data-href="#相册gallery-2">配置参数</button></li><li class="tab"><button type="button" data-href="#相册gallery-3">示例源码</button></li><li class="tab"><button type="button" data-href="#相册gallery-4">渲染结果</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="相册gallery-1"><p>1.gallerygroup 相册图库<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Markdown"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;gallery-group-main&quot;</span>&gt;</span></span><br>&#123;% galleryGroup name description link img-url %&#125;<br>&#123;% galleryGroup name description link img-url %&#125;<br>&#123;% galleryGroup name description link img-url %&#125;<br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></code></pre></td></tr></table></figure><br>2.gallery 相册<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Markdown">&#123;% gallery %&#125;<br>markdown 圖片格式<br>&#123;% endgallery %&#125;<br></code></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="相册gallery-2"><ul><li>gallerygroup 相册图库</li></ul><div class="table-container"><table><thead><tr><th>参数名</th><th>释义</th></tr></thead><tbody><tr><td>name</td><td>图库名字</td></tr><tr><td>description</td><td>图库描述</td></tr><tr><td>link</td><td>链接到对应相册的地址</td></tr><tr><td>img-url</td><td>图库封面</td></tr></tbody></table></div><ul><li>gallery 相册</li></ul><p>区别于旧版的Gallery相册,新的Gallery相册会自动根据图片长度进行排版，书写也更加方便，与markdown格式一样。可根据需要插入到相应的md。无需再自己配置长宽。建议在粘贴时故意使用长短、大小、横竖不一的图片，会有更好的效果。（尺寸完全相同的图片只会平铺输出，效果很糟糕）</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="相册gallery-3"><p>1.gallerygroup 相册图库<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Markdown"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;gallery-group-main&quot;</span>&gt;</span></span><br>&#123;% galleryGroup MC 在Rikkaの六花服务器里留下的足迹 &#x27;/gallery/MC/&#x27; https://cdn.cbd.int/akilar-candyassets@1.0.36/image/1.jpg %&#125;<br>&#123;% galleryGroup Gundam 哦咧哇gundam哒！ &#x27;/gallery/Gundam/&#x27; https://cdn.cbd.int/akilar-candyassets@1.0.36/image/20200907110508327.png %&#125;<br>&#123;% galleryGroup I-am-Akilar 某种意义上也算自拍吧 &#x27;/gallery/I-am-Akilar/&#x27; https://cdn.cbd.int/akilar-candyassets@1.0.36/image/20200907113116651.png %&#125;<br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></code></pre></td></tr></table></figure><br>2.gallery 相册<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Markdown">&#123;% gallery %&#125;<br>![](<span class="hljs-link">https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg</span>)<br>![](<span class="hljs-link">https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg</span>)<br>&#123;% endgallery %&#125;<br></code></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="相册gallery-4"><p>1.gallerygroup 相册图库</p><div class="gallery-group-main">  <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://cdn.cbd.int/akilar-candyassets@1.0.36/image/1.jpg' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">MC</div>  <p>在Rikkaの六花服务器里留下的足迹</p>  <a href='/gallery/MC/'></a>  </figcaption>  </figure>  <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://cdn.cbd.int/akilar-candyassets@1.0.36/image/20200907110508327.png' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">Gundam</div>  <p>哦咧哇gundam哒！</p>  <a href='/gallery/Gundam/'></a>  </figcaption>  </figure>  <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://cdn.cbd.int/akilar-candyassets@1.0.36/image/20200907113116651.png' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">I-am-Akilar</div>  <p>某种意义上也算自拍吧</p>  <a href='/gallery/I-am-Akilar/'></a>  </figcaption>  </figure></div><p>2.gallery 相册</p><div class="fj-gallery"><p><img src="https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg" alt=""><br><img src="https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg" alt=""></p>          </div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-22诗词标签-poem"><a href="#2-22诗词标签-poem" class="headerlink" title="2.22诗词标签 poem"></a>2.22诗词标签 poem</h2><div class="tabs" id="诗词标签poem"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#诗词标签poem-1">标签语法</button></li><li class="tab"><button type="button" data-href="#诗词标签poem-2">配置参数</button></li><li class="tab"><button type="button" data-href="#诗词标签poem-3">示例源码</button></li><li class="tab"><button type="button" data-href="#诗词标签poem-4">渲染结果</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="诗词标签poem-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Markdown">&#123;% poem 标题,作者 %&#125;<br>内容<br>&#123;% endpoem %&#125;<br></code></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="诗词标签poem-2"><ol><li><code>title</code>：诗词标题</li><li><code>author</code>：作者，可以不写</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="诗词标签poem-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Markdown">&#123;% poem 水调歌头,苏轼 %&#125;<br>丙辰中秋，欢饮达旦，大醉，作此篇，兼怀子由。<br>明月几时有？把酒问青天。<br>不知天上宫阙，今夕是何年？<br>我欲乘风归去，又恐琼楼玉宇，高处不胜寒。<br>起舞弄清影，何似在人间？<br><br>转朱阁，低绮户，照无眠。<br>不应有恨，何事长向别时圆？<br>人有悲欢离合，月有阴晴圆缺，此事古难全。<br>但愿人长久，千里共婵娟。<br>&#123;% endpoem %&#125;<br></code></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="诗词标签poem-4"><div class='poem'><div class='poem-title'>水调歌头</div><div class='poem-author'>苏轼</div><p>丙辰中秋，欢饮达旦，大醉，作此篇，兼怀子由。<br>明月几时有？把酒问青天。<br>不知天上宫阙，今夕是何年？<br>我欲乘风归去，又恐琼楼玉宇，高处不胜寒。<br>起舞弄清影，何似在人间？</p><p>转朱阁，低绮户，照无眠。<br>不应有恨，何事长向别时圆？<br>人有悲欢离合，月有阴晴圆缺，此事古难全。<br>但愿人长久，千里共婵娟。</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-23阿里图标-icon"><a href="#2-23阿里图标-icon" class="headerlink" title="2.23阿里图标 icon"></a>2.23阿里图标 icon</h2><div class="tabs" id="阿里图标icon"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#阿里图标icon-1">标签语法</button></li><li class="tab"><button type="button" data-href="#阿里图标icon-2">配置参数</button></li><li class="tab"><button type="button" data-href="#阿里图标icon-3">示例源码</button></li><li class="tab"><button type="button" data-href="#阿里图标icon-4">渲染结果</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="阿里图标icon-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Markdown">&#123;% icon [icon-xxxx],[font-size] %&#125;<br></code></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="阿里图标icon-2"><ol><li><code>icon-xxxx</code>：表示图标font-class,可以在自己的阿里矢量图标库项目的font-class引用方案内查询并复制。</li><li><code>font-size</code>：表示图标大小，直接填写数字即可，单位为em。图标大小默认值为1em。</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="阿里图标icon-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Markdown">&#123;% icon icon-KTV %&#125;&#123;% icon icon-huojian,2 %&#125;<br><br>&#123;% icon icon-wangqiu,3 %&#125;&#123;% icon icon-zhinengshoubiao,4 %&#125;<br><br>&#123;% icon icon-kongjian,5 %&#125;&#123;% icon icon-kongjian,6 %&#125;<br><br>&#123;% icon icon-diannao,1 %&#125;&#123;% icon icon-jiqiren,2 %&#125;<br><br>&#123;% icon icon-wurenji,3 %&#125;&#123;% icon icon-wurenji,4 %&#125;<br><br>&#123;% icon icon-touyingyi,5 %&#125;&#123;% icon icon-touyingyi,6 %&#125;<br><br>&#123;% icon icon-shouhuiban %&#125;&#123;% icon icon-shouhuiban,2 %&#125;<br></code></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="阿里图标icon-4"><svg class="icon" style="width:1em; height:1em" aria-hidden="true"><use xlink:href="#icon-KTV"></use></svg><svg class="icon" style="width:2em; height:2em" aria-hidden="true"><use xlink:href="#icon-huojian"></use></svg><svg class="icon" style="width:3em; height:3em" aria-hidden="true"><use xlink:href="#icon-wangqiu"></use></svg><svg class="icon" style="width:4em; height:4em" aria-hidden="true"><use xlink:href="#icon-zhinengshoubiao"></use></svg><svg class="icon" style="width:5em; height:5em" aria-hidden="true"><use xlink:href="#icon-kongjian"></use></svg><svg class="icon" style="width:6em; height:6em" aria-hidden="true"><use xlink:href="#icon-kongjian"></use></svg><svg class="icon" style="width:1em; height:1em" aria-hidden="true"><use xlink:href="#icon-diannao"></use></svg><svg class="icon" style="width:2em; height:2em" aria-hidden="true"><use xlink:href="#icon-jiqiren"></use></svg><svg class="icon" style="width:3em; height:3em" aria-hidden="true"><use xlink:href="#icon-wurenji"></use></svg><svg class="icon" style="width:4em; height:4em" aria-hidden="true"><use xlink:href="#icon-wurenji"></use></svg><svg class="icon" style="width:5em; height:5em" aria-hidden="true"><use xlink:href="#icon-touyingyi"></use></svg><svg class="icon" style="width:6em; height:6em" aria-hidden="true"><use xlink:href="#icon-touyingyi"></use></svg><svg class="icon" style="width:1em; height:1em" aria-hidden="true"><use xlink:href="#icon-shouhuiban"></use></svg><svg class="icon" style="width:2em; height:2em" aria-hidden="true"><use xlink:href="#icon-shouhuiban"></use></svg><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-24特效标签wow"><a href="#2-24特效标签wow" class="headerlink" title="2.24特效标签wow"></a>2.24特效标签wow</h2><div class="tabs" id="特效标签wow"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#特效标签wow-1">标签语法</button></li><li class="tab"><button type="button" data-href="#特效标签wow-2">配置参数</button></li><li class="tab"><button type="button" data-href="#特效标签wow-3">示例源码</button></li><li class="tab"><button type="button" data-href="#特效标签wow-4">渲染结果</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="特效标签wow-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Markdown">&#123;% wow [animete],[duration],[delay],[offset],[iteration] %&#125;<br>内容<br>&#123;% endwow %&#125;<br></code></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="特效标签wow-2"><ol><li><code>animate</code>: 动画样式，效果详见animate.css参考文档</li><li><code>duration</code>: 选填项，动画持续时间，单位可以是ms也可以是s。例如3s，700ms。</li><li><code>delay</code>: 选填项，动画开始的延迟时间，单位可以是ms也可以是s。例如3s，700ms。</li><li><code>offset</code>: 选填项，开始动画的距离（相对浏览器底部）</li><li><code>iteration</code>: 选填项，动画重复的次数</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="特效标签wow-3"><p>1.flip动画效果<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Markdown">&#123;% wow animate<span class="hljs-strong">__zoomIn,2s,2s,100,10 %&#125;</span><br><span class="hljs-strong">&#123;% note blue &#x27;fas fa-bullhorn&#x27; modern%&#125;</span><br><span class="hljs-strong">`zoomIn`动画效果，持续`2s`，延时`2s`，离底部`100`距离时启动，重复`10`次</span><br><span class="hljs-strong">&#123;% endnote %&#125;</span><br><span class="hljs-strong">&#123;% endwow %&#125;</span><br></code></pre></td></tr></table></figure><br>2.zoomIn动画效果，持续2s，延时2s，离底部100距离时启动，重复10次<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Markdown">&#123;% wow animate<span class="hljs-strong">__zoomIn,2s,2s,100,10 %&#125;</span><br><span class="hljs-strong">&#123;% note blue &#x27;fas fa-bullhorn&#x27; modern%&#125;</span><br><span class="hljs-strong">`zoomIn`动画效果，持续`2s`，延时`2s`，离底部`100`距离时启动，重复`10`次</span><br><span class="hljs-strong">&#123;% endnote %&#125;</span><br><span class="hljs-strong">&#123;% endwow %&#125;</span><br></code></pre></td></tr></table></figure><br>3.slideInRight动画效果，持续2s，延时2s<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Markdown">&#123;% wow animate<span class="hljs-strong">__slideInRight,2s,2s %&#125;</span><br><span class="hljs-strong">&#123;% note orange &#x27;fas fa-car&#x27; modern%&#125;</span><br><span class="hljs-strong">`slideInRight`动画效果，持续`2s`，延时`2s`。</span><br><span class="hljs-strong">&#123;% endnote %&#125;</span><br><span class="hljs-strong">&#123;% endwow %&#125;</span><br></code></pre></td></tr></table></figure><br>4.heartBeat动画效果，延时2s，重复10次。此处注意不用的参数位置要留空，用逗号间隔。<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Markdown">&#123;% wow animate<span class="hljs-strong">__heartBeat,,2s,,10 %&#125;</span><br><span class="hljs-strong">&#123;% note red &#x27;fas fa-battery-half&#x27; modern%&#125;</span><br><span class="hljs-strong">`heartBeat`动画效果，延时`2s`，重复`10`次。</span><br><span class="hljs-strong">&#123;% endnote %&#125;</span><br><span class="hljs-strong">&#123;% endwow %&#125;</span><br></code></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="特效标签wow-4"><p>1.flip动画效果</p><div class='wow animate__zoomIn' data-wow-duration='2s' data-wow-delay='2s' data-wow-offset='100'  data-wow-iteration='10' ><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p><code>zoomIn</code>动画效果，持续<code>2s</code>，延时<code>2s</code>，离底部<code>100</code>距离时启动，重复<code>10</code>次</p></div></div><p>2.zoomIn动画效果，持续2s，延时2s，离底部100距离时启动，重复10次</p><div class='wow animate__zoomIn' data-wow-duration='2s' data-wow-delay='2s' data-wow-offset='100'  data-wow-iteration='10' ><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p><code>zoomIn</code>动画效果，持续<code>2s</code>，延时<code>2s</code>，离底部<code>100</code>距离时启动，重复<code>10</code>次</p></div></div><p>3.slideInRight动画效果，持续2s，延时2s</p><div class='wow animate__slideInRight' data-wow-duration='2s' data-wow-delay='2s' data-wow-offset=''  data-wow-iteration='' ><div class="note orange icon-padding modern"><i class="note-icon fas fa-car"></i><p><code>slideInRight</code>动画效果，持续<code>2s</code>，延时<code>2s</code>。</p></div></div><p>4.heartBeat动画效果，延时2s，重复10次。此处注意不用的参数位置要留空，用逗号间隔。</p><div class='wow animate__heartBeat' data-wow-duration='' data-wow-delay='2s' data-wow-offset=''  data-wow-iteration='10' ><div class="note red icon-padding modern"><i class="note-icon fas fa-battery-half"></i><p><code>heartBeat</code>动画效果，延时<code>2s</code>，重复<code>10</code>次。</p></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-25进度条-progress"><a href="#2-25进度条-progress" class="headerlink" title="2.25进度条 progress"></a>2.25进度条 progress</h2><div class="tabs" id="进度条progress"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#进度条progress-1">标签语法</button></li><li class="tab"><button type="button" data-href="#进度条progress-2">配置参数</button></li><li class="tab"><button type="button" data-href="#进度条progress-3">示例源码</button></li><li class="tab"><button type="button" data-href="#进度条progress-4">渲染结果</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="进度条progress-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Markdown">&#123;% progress [width] [color] [text] %&#125;<br></code></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="进度条progress-2"><ol><li><code>width</code>: 0到100的阿拉伯数字</li><li><code>color</code>: 颜色，取值有red,yellow,green,cyan,blue,gray</li><li><code>text</code>:进度条上的文字内容</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="进度条progress-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Markdown">&#123;% progress 10 red 进度条样式预览 %&#125;<br>&#123;% progress 30 yellow 进度条样式预览 %&#125;<br>&#123;% progress 50 green 进度条样式预览 %&#125;<br>&#123;% progress 70 cyan 进度条样式预览 %&#125;<br>&#123;% progress 90 blue 进度条样式预览 %&#125;<br>&#123;% progress 100 gray 进度条样式预览 %&#125;<br></code></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="进度条progress-4"><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-red"  style="width: 10%" aria-valuenow="10" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-yellow"  style="width: 30%" aria-valuenow="30" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-green"  style="width: 50%" aria-valuenow="50" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-cyan"  style="width: 70%" aria-valuenow="70" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-blue"  style="width: 90%" aria-valuenow="90" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-gray"  style="width: 100%" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-26注释-notation"><a href="#2-26注释-notation" class="headerlink" title="2.26注释 notation"></a>2.26注释 notation</h2><div class="tabs" id="注释notation"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#注释notation-1">标签语法</button></li><li class="tab"><button type="button" data-href="#注释notation-2">配置参数</button></li><li class="tab"><button type="button" data-href="#注释notation-3">示例源码</button></li><li class="tab"><button type="button" data-href="#注释notation-4">渲染结果</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="注释notation-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Markdown">&#123;% nota [label] , [text] %&#125;<br></code></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="注释notation-2"><ol><li><code>label</code>: 注释词汇</li><li><code>text</code>: 悬停显示的注解内容</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="注释notation-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Markdown">&#123;% nota 把鼠标移动到我上面试试 ,可以看到注解内容出现在顶栏 %&#125;<br></code></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="注释notation-4"><p><span class='nota' data-nota='可以看到注解内容出现在顶栏'>把鼠标移动到我上面试试</span></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-27隐藏块-hideBlock"><a href="#2-27隐藏块-hideBlock" class="headerlink" title="2.27隐藏块 hideBlock"></a>2.27隐藏块 hideBlock</h2><div class="tabs" id="隐藏块hideblock"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#隐藏块hideblock-1">标签语法</button></li><li class="tab"><button type="button" data-href="#隐藏块hideblock-2">配置参数</button></li><li class="tab"><button type="button" data-href="#隐藏块hideblock-3">示例源码</button></li><li class="tab"><button type="button" data-href="#隐藏块hideblock-4">渲染结果</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="隐藏块hideblock-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Markdown">&#123;% hideBlock display,bg,color %&#125;<br>content<br>&#123;% endhideBlock %&#125;<br></code></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="隐藏块hideblock-2"><ol><li><code>content</code>：要隐藏的内容</li><li><code>display</code>：展示前按钮显示的文字（可选）</li><li><code>bg</code>：按钮的背景颜色（可选）</li><li><code>color</code>：按钮显示的文字的颜色（可选）</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="隐藏块hideblock-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Markdown">&#123;% hideBlock 点我预览, blue %&#125;<br>这里有张图片：<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.staticaly.com/gh/Rhh-Z/PicBed@main/img/j16.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;image (1)&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;zoom:67%;&quot;</span> /&gt;</span></span><br>&#123;% endhideBlock %&#125;<br></code></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="隐藏块hideblock-4"><div class="hide-block"><button type="button" class="hide-button" style="background-color:  blue;">点我预览    </button><div class="hide-content"><p>这里有张图片：<br><img src="https://cdn.staticaly.com/gh/Rhh-Z/PicBed@main/img/j16.jpg" alt="image (1)" style="zoom:67%;" /></p></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-28友链标签-flink"><a href="#2-28友链标签-flink" class="headerlink" title="2.28友链标签 flink"></a>2.28友链标签 flink</h2><div class="tabs" id="友链标签flink"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#友链标签flink-1">标签语法</button></li><li class="tab"><button type="button" data-href="#友链标签flink-2">配置参数</button></li><li class="tab"><button type="button" data-href="#友链标签flink-3">示例源码</button></li><li class="tab"><button type="button" data-href="#友链标签flink-4">渲染结果</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="友链标签flink-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Markdown">&#123;% flink %&#125;<br>xxxxxx<br>&#123;% endflink %&#125;<br></code></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="友链标签flink-2"><ul><li>class_name 标题</li><li>class_desc 描述</li><li>link_list 链接配置</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="友链标签flink-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs Markdown">&#123;% flink %&#125;<br><span class="hljs-bullet">-</span> class<span class="hljs-emphasis">_name: 友情鏈接</span><br><span class="hljs-emphasis">  class_</span>desc: 那些人，那些事<br>  link<span class="hljs-emphasis">_list:</span><br><span class="hljs-emphasis">    - name: JerryC</span><br><span class="hljs-emphasis">      link: https://jerryc.me/</span><br><span class="hljs-emphasis">      avatar: https://jerryc.me/img/avatar.png</span><br><span class="hljs-emphasis">      descr: 今日事,今日畢</span><br><span class="hljs-emphasis">    - name: Hexo</span><br><span class="hljs-emphasis">      link: https://hexo.io/zh-tw/</span><br><span class="hljs-emphasis">      avatar: https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg</span><br><span class="hljs-emphasis">      descr: 快速、簡單且強大的網誌框架</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">- class_</span>name: 網站<br>  class<span class="hljs-emphasis">_desc: 值得推薦的網站</span><br><span class="hljs-emphasis">  link_</span>list:<br><span class="hljs-bullet">    -</span> name: Youtube<br><span class="hljs-code">      link: https://www.youtube.com/</span><br><span class="hljs-code">      avatar: https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png</span><br><span class="hljs-code">      descr: 視頻網站</span><br><span class="hljs-code">    - name: Weibo</span><br><span class="hljs-code">      link: https://www.weibo.com/</span><br><span class="hljs-code">      avatar: https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png</span><br><span class="hljs-code">      descr: 中國最大社交分享平台</span><br><span class="hljs-code">    - name: Twitter</span><br><span class="hljs-code">      link: https://twitter.com/</span><br><span class="hljs-code">      avatar: https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png</span><br><span class="hljs-code">      descr: 社交分享平台</span><br><span class="hljs-code">&#123;% endflink %&#125;</span><br></code></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="友链标签flink-4"><div class="flink"><div class="flink-name">友情鏈接</div><div class="flink-desc">那些人，那些事</div> <div class="flink-list">          <div class="flink-list-item">            <a href="https://jerryc.me/" title="JerryC" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="https://jerryc.me/img/avatar.png" onerror='this.onerror=null;this.src="https://s1.vika.cn/space/2023/01/19/d358ec1b488b48349d2852a57256600d"' alt="JerryC" />              </div>              <div class="flink-item-name">JerryC</div>               <div class="flink-item-desc" title="今日事,今日畢">今日事,今日畢</div>            </a>          </div>          <div class="flink-list-item">            <a href="https://hexo.io/zh-tw/" title="Hexo" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg" onerror='this.onerror=null;this.src="https://s1.vika.cn/space/2023/01/19/d358ec1b488b48349d2852a57256600d"' alt="Hexo" />              </div>              <div class="flink-item-name">Hexo</div>               <div class="flink-item-desc" title="快速、簡單且強大的網誌框架">快速、簡單且強大的網誌框架</div>            </a>          </div></div><div class="flink-name">網站</div><div class="flink-desc">值得推薦的網站</div> <div class="flink-list">          <div class="flink-list-item">            <a href="https://www.youtube.com/" title="Youtube" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png" onerror='this.onerror=null;this.src="https://s1.vika.cn/space/2023/01/19/d358ec1b488b48349d2852a57256600d"' alt="Youtube" />              </div>              <div class="flink-item-name">Youtube</div>               <div class="flink-item-desc" title="視頻網站">視頻網站</div>            </a>          </div>          <div class="flink-list-item">            <a href="https://www.weibo.com/" title="Weibo" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png" onerror='this.onerror=null;this.src="https://s1.vika.cn/space/2023/01/19/d358ec1b488b48349d2852a57256600d"' alt="Weibo" />              </div>              <div class="flink-item-name">Weibo</div>               <div class="flink-item-desc" title="中國最大社交分享平台">中國最大社交分享平台</div>            </a>          </div>          <div class="flink-list-item">            <a href="https://twitter.com/" title="Twitter" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png" onerror='this.onerror=null;this.src="https://s1.vika.cn/space/2023/01/19/d358ec1b488b48349d2852a57256600d"' alt="Twitter" />              </div>              <div class="flink-item-name">Twitter</div>               <div class="flink-item-desc" title="社交分享平台">社交分享平台</div>            </a>          </div></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
          <category> 魔改 </category>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>给博客配置PWA</title>
      <link href="/archives/c21e7c94.html"/>
      <url>/archives/c21e7c94.html</url>
      
        <content type="html"><![CDATA[<h2 id="配置PWA"><a href="#配置PWA" class="headerlink" title="配置PWA"></a>配置PWA</h2><details class="folding-tag" ><summary> 原教程 </summary>              <div class='content'>              <p>本文教程参考自<a href="https://akilar.top/posts/8f31c3d0/">店长</a></p>              </div>            </details><details class="folding-tag" ><summary> 参考教程 </summary>              <div class='content'>              <p>原教程来自<a href="https://anzhiy.cn/posts/sdxhu.html">安知鱼</a></p>              </div>            </details><p class='p red h4'>1.安装必要插件</p><p>  既然要使用gulp配合workbox实现PWA，自然少不了安装这两个插件<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">npm install --global gulp-cli #全局安装gulp命令集<br>npm install workbox-build gulp --save  #安装work和gulp插件<br><br>#压缩html插件<br>npm install gulp-htmlclean --save-dev<br>npm install --save gulp-htmlmin<br><br>#压缩css插件<br>npm install gulp-clean-css --save-dev<br>#压缩js插件  以下两种压缩方法二选一<br>#1.babel压缩<br>npm install gulp-uglify --save-dev<br>npm install gulp-babel @babel/core @babel/preset-env  --save-dev<br>#2.使用terser压缩<br>npm install gulp-terser --save-dev<br>npm install gulp-babel @babel/core @babel/preset-env  --save-dev<br><br>#压缩图片插件<br>npm install --save-dev gulp-imagemin<br><br>#压缩字体插件（font-min仅支持压缩ttf格式的字体包）<br>npm install gulp-fontmin --save-dev<br></code></pre></td></tr></table></figure></p><div class="tip warning"><p>关于 font-min 的补充说明，在本文中，是通过读取所有编译好的 html 文件（./public/*/.html）中的字符，然后匹配原有字体包内./public/fonts/.ttf 字体样式，输出压缩后的字体包到./public/fontsdest/目录。所以最终引用字体的相对路径应该是/fontsdest/.ttf。而本地测试时，如果没有运行 gulp，自然也就不会输出压缩字体包到 public 目录，也就看不到字体样式。</p></div><div class="tip warning"><p>gulp-terser 只会直接压缩 js 代码，所以不存在因为语法变动导致的错误 。事实上，当我们使用 jsdelivr 的 CDN 服务时，只需要在 css 或者 js 的后缀前添加.min,例如 example.js-&gt;example.min.js,JsDelivr 就会自动使用 terser 帮我们压缩好代码。</p></div><p>在package.json中添加<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&quot;type&quot;:&quot;module&quot;,<br></code></pre></td></tr></table></figure></p><p class='p red h4'>2.创建gulpfile.js</p><p>  在Hexo的根目录，创建一个gulpfile.js文件,打开<code>[Blogroot]/gulpfile.js</code>,<br>输入<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">import</span> gulp <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;gulp&quot;</span>;<br><span class="hljs-keyword">import</span> cleanCSS <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;gulp-clean-css&quot;</span>;<br><span class="hljs-keyword">import</span> htmlmin <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;gulp-htmlmin&quot;</span>;<br><span class="hljs-keyword">import</span> htmlclean <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;gulp-htmlclean&quot;</span>;<br><span class="hljs-keyword">import</span> workbox <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;workbox-build&quot;</span>;<br><span class="hljs-keyword">import</span> fontmin <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;gulp-fontmin&quot;</span>;<br><br><span class="hljs-comment">// 若使用babel压缩js，则取消下方注释，并注释terser的代码</span><br><span class="hljs-comment">// var uglify = require(&#x27;gulp-uglify&#x27;);</span><br><span class="hljs-comment">// var babel = require(&#x27;gulp-babel&#x27;);</span><br><br><span class="hljs-comment">// 若使用terser压缩js</span><br><span class="hljs-keyword">import</span> terser <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;gulp-terser&quot;</span>;<br><br><span class="hljs-comment">//pwa</span><br>gulp.<span class="hljs-title function_">task</span>(<span class="hljs-string">&quot;generate-service-worker&quot;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> workbox.<span class="hljs-title function_">injectManifest</span>(&#123;<br>    <span class="hljs-attr">swSrc</span>: <span class="hljs-string">&quot;./sw-template.js&quot;</span>,<br>    <span class="hljs-attr">swDest</span>: <span class="hljs-string">&quot;./public/sw.js&quot;</span>,<br>    <span class="hljs-attr">globDirectory</span>: <span class="hljs-string">&quot;./public&quot;</span>,<br>    <span class="hljs-attr">globPatterns</span>: [<br>      <span class="hljs-comment">// 缓存所有以下类型的文件，极端不推荐</span><br>      <span class="hljs-comment">// &quot;**/*.&#123;html,css,js,json,woff2,xml&#125;&quot;</span><br>      <span class="hljs-comment">// 推荐只缓存404，主页和主要样式和脚本。</span><br>      <span class="hljs-string">&quot;404.html&quot;</span>,<br>      <span class="hljs-string">&quot;index.html&quot;</span>,<br>      <span class="hljs-string">&quot;js/main.js&quot;</span>,<br>      <span class="hljs-string">&quot;css/index.css&quot;</span>,<br>    ],<br>    <span class="hljs-attr">modifyURLPrefix</span>: &#123;<br>      <span class="hljs-string">&quot;&quot;</span>: <span class="hljs-string">&quot;./&quot;</span>,<br>    &#125;,<br>  &#125;);<br>&#125;);<br><br><span class="hljs-comment">//minify js babel</span><br><span class="hljs-comment">// 若使用babel压缩js，则取消下方注释，并注释terser的代码</span><br><span class="hljs-comment">// gulp.task(&#x27;compress&#x27;, () =&gt;</span><br><span class="hljs-comment">//   gulp.src([&#x27;./public/**/*.js&#x27;, &#x27;!./public/**/*.min.js&#x27;])</span><br><span class="hljs-comment">// .pipe(babel(&#123;</span><br><span class="hljs-comment">// presets: [&#x27;@babel/preset-env&#x27;]</span><br><span class="hljs-comment">// &#125;))</span><br><span class="hljs-comment">//     .pipe(uglify().on(&#x27;error&#x27;, function(e)&#123;</span><br><span class="hljs-comment">//       console.log(e);</span><br><span class="hljs-comment">//     &#125;))</span><br><span class="hljs-comment">// .pipe(gulp.dest(&#x27;./public&#x27;))</span><br><span class="hljs-comment">// );</span><br><br><span class="hljs-comment">// minify js - gulp-tester</span><br><span class="hljs-comment">// 若使用terser压缩js</span><br>gulp.<span class="hljs-title function_">task</span>(<span class="hljs-string">&quot;compress&quot;</span>, <span class="hljs-function">() =&gt;</span><br>  gulp<br>    .<span class="hljs-title function_">src</span>([<br>      <span class="hljs-string">&quot;./public/**/*.js&quot;</span>,<br>      <span class="hljs-string">&quot;!./public/**/*.min.js&quot;</span>,<br>      <span class="hljs-string">&quot;!./public/js/custom/galmenu.js&quot;</span>,<br>      <span class="hljs-string">&quot;!./public/js/custom/gitcalendar.js&quot;</span>,<br>    ])<br>    .<span class="hljs-title function_">pipe</span>(<span class="hljs-title function_">terser</span>())<br>    .<span class="hljs-title function_">pipe</span>(gulp.<span class="hljs-title function_">dest</span>(<span class="hljs-string">&quot;./public&quot;</span>))<br>);<br><br><span class="hljs-comment">//css</span><br>gulp.<span class="hljs-title function_">task</span>(<span class="hljs-string">&quot;minify-css&quot;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> gulp<br>    .<span class="hljs-title function_">src</span>(<span class="hljs-string">&quot;./public/**/*.css&quot;</span>)<br>    .<span class="hljs-title function_">pipe</span>(<br>      <span class="hljs-title function_">cleanCSS</span>(&#123;<br>        <span class="hljs-attr">compatibility</span>: <span class="hljs-string">&quot;ie11&quot;</span>,<br>      &#125;)<br>    )<br>    .<span class="hljs-title function_">pipe</span>(gulp.<span class="hljs-title function_">dest</span>(<span class="hljs-string">&quot;./public&quot;</span>));<br>&#125;);<br><br><span class="hljs-comment">// 压缩 public 目录内 html</span><br>gulp.<span class="hljs-title function_">task</span>(<span class="hljs-string">&quot;minify-html&quot;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> gulp<br>    .<span class="hljs-title function_">src</span>(<span class="hljs-string">&quot;./public/**/*.html&quot;</span>)<br>    .<span class="hljs-title function_">pipe</span>(<span class="hljs-title function_">htmlclean</span>())<br>    .<span class="hljs-title function_">pipe</span>(<br>      <span class="hljs-title function_">htmlmin</span>(&#123;<br>        <span class="hljs-attr">removeComments</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">//清除 HTML 註释</span><br>        <span class="hljs-attr">collapseWhitespace</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">//压缩 HTML</span><br>        <span class="hljs-attr">collapseBooleanAttributes</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">//省略布尔属性的值 &lt;input checked=&quot;true&quot;/&gt; ==&gt; &lt;input /&gt;</span><br>        <span class="hljs-attr">removeEmptyAttributes</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">//删除所有空格作属性值 &lt;input id=&quot;&quot; /&gt; ==&gt; &lt;input /&gt;</span><br>        <span class="hljs-attr">removeScriptTypeAttributes</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">//删除 &lt;script&gt; 的 type=&quot;text/javascript&quot;</span><br>        <span class="hljs-attr">removeStyleLinkTypeAttributes</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">//删除 &lt;style&gt; 和 &lt;link&gt; 的 type=&quot;text/css&quot;</span><br>        <span class="hljs-attr">minifyJS</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">//压缩页面 JS</span><br>        <span class="hljs-attr">minifyCSS</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">//压缩页面 CSS</span><br>        <span class="hljs-attr">minifyURLs</span>: <span class="hljs-literal">true</span>,<br>      &#125;)<br>    )<br>    .<span class="hljs-title function_">pipe</span>(gulp.<span class="hljs-title function_">dest</span>(<span class="hljs-string">&quot;./public&quot;</span>));<br>&#125;);<br><br><span class="hljs-comment">//压缩字体</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">minifyFont</span>(<span class="hljs-params">text, cb</span>) &#123;<br>  gulp<br>    .<span class="hljs-title function_">src</span>(<span class="hljs-string">&quot;./public/fonts/*.ttf&quot;</span>) <span class="hljs-comment">//原字体所在目录</span><br>    .<span class="hljs-title function_">pipe</span>(<br>      <span class="hljs-title function_">fontmin</span>(&#123;<br>        <span class="hljs-attr">text</span>: text,<br>      &#125;)<br>    )<br>    .<span class="hljs-title function_">pipe</span>(gulp.<span class="hljs-title function_">dest</span>(<span class="hljs-string">&quot;./public/fontsdest/&quot;</span>)) <span class="hljs-comment">//压缩后的输出目录</span><br>    .<span class="hljs-title function_">on</span>(<span class="hljs-string">&quot;end&quot;</span>, cb);<br>&#125;<br><br>gulp.<span class="hljs-title function_">task</span>(<span class="hljs-string">&quot;mini-font&quot;</span>, <span class="hljs-function"><span class="hljs-params">cb</span> =&gt;</span> &#123;<br>  <span class="hljs-keyword">var</span> buffers = [];<br>  gulp<br>    .<span class="hljs-title function_">src</span>([<span class="hljs-string">&quot;./public/**/*.html&quot;</span>]) <span class="hljs-comment">//HTML文件所在目录请根据自身情况修改</span><br>    .<span class="hljs-title function_">on</span>(<span class="hljs-string">&quot;data&quot;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">file</span>) &#123;<br>      buffers.<span class="hljs-title function_">push</span>(file.<span class="hljs-property">contents</span>);<br>    &#125;)<br>    .<span class="hljs-title function_">on</span>(<span class="hljs-string">&quot;end&quot;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-keyword">var</span> text = <span class="hljs-title class_">Buffer</span>.<span class="hljs-title function_">concat</span>(buffers).<span class="hljs-title function_">toString</span>(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>      <span class="hljs-title function_">minifyFont</span>(text, cb);<br>    &#125;);<br>&#125;);<br><br><span class="hljs-comment">// 执行 gulp 命令时执行的任务</span><br>gulp.<span class="hljs-title function_">task</span>(<br>  <span class="hljs-string">&quot;default&quot;</span>,<br>  gulp.<span class="hljs-title function_">series</span>(<span class="hljs-string">&quot;generate-service-worker&quot;</span>, gulp.<span class="hljs-title function_">parallel</span>(<span class="hljs-string">&quot;compress&quot;</span>, <span class="hljs-string">&quot;minify-html&quot;</span>, <span class="hljs-string">&quot;minify-css&quot;</span>, <span class="hljs-string">&quot;mini-font&quot;</span>))<br>);<br></code></pre></td></tr></table></figure></p><p class='p red h4'>3.创建一个sw-template.js文件</p><p>创建在Hexo的根目录，创建一个sw-template.js文件,打开<code>[Blogroot]/sw-template.js</code>,输入以下内容：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">const</span> workboxVersion = <span class="hljs-string">&quot;5.1.3&quot;</span>;<br><br><span class="hljs-title function_">importScripts</span>(<span class="hljs-string">`https://storage.googleapis.com/workbox-cdn/releases/<span class="hljs-subst">$&#123;workboxVersion&#125;</span>/workbox-sw.js`</span>);<br><br>workbox.<span class="hljs-property">core</span>.<span class="hljs-title function_">setCacheNameDetails</span>(&#123;<br>  <span class="hljs-attr">prefix</span>: <span class="hljs-string">&quot;Rhh&quot;</span>,<br>&#125;);<br><br>workbox.<span class="hljs-property">core</span>.<span class="hljs-title function_">skipWaiting</span>();<br><br>workbox.<span class="hljs-property">core</span>.<span class="hljs-title function_">clientsClaim</span>();<br><br><span class="hljs-comment">// 注册成功后要立即缓存的资源列表</span><br><span class="hljs-comment">// 具体缓存列表在gulpfile.js中配置，见下文</span><br>workbox.<span class="hljs-property">precaching</span>.<span class="hljs-title function_">precacheAndRoute</span>(self.<span class="hljs-property">__WB_MANIFEST</span>, &#123;<br>  <span class="hljs-attr">directoryIndex</span>: <span class="hljs-literal">null</span>,<br>&#125;);<br><br><span class="hljs-comment">// 清空过期缓存</span><br>workbox.<span class="hljs-property">precaching</span>.<span class="hljs-title function_">cleanupOutdatedCaches</span>();<br><br><span class="hljs-comment">// 图片资源（可选，不需要就注释掉）</span><br><span class="hljs-comment">// workbox.routing.registerRoute(</span><br><span class="hljs-comment">//   /\.(?:png|jpg|jpeg|gif|bmp|webp|svg|ico)$/,</span><br><span class="hljs-comment">//   new workbox.strategies.CacheFirst(&#123;</span><br><span class="hljs-comment">//     cacheName: &#x27;images&#x27;,</span><br><span class="hljs-comment">//     plugins: [</span><br><span class="hljs-comment">//       new workbox.expiration.ExpirationPlugin(&#123;</span><br><span class="hljs-comment">//         maxEntries: 1000,</span><br><span class="hljs-comment">//         maxAgeSeconds: 60 * 60 * 24 * 30,</span><br><span class="hljs-comment">//       &#125;),</span><br><span class="hljs-comment">//       new workbox.cacheableResponse.CacheableResponsePlugin(&#123;</span><br><span class="hljs-comment">//         statuses: [0, 200],</span><br><span class="hljs-comment">//       &#125;),</span><br><span class="hljs-comment">//     ],</span><br><span class="hljs-comment">//   &#125;)</span><br><span class="hljs-comment">// )</span><br><br><span class="hljs-comment">// 字体文件（可选，不需要就注释掉）</span><br>workbox.<span class="hljs-property">routing</span>.<span class="hljs-title function_">registerRoute</span>(<br>  <span class="hljs-regexp">/\.(?:eot|ttf|woff|woff2)$/</span>,<br>  <span class="hljs-keyword">new</span> workbox.<span class="hljs-property">strategies</span>.<span class="hljs-title class_">CacheFirst</span>(&#123;<br>    <span class="hljs-attr">cacheName</span>: <span class="hljs-string">&quot;fonts&quot;</span>,<br>    <span class="hljs-attr">plugins</span>: [<br>      <span class="hljs-keyword">new</span> workbox.<span class="hljs-property">expiration</span>.<span class="hljs-title class_">ExpirationPlugin</span>(&#123;<br>        <span class="hljs-attr">maxEntries</span>: <span class="hljs-number">1000</span>,<br>        <span class="hljs-attr">maxAgeSeconds</span>: <span class="hljs-number">60</span> * <span class="hljs-number">60</span> * <span class="hljs-number">24</span> * <span class="hljs-number">30</span>,<br>      &#125;),<br>      <span class="hljs-keyword">new</span> workbox.<span class="hljs-property">cacheableResponse</span>.<span class="hljs-title class_">CacheableResponsePlugin</span>(&#123;<br>        <span class="hljs-attr">statuses</span>: [<span class="hljs-number">0</span>, <span class="hljs-number">200</span>],<br>      &#125;),<br>    ],<br>  &#125;)<br>);<br><br><span class="hljs-comment">// 谷歌字体（可选，不需要就注释掉）</span><br>workbox.<span class="hljs-property">routing</span>.<span class="hljs-title function_">registerRoute</span>(<br>  <span class="hljs-regexp">/^https:\/\/fonts\.googleapis\.com/</span>,<br>  <span class="hljs-keyword">new</span> workbox.<span class="hljs-property">strategies</span>.<span class="hljs-title class_">StaleWhileRevalidate</span>(&#123;<br>    <span class="hljs-attr">cacheName</span>: <span class="hljs-string">&quot;google-fonts-stylesheets&quot;</span>,<br>  &#125;)<br>);<br>workbox.<span class="hljs-property">routing</span>.<span class="hljs-title function_">registerRoute</span>(<br>  <span class="hljs-regexp">/^https:\/\/fonts\.gstatic\.com/</span>,<br>  <span class="hljs-keyword">new</span> workbox.<span class="hljs-property">strategies</span>.<span class="hljs-title class_">CacheFirst</span>(&#123;<br>    <span class="hljs-attr">cacheName</span>: <span class="hljs-string">&quot;google-fonts-webfonts&quot;</span>,<br>    <span class="hljs-attr">plugins</span>: [<br>      <span class="hljs-keyword">new</span> workbox.<span class="hljs-property">expiration</span>.<span class="hljs-title class_">ExpirationPlugin</span>(&#123;<br>        <span class="hljs-attr">maxEntries</span>: <span class="hljs-number">1000</span>,<br>        <span class="hljs-attr">maxAgeSeconds</span>: <span class="hljs-number">60</span> * <span class="hljs-number">60</span> * <span class="hljs-number">24</span> * <span class="hljs-number">30</span>,<br>      &#125;),<br>      <span class="hljs-keyword">new</span> workbox.<span class="hljs-property">cacheableResponse</span>.<span class="hljs-title class_">CacheableResponsePlugin</span>(&#123;<br>        <span class="hljs-attr">statuses</span>: [<span class="hljs-number">0</span>, <span class="hljs-number">200</span>],<br>      &#125;),<br>    ],<br>  &#125;)<br>);<br><br><span class="hljs-comment">// jsdelivr的CDN资源（可选，不需要就注释掉）</span><br>workbox.<span class="hljs-property">routing</span>.<span class="hljs-title function_">registerRoute</span>(<br>  <span class="hljs-regexp">/^https:\/\/cdn\.jsdelivr\.net/</span>,<br>  <span class="hljs-keyword">new</span> workbox.<span class="hljs-property">strategies</span>.<span class="hljs-title class_">CacheFirst</span>(&#123;<br>    <span class="hljs-attr">cacheName</span>: <span class="hljs-string">&#x27;static-libs&#x27;</span>,<br>    <span class="hljs-attr">plugins</span>: [<br>      <span class="hljs-keyword">new</span> workbox.<span class="hljs-property">expiration</span>.<span class="hljs-title class_">ExpirationPlugin</span>(&#123;<br>        <span class="hljs-attr">maxEntries</span>: <span class="hljs-number">1000</span>,<br>        <span class="hljs-attr">maxAgeSeconds</span>: <span class="hljs-number">60</span> * <span class="hljs-number">60</span> * <span class="hljs-number">24</span> * <span class="hljs-number">30</span>,<br>      &#125;),<br>      <span class="hljs-keyword">new</span> workbox.<span class="hljs-property">cacheableResponse</span>.<span class="hljs-title class_">CacheableResponsePlugin</span>(&#123;<br>        <span class="hljs-attr">statuses</span>: [<span class="hljs-number">0</span>, <span class="hljs-number">200</span>],<br>      &#125;),<br>    ],<br>  &#125;)<br>)<br><br>workbox.<span class="hljs-property">googleAnalytics</span>.<span class="hljs-title function_">initialize</span>();<br></code></pre></td></tr></table></figure></p><p>在<code>[Blogroot]\themes\butterfly\layout\includes\third-party\</code>目录下新建<code>pwanotice.pug</code>文件，<br>打开<code>[Blogroot]\themes\butterfly\layout\includes\third-party\pwanotice.pug</code>,输入：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs JS">#app-refresh.<span class="hljs-property">app</span>-<span class="hljs-title function_">refresh</span>(style=<span class="hljs-string">&#x27;position: fixed;top: -2.2rem;left: 0;right: 0;z-index: 99999;padding: 0 1rem;font-size: 15px;height: 2.2rem;transition: all 0.3s ease;&#x27;</span>)<br>  .<span class="hljs-property">app</span>-refresh-<span class="hljs-title function_">wrap</span>(style=<span class="hljs-string">&#x27; display: flex;color: #fff;height: 100%;align-items: center;justify-content: center;&#x27;</span>)<br>    label ✨ 有新文章啦！ 👉<br>    <span class="hljs-title function_">a</span>(href=<span class="hljs-string">&#x27;javascript:void(0)&#x27;</span> onclick=<span class="hljs-string">&#x27;location.reload()&#x27;</span>)<br>      <span class="hljs-title function_">span</span>(style=<span class="hljs-string">&#x27;color: #fff;text-decoration: underline;cursor: pointer;&#x27;</span>) 🍗点击食用🍔<br>script.<br>  <span class="hljs-keyword">if</span> (<span class="hljs-string">&#x27;serviceWorker&#x27;</span> <span class="hljs-keyword">in</span> navigator) &#123;<br>  <span class="hljs-keyword">if</span> (navigator.<span class="hljs-property">serviceWorker</span>.<span class="hljs-property">controller</span>) &#123;<br>  navigator.<span class="hljs-property">serviceWorker</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;controllerchange&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-title function_">showNotification</span>()<br>  &#125;)<br>  &#125;<br>  <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;load&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  navigator.<span class="hljs-property">serviceWorker</span>.<span class="hljs-title function_">register</span>(<span class="hljs-string">&#x27;/sw.js&#x27;</span>)<br>  &#125;)<br>  &#125;<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">showNotification</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-variable constant_">GLOBAL_CONFIG</span>.<span class="hljs-property">Snackbar</span>) &#123;<br>  <span class="hljs-keyword">var</span> snackbarBg =<br>  <span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span>.<span class="hljs-title function_">getAttribute</span>(<span class="hljs-string">&#x27;data-theme&#x27;</span>) === <span class="hljs-string">&#x27;light&#x27;</span> ?<br>  <span class="hljs-variable constant_">GLOBAL_CONFIG</span>.<span class="hljs-property">Snackbar</span>.<span class="hljs-property">bgLight</span> :<br>  <span class="hljs-variable constant_">GLOBAL_CONFIG</span>.<span class="hljs-property">Snackbar</span>.<span class="hljs-property">bgDark</span><br>  <span class="hljs-keyword">var</span> snackbarPos = <span class="hljs-variable constant_">GLOBAL_CONFIG</span>.<span class="hljs-property">Snackbar</span>.<span class="hljs-property">position</span><br>  <span class="hljs-title class_">Snackbar</span>.<span class="hljs-title function_">show</span>(&#123;<br>  <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;✨ 有新文章啦！ 👉&#x27;</span>,<br>  <span class="hljs-attr">backgroundColor</span>: snackbarBg,<br>  <span class="hljs-attr">duration</span>: <span class="hljs-number">500000</span>,<br>  <span class="hljs-attr">pos</span>: snackbarPos,<br>  <span class="hljs-attr">actionText</span>: <span class="hljs-string">&#x27;🍗点击食用🍔&#x27;</span>,<br>  <span class="hljs-attr">actionTextColor</span>: <span class="hljs-string">&#x27;#fff&#x27;</span>,<br>  <span class="hljs-attr">onActionClick</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) &#123;<br>  location.<span class="hljs-title function_">reload</span>()<br>  &#125;,<br>  &#125;)<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>  <span class="hljs-keyword">var</span> showBg =<br>  <span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span>.<span class="hljs-title function_">getAttribute</span>(<span class="hljs-string">&#x27;data-theme&#x27;</span>) === <span class="hljs-string">&#x27;light&#x27;</span> ?<br>  <span class="hljs-string">&#x27;#3b70fc&#x27;</span> :<br>  <span class="hljs-string">&#x27;#1f1f1f&#x27;</span><br>  <span class="hljs-keyword">var</span> cssText = <span class="hljs-string">`top: 0; background: <span class="hljs-subst">$&#123;showBg&#125;</span>;`</span><br>  <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;app-refresh&#x27;</span>).<span class="hljs-property">style</span>.<span class="hljs-property">cssText</span> = cssText<br>  &#125;<br>  &#125;<br></code></pre></td></tr></table></figure><br>修改<code>[Blogroot]\themes\butterfly\layout\includes\additional-js.pug</code>,在文件底部添加以下内容，注意缩进。butterfly_v3.6.0取消了缓存配置，转为完全默认，需要将<code>&#123;cache:theme.fragment_cache&#125;改为&#123;cache: true&#125;:</code><br><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs DIFF">      if theme.pjax.enable<br>        !=partial(&#x27;includes/third-party/pjax&#x27;, &#123;&#125;, &#123;cache:theme.fragment_cache&#125;)<br><br>      !=partial(&#x27;includes/third-party/baidu_push&#x27;, &#123;&#125;, &#123;cache:theme.fragment_cache&#125;)<br><br><span class="hljs-addition">+     if theme.pwa.enable</span><br><span class="hljs-addition">+       !=partial(&#x27;includes/third-party/pwanotice&#x27;, &#123;&#125;, &#123;cache: true&#125;)</span><br></code></pre></td></tr></table></figure></p><p>将你的图标包移入相应的目录，例如我是/img/siteicon/，所以放到<code>[Blogroot]/source/img/siteicon/</code>目录下。</p><p>新建文件名为<code>manifest.json</code>并将其放到<code>[Blogroot]/source</code>目录下，此时还不能直接用，需要添加一些内容，以下是我的<code>manifest.json配</code>置内容，权且作为参考，其中的<code>theme_color</code>建议用取色器取设计的图标的主色调，同时务必配置 <code>start_url</code> 和 <code>name</code> 的配置项，这关系到你之后能否看到浏览器的应用安装按钮。：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs JSON"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Rhh&#x27;s Blog&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;short_name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Rhh&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;theme_color&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#3b70fc&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;background_color&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#3b70fc&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;display&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;standalone&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;scope&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;start_url&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;icons&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;src&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/img/siteicon/android-chrome-36x36.png&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;sizes&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;36x36&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;image/png&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;src&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/img/siteicon/android-chrome-48x48.png&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;sizes&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;48x48&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;image/png&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;src&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/img/siteicon/android-chrome-72x72.png&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;sizes&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;72x72&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;image/png&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;src&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/img/siteicon/android-chrome-96x96.png&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;sizes&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;96x96&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;image/png&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;src&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/img/siteicon/android-chrome-144x144.png&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;sizes&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;144x144&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;image/png&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;src&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/img/siteicon/android-chrome-192x192.png&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;sizes&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;192x192&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;image/png&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;src&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/img/siteicon/android-chrome-256x256.png&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;sizes&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;256x256&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;image/png&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;splash_pages&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></p><p>打开主题配置文件<code>[Blogroot]/_config.butterfly.yml</code>,找到PWA配置项。添加图标路径。这里的 theme_color 建议改成你图标的主色调，包括<code>manifest.json</code>中的<code>theme_color</code>也是如此。<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs YAML"><span class="hljs-attr">pwa:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">manifest:</span> <span class="hljs-string">/manifest.json</span><br>  <span class="hljs-attr">theme_color:</span> <span class="hljs-string">&quot;#3b70fc&quot;</span><br>  <span class="hljs-attr">apple_touch_icon:</span> <span class="hljs-string">/img/siteicon/apple-touch-icon.png</span><br>  <span class="hljs-attr">favicon_32_32:</span> <span class="hljs-string">/img/siteicon/favicon-32x32.png</span><br>  <span class="hljs-attr">favicon_16_16:</span> <span class="hljs-string">/img/siteicon/favicon-16x16.png</span><br>  <span class="hljs-attr">mask_icon:</span> <span class="hljs-string">/img/siteicon/safari-pinned-tab.svg</span><br></code></pre></td></tr></table></figure></p><p>安装完成后执行命令：<code>gulp;hexo cl;hexo g</code><br>然后再启动项目查看效果</p>]]></content>
      
      
      <categories>
          
          <category> PWA </category>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> PWA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记录Scss学习中的特殊效果实现</title>
      <link href="/archives/cffcff17.html"/>
      <url>/archives/cffcff17.html</url>
      
        <content type="html"><![CDATA[<h1 id="Scss的学习记录"><a href="#Scss的学习记录" class="headerlink" title="Scss的学习记录"></a>Scss的学习记录</h1><p><br/></p><h2 id="1-字体渐变"><a href="#1-字体渐变" class="headerlink" title="1.字体渐变"></a>1.字体渐变</h2><p>效果：<br><div class="hide-block"><button type="button" class="hide-button" style="background-color:  blue;">点我预览    </button><div class="hide-content"><p><img src="/noteimg/image-20220926144750998.png" alt="image-20220926144750998"></p></div></div></p><h3 id="先给里面每个添加动画，改变颜色和阴影"><a href="#先给里面每个添加动画，改变颜色和阴影" class="headerlink" title="先给里面每个添加动画，改变颜色和阴影"></a>先给里面每个添加动画，改变颜色和阴影</h3><div class="hide-block"><button type="button" class="hide-button" style="background-color: blue;">点我预览    </button><div class="hide-content"><p><img src="/noteimg/image-20220926145003054.png" alt="image-20220926145003054"></p></div></div><h3 id="再给后面的每一个span添加延迟"><a href="#再给后面的每一个span添加延迟" class="headerlink" title="再给后面的每一个span添加延迟"></a>再给后面的每一个span添加延迟</h3><div class="hide-block"><button type="button" class="hide-button" style="background-color: blue;">点我预览    </button><div class="hide-content"><p><img src="/noteimg/image-20220926145313482.png" alt="image-20220926145313482"></p></div></div><p>实现方法：<br><div class="tabs" id="method"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#method-1">HTML</button></li><li class="tab"><button type="button" data-href="#method-2">Scss</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="method-1"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs HTMl"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;heading--primary&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;header__text--box&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;heading--primary--main&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>O<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>U<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>T<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>D<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>O<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>O<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>R<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>S<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;heading--primary--sub&quot;</span>&gt;</span>is where life happens<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#section-tours&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn--white btn--animated&quot;</span>&gt;</span>Discover out tours<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br></code></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="method-2"><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs Scss"><span class="hljs-selector-class">.heading--primary</span> &#123;<br>  <span class="hljs-comment">// color: $color-white;</span><br>  <span class="hljs-attribute">text-transform</span>: uppercase;<br>  <span class="hljs-attribute">backface-visibility</span>: hidden;<br><br>  &amp;<span class="hljs-attr">--main</span> &#123;<br>    <span class="hljs-attribute">display</span>: block;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">6rem</span>;<br>    <span class="hljs-attribute">letter-spacing</span>: <span class="hljs-number">1.5rem</span>;<br>    <span class="hljs-attribute">animation-name</span>: moveInLeft;<br>    <span class="hljs-attribute">animation-duration</span>: <span class="hljs-number">1s</span>;<br>    <span class="hljs-attribute">animation-timing-function</span>: ease-out;<br>    <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">5rem</span>;<br>  &#125;<br><br>  &amp;<span class="hljs-attr">--main</span> <span class="hljs-selector-tag">span</span> &#123;<br>    <span class="hljs-attribute">animation</span>: shadowing <span class="hljs-number">1s</span> ease-in-out infinite alternate;<br>  &#125;<br><br>  &amp;<span class="hljs-attr">--main</span> <span class="hljs-selector-tag">span</span><span class="hljs-selector-pseudo">:nth-child</span>(n+<span class="hljs-number">2</span>) &#123;<br>    <span class="hljs-attribute">animation-delay</span>: .<span class="hljs-number">2s</span>;<br>  &#125;<br><br>  &amp;<span class="hljs-attr">--main</span> <span class="hljs-selector-tag">span</span><span class="hljs-selector-pseudo">:nth-child</span>(n+<span class="hljs-number">3</span>) &#123;<br>    <span class="hljs-attribute">animation-delay</span>: .<span class="hljs-number">4s</span>;<br>  &#125;<br><br>  &amp;<span class="hljs-attr">--main</span> <span class="hljs-selector-tag">span</span><span class="hljs-selector-pseudo">:nth-child</span>(n+<span class="hljs-number">4</span>) &#123;<br>    <span class="hljs-attribute">animation-delay</span>: .<span class="hljs-number">8s</span>;<br>  &#125;<br><br>  &amp;<span class="hljs-attr">--main</span> <span class="hljs-selector-tag">span</span><span class="hljs-selector-pseudo">:nth-child</span>(n+<span class="hljs-number">5</span>) &#123;<br>    <span class="hljs-attribute">animation-delay</span>: <span class="hljs-number">1s</span>;<br>  &#125;<br><br>  &amp;<span class="hljs-attr">--main</span> <span class="hljs-selector-tag">span</span><span class="hljs-selector-pseudo">:nth-child</span>(n+<span class="hljs-number">6</span>) &#123;<br>    <span class="hljs-attribute">animation-delay</span>: <span class="hljs-number">1.2s</span>;<br>  &#125;<br><br><br>  &amp;<span class="hljs-attr">--sub</span> &#123;<br>    <span class="hljs-attribute">display</span>: block;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">2rem</span>;<br>    <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">700</span>;<br>    <span class="hljs-attribute">letter-spacing</span>: <span class="hljs-number">1.7rem</span>;<br>    <span class="hljs-attribute">animation-name</span>: moveInRight;<br>    <span class="hljs-attribute">animation-duration</span>: <span class="hljs-number">1s</span>;<br>    <span class="hljs-attribute">animation-timing-function</span>: ease-out;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">@keyframes</span> shadowing &#123;<br>  to &#123;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-built_in">hsla</span>(<span class="hljs-number">308</span>, <span class="hljs-number">95%</span>, <span class="hljs-number">77%</span>, <span class="hljs-number">0.741</span>);<br>    <span class="hljs-attribute">text-shadow</span>: <span class="hljs-number">2rem</span> <span class="hljs-number">0</span> <span class="hljs-number">7rem</span> <span class="hljs-built_in">hsla</span>(<span class="hljs-number">308</span>, <span class="hljs-number">95%</span>, <span class="hljs-number">77%</span>, <span class="hljs-number">0.741</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div></p><h2 id="2-背景颜色和图片混合"><a href="#2-背景颜色和图片混合" class="headerlink" title="2.背景颜色和图片混合"></a>2.背景颜色和图片混合</h2><div class="hide-block"><button type="button" class="hide-button" style="background-color: blue;">点我预览    </button><div class="hide-content"><p><img src="/noteimg/image-20220926145434625.png" alt="image-20220926145434625"></p></div></div><div class="note orange icon-padding flat"><i class="note-icon fas fa-battery-half"></i><p>在background-image属性中添加linear-gradient(线性渐变),可以使背景颜色和图标混合</p></div><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Scss"><span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">linear-gradient</span>(to right bottom,<br>    <span class="hljs-built_in">rgba</span>(<span class="hljs-variable">$color-primary</span>, <span class="hljs-number">0.814</span>),<br>    <span class="hljs-built_in">rgba</span>(<span class="hljs-variable">$color-primary-light</span>, <span class="hljs-number">0.7</span>)),<br>    <span class="hljs-built_in">url</span>(/img/hero.jpg);<br><span class="hljs-attribute">background-position</span>: top;<br><span class="hljs-attribute">background-size</span>: cover;<br></code></pre></td></tr></table></figure><h3 id="背景混合模式的显示background-blend-mode"><a href="#背景混合模式的显示background-blend-mode" class="headerlink" title="背景混合模式的显示background-blend-mode"></a>背景混合模式的显示background-blend-mode</h3><ol><li><code>background-blend-mode</code>本身就带有隔离特性，也就是一个元素应用<code>background-blend-mode</code>背景混合模式，最终的效果只会受当前元素的背景图像和背景颜色影响，不会受视觉上处于当前区域其他任意元素影响。</li><li>应用<code>background-blend-mode</code>属性后，不仅各个图像之间要进行混合，同时还要和背景色进行混合。可以更改混合模式下背景的显示效果</li></ol><h2 id="3-按钮经过弹起和点击落下"><a href="#3-按钮经过弹起和点击落下" class="headerlink" title="3.按钮经过弹起和点击落下"></a>3.按钮经过弹起和点击落下</h2><div class="note orange icon-padding flat"><i class="note-icon fas fa-battery-half"></i><p>以下&amp;为.btn,hover和active都是伪元素,hover为鼠标经过,active为点击激活</p></div><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Scss">&amp;<span class="hljs-selector-pseudo">:hover</span> &#123;<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateY</span>(-<span class="hljs-number">0.3rem</span>);<br>    <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">1rem</span> <span class="hljs-number">2rem</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-variable">$color-black</span>, .<span class="hljs-number">2</span>);<br>  &#125;<br><br>&amp;<span class="hljs-selector-pseudo">:active</span> &#123;<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateY</span>(-<span class="hljs-number">0.1rem</span>);<br>    <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">0.5rem</span> <span class="hljs-number">1rem</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-variable">$color-black</span>, .<span class="hljs-number">2</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-经过按钮渐变弹出效果"><a href="#4-经过按钮渐变弹出效果" class="headerlink" title="4.经过按钮渐变弹出效果"></a>4.经过按钮渐变弹出效果</h2><div class="hide-block"><button type="button" class="hide-button" style="background-color: purple;">点我预览    </button><div class="hide-content"><p><img src="/noteimg/image-20220926150537916.png" alt="image-20220926150537916"></p></div></div><div class="note orange icon-padding flat"><i class="note-icon fas fa-battery-half"></i><p>&amp;为btn</p></div><h2 id="5-动画执行时间"><a href="#5-动画执行时间" class="headerlink" title="5.动画执行时间"></a>5.动画执行时间</h2><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs Scss"><span class="hljs-selector-class">.btn</span> &#123;<br><br>  &amp;,<br>  &amp;<span class="hljs-selector-pseudo">:link</span>,<br>  &amp;<span class="hljs-selector-pseudo">:visited</span> &#123;<br>    <span class="hljs-attribute">text-transform</span>: uppercase;<br>    <span class="hljs-attribute">text-decoration</span>: none;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-variable">$default-font-size</span>;<br>    <span class="hljs-comment">// padding: 1.5rem 4rem;</span><br>    <span class="hljs-comment">// transition: all .2s;</span><br>    <span class="hljs-comment">// position: relative;</span><br>    <span class="hljs-comment">// font-size: $default-font-size;</span><br><br>    <span class="hljs-comment">// Change for button</span><br>    <span class="hljs-attribute">cursor</span>: pointer;<br>  &#125;<br><br><br>  &amp;<span class="hljs-attr">--white</span> &#123;<br>    <span class="hljs-attribute">background-color</span>: <span class="hljs-variable">$color-white</span>;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-variable">$color-grey-dark</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">2rem</span> <span class="hljs-number">3rem</span>;<br>    <span class="hljs-attribute">display</span>: inline-block;<br>    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">10rem</span>;<br>    <span class="hljs-attribute">transition</span>: all .<span class="hljs-number">2s</span>;<br>    <span class="hljs-attribute">position</span>: relative;<br>  &#125;<br><br>  &amp;<span class="hljs-selector-pseudo">:hover</span> &#123;<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateY</span>(-<span class="hljs-number">0.3rem</span>);<br>    <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">1rem</span> <span class="hljs-number">2rem</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-variable">$color-black</span>, .<span class="hljs-number">2</span>);<br>  &#125;<br><br>  &amp;<span class="hljs-selector-pseudo">:active</span> &#123;<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateY</span>(-<span class="hljs-number">0.1rem</span>);<br>    <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">0.5rem</span> <span class="hljs-number">1rem</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-variable">$color-black</span>, .<span class="hljs-number">2</span>);<br>  &#125;<br><br>  &amp;<span class="hljs-selector-pseudo">::after</span> &#123;<br>    <span class="hljs-attribute">content</span>: <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-attribute">display</span>: inline-block;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">10rem</span>;<br>    <span class="hljs-attribute">position</span>: absolute;<br>    <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">z-index</span>: -<span class="hljs-number">1</span>;<br>    <span class="hljs-attribute">transition</span>: all .<span class="hljs-number">4s</span>;<br>  &#125;<br><br>  &amp;<span class="hljs-attr">--white</span><span class="hljs-selector-pseudo">::after</span> &#123;<br>    <span class="hljs-attribute">background-color</span>: <span class="hljs-variable">$color-white</span>;<br>  &#125;<br><br>  &amp;<span class="hljs-selector-pseudo">:hover</span><span class="hljs-selector-pseudo">::after</span> &#123;<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">scaleY</span>(<span class="hljs-number">1.4</span>) <span class="hljs-built_in">scaleX</span>(<span class="hljs-number">1.6</span>);<br>    <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;<br>  &#125;<br><br>  <span class="hljs-comment">/* 为按钮添加动画 */</span><br>  &amp;<span class="hljs-attr">--animated</span> &#123;<br>    <span class="hljs-attribute">animation</span>: moveInBottom <span class="hljs-number">1s</span> ease-out .<span class="hljs-number">75s</span>;<br>    <span class="hljs-attribute">animation-fill-mode</span>: backwards;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">@keyframes</span> moveInBottom &#123;<br>  <span class="hljs-number">0%</span> &#123;<br>    <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateX</span>(<span class="hljs-number">10rem</span>);<br>  &#125;<br><br>  <span class="hljs-number">100%</span> &#123;<br>    <span class="hljs-attribute">opacity</span>: <span class="hljs-number">1</span>;<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(<span class="hljs-number">0</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p class='p blue'>上一部分代码里面用到了Css3的 animation-fill-mode 属性 下面来看看他有什么作用</p><p><code>forwords 把物体动画地从一个地方移动到另一个地方，并让它停留在那里：</code><br><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Scss"><span class="hljs-attribute">animation-fill-mode</span>:forwards;<br>-webkit-<span class="hljs-attribute">animation-fill-mode</span>:forwards; <span class="hljs-comment">/* Safari 和 Chrome */</span><br></code></pre></td></tr></table></figure><br><div class="note orange icon-padding flat"><i class="note-icon fas fa-battery-half"></i><p>animation-fill-mode 属性规定当动画不播放时（当动画完成时，或当动画有一个延迟未开始播放时），要应用到元素的样式。默认情况下，CSS 动画在第一个关键帧播放完之前不会影响元素，在最后一个关键帧完成后停止影响元素。animation-fill-mode 属性可重写该行为。</p></div></p><div class="tip key"><p>animation-fill-mode：可标识元素在动画开始之前和完成之后处于哪种状态。<br>animation-fill-mode：forwards：动画完成后，元素状态将对应于最后一帧。<br><strong>animation-fill-mode：backwards：动画完成后，元素状态将对应于第一帧。</strong>(<strong>使用场景可以延迟到其他所有动画执行完后再执行使用此属性的动画</strong>)<br>animation-fill-mode：both：动画开始之前，元素状态将与第一帧相对应，而在其完成之后将与最后一个帧相对应。</p></div><h2 id="6-栅格布局"><a href="#6-栅格布局" class="headerlink" title="6.栅格布局"></a>6.栅格布局</h2><p>左文本，右图片<br><div class="hide-block"><button type="button" class="hide-button" style="">点我预览 blue    </button><div class="hide-content"><p><img src="/noteimg/image-20220926151421178.png" alt="image-20220926151421178"></p></div></div></p><p>HTML如下，col-1-of-2即每行所占的比例，如二分之一<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">section</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;grid-test&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-1-of-2&quot;</span>&gt;</span><br>                Col 1 of 2<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-1-of-2&quot;</span>&gt;</span><br>                Col 1 of 2<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-1-of-3&quot;</span>&gt;</span><br>                Col 1 of 3<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-1-of-3&quot;</span>&gt;</span><br>                Col 1 of 3<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-1-of-3&quot;</span>&gt;</span><br>                Col 1 of 3<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-1-of-3&quot;</span>&gt;</span><br>                Col 1 of 3<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-2-of-3&quot;</span>&gt;</span><br>                Col 2 of 3<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-1-of-4&quot;</span>&gt;</span><br>                Col 1 of 4<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-1-of-4&quot;</span>&gt;</span><br>                Col 1 of 4<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-1-of-4&quot;</span>&gt;</span><br>                Col 1 of 4<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-1-of-4&quot;</span>&gt;</span><br>                Col 1 of 4<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-1-of-4&quot;</span>&gt;</span><br>                Col 1 of 4<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-1-of-4&quot;</span>&gt;</span><br>                Col 1 of 4<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-2-of-4&quot;</span>&gt;</span><br>                Col 2 of 4<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-1-of-4&quot;</span>&gt;</span><br>                Col 1 of 4<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-3-of-4&quot;</span>&gt;</span><br>                Col 3 of 4<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span> <br></code></pre></td></tr></table></figure></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs Scss"><span class="hljs-selector-class">.row</span> &#123;<br>  <span class="hljs-attribute">max-width</span>: <span class="hljs-variable">$grid-width</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;<br><br>  <span class="hljs-comment">//伪类选择器，:not()选择不包含的元素，配合:last-child即除最后一个子元素以外的其他所有子元素</span><br>  &amp;<span class="hljs-selector-pseudo">:not</span>(:last-child) &#123;<br>  <span class="hljs-comment">//$gutter-vertical为垂直方向距离</span><br>    <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-variable">$gutter-vertical</span>;<br>  &#125;<br><br>  <span class="hljs-keyword">@include</span> clearfix;<br><br><span class="hljs-comment">//属性选择器,选择以类名为col-开头的元素</span><br>  <span class="hljs-selector-attr">[class^=<span class="hljs-string">&quot;col-&quot;</span>]</span> &#123;<br>    <span class="hljs-attribute">float</span>: left;<br><br>    &amp;<span class="hljs-selector-pseudo">:not</span>(:last-child) &#123;<br>      <span class="hljs-comment">//$gutter-horizontal为水平方向距离</span><br>      <span class="hljs-attribute">margin-right</span>: <span class="hljs-variable">$gutter-horizontal</span>;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">//每个元素在每行中所占的比例用calc()属性计算</span><br>  <span class="hljs-selector-class">.col-1-of-2</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-built_in">calc</span>((<span class="hljs-number">100%</span> - #&#123;<span class="hljs-variable">$gutter-horizontal</span>&#125;) / <span class="hljs-number">2</span>);<br>  &#125;<br><br>  <span class="hljs-selector-class">.col-1-of-3</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-built_in">calc</span>((<span class="hljs-number">100%</span> - <span class="hljs-number">2</span> * #&#123;<span class="hljs-variable">$gutter-horizontal</span>&#125;) / <span class="hljs-number">3</span>);<br>  &#125;<br><br>  <span class="hljs-selector-class">.col-2-of-3</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">2</span> *((<span class="hljs-number">100%</span> - <span class="hljs-number">2</span> * #&#123;<span class="hljs-variable">$gutter-horizontal</span>&#125;) / <span class="hljs-number">3</span>) + #&#123;<span class="hljs-variable">$gutter-horizontal</span>&#125;);<br>  &#125;<br><br>  <span class="hljs-selector-class">.col-1-of-4</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-built_in">calc</span>((<span class="hljs-number">100%</span> - <span class="hljs-number">3</span> * #&#123;<span class="hljs-variable">$gutter-horizontal</span>&#125;) / <span class="hljs-number">4</span>);<br>  &#125;<br><br>  <span class="hljs-selector-class">.col-2-of-4</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">2</span> * ((<span class="hljs-number">100%</span> - <span class="hljs-number">3</span> * #&#123;<span class="hljs-variable">$gutter-horizontal</span>&#125;) / <span class="hljs-number">4</span>) + #&#123;<span class="hljs-variable">$gutter-horizontal</span>&#125;);<br>  &#125;<br><br>  <span class="hljs-selector-class">.col-3-of-4</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">3</span> * ((<span class="hljs-number">100%</span> - <span class="hljs-number">3</span> * #&#123;<span class="hljs-variable">$gutter-horizontal</span>&#125;) / <span class="hljs-number">4</span>) + <span class="hljs-number">2</span>* #&#123;<span class="hljs-variable">$gutter-horizontal</span>&#125;);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="7-文字渐变"><a href="#7-文字渐变" class="headerlink" title="7.文字渐变"></a>7.文字渐变</h2><div class="hide-block"><button type="button" class="hide-button" style="">Click    </button><div class="hide-content"><p><img src="/noteimg/image-20221124124336304.png" alt="image-20221124124336304"></p></div></div><div class="tabs" id="method"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#method-1">HTML</button></li><li class="tab"><button type="button" data-href="#method-2">Css</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="method-1"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;heading-secondary&quot;</span>&gt;</span><br>  Exciting tours for adventurous people<br><span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br></code></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="method-2"><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs Scss"><span class="hljs-selector-class">.heading-secondary</span> &#123;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">3.5rem</span>;<br>  <span class="hljs-attribute">text-transform</span>: uppercase;<br>  <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">700</span>;<br>  <span class="hljs-comment">//将h2块级元素改为文本元素</span><br>  <span class="hljs-attribute">display</span>: inline-block;<br>  <span class="hljs-comment">//给文本添加渐变背景色</span><br>  <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">linear-gradient</span>(to right, <span class="hljs-variable">$color-primary-light</span>, <span class="hljs-variable">$color-primary-dark</span>);<br>  <span class="hljs-comment">//让背景色以文本形式显示</span><br>  <span class="hljs-attribute">background-clip</span>: text;<br>  -webkit-<span class="hljs-attribute">background-clip</span>: text;<br>  <span class="hljs-comment">//将文字颜色改为透明色,就可以让文字显示出背景的渐变色</span><br>  <span class="hljs-attribute">color</span>: transparent;<br>  <span class="hljs-attribute">letter-spacing</span>: .<span class="hljs-number">2rem</span>;<br>  <span class="hljs-attribute">transition</span>: all .<span class="hljs-number">2s</span>;<br><br>  &amp;<span class="hljs-selector-pseudo">:hover</span> &#123;<br>  <span class="hljs-comment">//skew倾斜属性</span><br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">skewX</span>(<span class="hljs-number">15deg</span>) <span class="hljs-built_in">skewY</span>(<span class="hljs-number">2deg</span>);<br>    <span class="hljs-attribute">text-shadow</span>: .<span class="hljs-number">5rem</span> <span class="hljs-number">1rem</span> <span class="hljs-number">2rem</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-variable">$color</span>: <span class="hljs-number">#000000</span>, <span class="hljs-variable">$alpha</span>: .<span class="hljs-number">2</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="8-清除浮动"><a href="#8-清除浮动" class="headerlink" title="8.清除浮动"></a>8.清除浮动</h2><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Scss"><span class="hljs-keyword">@mixin</span> clearfix &#123;<br>  &amp;<span class="hljs-selector-pseudo">::after</span> &#123;<br>    <span class="hljs-attribute">content</span>: <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-attribute">display</span>: table;<br>    <span class="hljs-attribute">clear</span>: both;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="9-鼠标悬停图片的外边框"><a href="#9-鼠标悬停图片的外边框" class="headerlink" title="9.鼠标悬停图片的外边框"></a>9.鼠标悬停图片的外边框</h2><div class="hide-block"><button type="button" class="hide-button" style="">点击预览 blue    </button><div class="hide-content"><p><img src="/noteimg/image-20220926153149481.png" alt="image-20220926153149481"></p></div></div><p>给图片添加<code>outline-offset</code>属性，给一个偏移大小,然后再产生动画时给其一个<code>1px</code>的边框</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs Scss"><span class="hljs-selector-class">.composition</span> &#123;<br>    <span class="hljs-attribute">position</span>: relative;<br><br>    &amp;__photo &#123;<br>        <span class="hljs-attribute">width</span>: <span class="hljs-number">55%</span>;<br>        <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">1.5rem</span> <span class="hljs-number">4rem</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-variable">$color-black</span>, .<span class="hljs-number">4</span>);<br>        <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">2px</span>;<br>        <span class="hljs-attribute">position</span>: absolute;<br>        <span class="hljs-attribute">z-index</span>: <span class="hljs-number">10</span>;<br>        <span class="hljs-attribute">transition</span>: all .<span class="hljs-number">2s</span>;<br>        <span class="hljs-attribute">outline-offset</span>: <span class="hljs-number">2rem</span>;<br><br>        &amp;<span class="hljs-attr">--p1</span> &#123;<br>            <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;<br>            <span class="hljs-attribute">top</span>: -<span class="hljs-number">2rem</span>;<br>        &#125;<br><br>        &amp;<span class="hljs-attr">--p2</span> &#123;<br>            <span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>;<br>            <span class="hljs-attribute">top</span>: <span class="hljs-number">2rem</span>;<br>        &#125;<br><br>        &amp;<span class="hljs-attr">--p3</span> &#123;<br>            <span class="hljs-attribute">left</span>: <span class="hljs-number">20%</span>;<br>            <span class="hljs-attribute">top</span>: <span class="hljs-number">10rem</span>;<br>        &#125;<br><br>        &amp;<span class="hljs-selector-pseudo">:hover</span> &#123;<br>        <span class="hljs-comment">//给outline添加样式  类似于border</span><br>            <span class="hljs-attribute">outline</span>: <span class="hljs-number">1.5rem</span> solid <span class="hljs-variable">$color-primary</span>;<br>            <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">scale</span>(<span class="hljs-number">1.05</span>) <span class="hljs-built_in">translateY</span>(-.<span class="hljs-number">5rem</span>);<br>            <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">2.5rem</span> <span class="hljs-number">4rem</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-variable">$color-black</span>, .<span class="hljs-number">5</span>);<br>            <span class="hljs-attribute">z-index</span>: <span class="hljs-number">20</span>;<br>        &#125;<br>    &#125;<br><br>    &amp;<span class="hljs-selector-pseudo">:hover</span> &amp;__photo<span class="hljs-selector-pseudo">:not</span>(:hover) &#123;<br>        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">scale</span>(.<span class="hljs-number">95</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="10-背景倾斜"><a href="#10-背景倾斜" class="headerlink" title="10.背景倾斜"></a>10.背景倾斜</h2><div class="hide-block"><button type="button" class="hide-button" style="">点击预览 blue    </button><div class="hide-content"><p><img src="/noteimg/image-20220926154402122.png" alt="image-20220926154402122"></p></div></div><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Scss"><span class="hljs-selector-class">.section-features</span> &#123;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">20rem</span> <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">linear-gradient</span>(to right bottom,<br>      <span class="hljs-built_in">rgba</span>(<span class="hljs-variable">$color-primary</span>, <span class="hljs-number">0.814</span>),<br>      <span class="hljs-built_in">rgba</span>(<span class="hljs-variable">$color-primary-light</span>, <span class="hljs-number">0.808</span>)),<br>    <span class="hljs-built_in">url</span>(/img/nat-<span class="hljs-number">4</span>.jpg);<br>    <span class="hljs-comment">//给背景(即外盒子)添加skewY倾斜属性</span><br>  <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">skewY</span>(-<span class="hljs-number">7deg</span>);<br>  <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">8rem</span>;<br><br>  <span class="hljs-comment">//倾斜属性会被继承添加到后面的每个子元素中，用子选择器将每个子元素进行反向偏移，里面的元素就会</span><br>  &amp;&gt;* &#123;<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">skewY</span>(<span class="hljs-number">7deg</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="11-文本排列在图片周围"><a href="#11-文本排列在图片周围" class="headerlink" title="11.文本排列在图片周围"></a>11.文本排列在图片周围</h2><div class="hide-block"><button type="button" class="hide-button" style="">点击预览 blue    </button><div class="hide-content"><p><img src="/noteimg/image-20220927191619772.png" alt="image-20220927191619772"></p></div></div><p><code>在图片的外盒子添加</code><br><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Scss"><span class="hljs-attribute">shape-outside</span>: <span class="hljs-built_in">circle</span>(<span class="hljs-number">50%</span> at <span class="hljs-number">50%</span> <span class="hljs-number">50%</span>);<br>-webkit-<span class="hljs-attribute">shape-outside</span>: <span class="hljs-built_in">circle</span>(<span class="hljs-number">50%</span> at <span class="hljs-number">50%</span> <span class="hljs-number">50%</span>);<br></code></pre></td></tr></table></figure></p><h2 id="12-视频背景"><a href="#12-视频背景" class="headerlink" title="12.视频背景"></a>12.视频背景</h2><div class="hide-block"><button type="button" class="hide-button" style="">点击预览 blue    </button><div class="hide-content"><p><img src="/noteimg/image-20220927192204341.png" alt="image-20220927192204341"></p></div></div><div class="tabs" id="method"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#method-1">HTML</button></li><li class="tab"><button type="button" data-href="#method-2">Scss</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="method-1"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bg-video&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">video</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bg-video__content&quot;</span> <span class="hljs-attr">autoplay</span> <span class="hljs-attr">muted</span> <span class="hljs-attr">loop</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">source</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./img/video.mp4&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;video/mp4&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">source</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./img/video.webm&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;video/webm&quot;</span>&gt;</span><br>      Your browser is not supported!<br>   <span class="hljs-tag">&lt;/<span class="hljs-name">video</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="method-2"><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Scss"><span class="hljs-selector-class">.bg-video</span> &#123;<br>    <span class="hljs-attribute">position</span>: absolute;<br>    <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>    <span class="hljs-attribute">z-index</span>: -<span class="hljs-number">1</span>;<br>    <span class="hljs-attribute">opacity</span>: .<span class="hljs-number">15</span>;<br>    <span class="hljs-attribute">overflow</span>: hidden;<br><br>    &amp;__content &#123;<br>        <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;<br>        <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>        <span class="hljs-selector-tag">object</span>-fit: cover;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>给视频添加了宽高后横纵比无法完全填充，使用<code>object-fit:cover</code>;填充</p>]]></content>
      
      
      <categories>
          
          <category> Scss </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scss </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>心路</title>
      <link href="/archives/d02caa9c.html"/>
      <url>/archives/d02caa9c.html</url>
      
        <content type="html"><![CDATA[<h2 id="小记"><a href="#小记" class="headerlink" title="小记"></a>小记</h2><p>2022年11月23日 18点52分  天气：小雨</p><p>从18号请假回来也已经5天了,这5天,我也感受到了很多，也想趁着我的播客刚刚搭建好，可以写些东西,然而手指放到键盘的那一刻，却又不知从何说起。</p><p class='p cyan'>从学校的压抑中走出来，心情也轻松不少，可这一年来的经历，确实已经有些难以倾诉。回望过去的一年，从期望到失落，再到最后认清了现实，不知不觉间也早已麻木。所以在学校里，我没日没夜地将自己投入到学习中、投入到代码中，除了吃饭就是学习，每日都是教室、饭堂、宿舍，三点一线。的确，他能够很好地阻止我胡思乱想，但也让我沉浸了近一年的压抑情绪，本来前端时间情绪也确实有点濒临崩溃，好在也碰上大姐出嫁，能够趁着此次机会能够回来缓解一下自己的心绪。</p><p class='p cyan'>可是家里的气氛也早已大不如前，每个人都会有他自己的事，大部分时间也确实是我自己在家。直到现在才发现，家里人的陪伴能够让人在无意间产生依赖，也的确都在说陪伴是最长情的告白，我以前也一直以为这是用来形容爱情的，可是谁又能说亲情不是情呢！成长是一件孤独又残酷的事，它一点一点地折磨着我对生活的热情，可我知道无论生活怎样枯燥，我的背后也会有我的家人，那些爱我的家人。所以无论活在怎样阴霾的世界里，我都会去等来照亮我前行的那道光。</p>]]></content>
      
      
      <categories>
          
          <category> Diary </category>
          
          <category> Life </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
